
STEPPER_BOARD_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f8c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  08009160  08009160  00019160  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095ec  080095ec  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080095ec  080095ec  000195ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095f4  080095f4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095f4  080095f4  000195f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095f8  080095f8  000195f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080095fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  200001dc  080097d8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  080097d8  000204c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013651  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026e9  00000000  00000000  0003385d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  00035f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f58  00000000  00000000  00036f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023edd  00000000  00000000  00037ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a21  00000000  00000000  0005bdbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6eeb  00000000  00000000  0006d7de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001446c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005670  00000000  00000000  0014471c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  00149d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  00149dc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009144 	.word	0x08009144

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08009144 	.word	0x08009144

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b96e 	b.w	8000f1c <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9d08      	ldr	r5, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	468c      	mov	ip, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f040 8083 	bne.w	8000d6e <__udivmoddi4+0x116>
 8000c68:	428a      	cmp	r2, r1
 8000c6a:	4617      	mov	r7, r2
 8000c6c:	d947      	bls.n	8000cfe <__udivmoddi4+0xa6>
 8000c6e:	fab2 f282 	clz	r2, r2
 8000c72:	b142      	cbz	r2, 8000c86 <__udivmoddi4+0x2e>
 8000c74:	f1c2 0020 	rsb	r0, r2, #32
 8000c78:	fa24 f000 	lsr.w	r0, r4, r0
 8000c7c:	4091      	lsls	r1, r2
 8000c7e:	4097      	lsls	r7, r2
 8000c80:	ea40 0c01 	orr.w	ip, r0, r1
 8000c84:	4094      	lsls	r4, r2
 8000c86:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c8a:	0c23      	lsrs	r3, r4, #16
 8000c8c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c90:	fa1f fe87 	uxth.w	lr, r7
 8000c94:	fb08 c116 	mls	r1, r8, r6, ip
 8000c98:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9c:	fb06 f10e 	mul.w	r1, r6, lr
 8000ca0:	4299      	cmp	r1, r3
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x60>
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000caa:	f080 8119 	bcs.w	8000ee0 <__udivmoddi4+0x288>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 8116 	bls.w	8000ee0 <__udivmoddi4+0x288>
 8000cb4:	3e02      	subs	r6, #2
 8000cb6:	443b      	add	r3, r7
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	b2a4      	uxth	r4, r4
 8000cbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ccc:	45a6      	cmp	lr, r4
 8000cce:	d909      	bls.n	8000ce4 <__udivmoddi4+0x8c>
 8000cd0:	193c      	adds	r4, r7, r4
 8000cd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd6:	f080 8105 	bcs.w	8000ee4 <__udivmoddi4+0x28c>
 8000cda:	45a6      	cmp	lr, r4
 8000cdc:	f240 8102 	bls.w	8000ee4 <__udivmoddi4+0x28c>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	443c      	add	r4, r7
 8000ce4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ce8:	eba4 040e 	sub.w	r4, r4, lr
 8000cec:	2600      	movs	r6, #0
 8000cee:	b11d      	cbz	r5, 8000cf8 <__udivmoddi4+0xa0>
 8000cf0:	40d4      	lsrs	r4, r2
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cf8:	4631      	mov	r1, r6
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	b902      	cbnz	r2, 8000d02 <__udivmoddi4+0xaa>
 8000d00:	deff      	udf	#255	; 0xff
 8000d02:	fab2 f282 	clz	r2, r2
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	d150      	bne.n	8000dac <__udivmoddi4+0x154>
 8000d0a:	1bcb      	subs	r3, r1, r7
 8000d0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d10:	fa1f f887 	uxth.w	r8, r7
 8000d14:	2601      	movs	r6, #1
 8000d16:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d1a:	0c21      	lsrs	r1, r4, #16
 8000d1c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d24:	fb08 f30c 	mul.w	r3, r8, ip
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0xe4>
 8000d2c:	1879      	adds	r1, r7, r1
 8000d2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0xe2>
 8000d34:	428b      	cmp	r3, r1
 8000d36:	f200 80e9 	bhi.w	8000f0c <__udivmoddi4+0x2b4>
 8000d3a:	4684      	mov	ip, r0
 8000d3c:	1ac9      	subs	r1, r1, r3
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d44:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d48:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d4c:	fb08 f800 	mul.w	r8, r8, r0
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x10c>
 8000d54:	193c      	adds	r4, r7, r4
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x10a>
 8000d5c:	45a0      	cmp	r8, r4
 8000d5e:	f200 80d9 	bhi.w	8000f14 <__udivmoddi4+0x2bc>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 0408 	sub.w	r4, r4, r8
 8000d68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d6c:	e7bf      	b.n	8000cee <__udivmoddi4+0x96>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x12e>
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	f000 80b1 	beq.w	8000eda <__udivmoddi4+0x282>
 8000d78:	2600      	movs	r6, #0
 8000d7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7e:	4630      	mov	r0, r6
 8000d80:	4631      	mov	r1, r6
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f683 	clz	r6, r3
 8000d8a:	2e00      	cmp	r6, #0
 8000d8c:	d14a      	bne.n	8000e24 <__udivmoddi4+0x1cc>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0x140>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80b8 	bhi.w	8000f08 <__udivmoddi4+0x2b0>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	468c      	mov	ip, r1
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	d0a8      	beq.n	8000cf8 <__udivmoddi4+0xa0>
 8000da6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000daa:	e7a5      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000dac:	f1c2 0320 	rsb	r3, r2, #32
 8000db0:	fa20 f603 	lsr.w	r6, r0, r3
 8000db4:	4097      	lsls	r7, r2
 8000db6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dba:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dbe:	40d9      	lsrs	r1, r3
 8000dc0:	4330      	orrs	r0, r6
 8000dc2:	0c03      	lsrs	r3, r0, #16
 8000dc4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dc8:	fa1f f887 	uxth.w	r8, r7
 8000dcc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb06 f108 	mul.w	r1, r6, r8
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	fa04 f402 	lsl.w	r4, r4, r2
 8000dde:	d909      	bls.n	8000df4 <__udivmoddi4+0x19c>
 8000de0:	18fb      	adds	r3, r7, r3
 8000de2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000de6:	f080 808d 	bcs.w	8000f04 <__udivmoddi4+0x2ac>
 8000dea:	4299      	cmp	r1, r3
 8000dec:	f240 808a 	bls.w	8000f04 <__udivmoddi4+0x2ac>
 8000df0:	3e02      	subs	r6, #2
 8000df2:	443b      	add	r3, r7
 8000df4:	1a5b      	subs	r3, r3, r1
 8000df6:	b281      	uxth	r1, r0
 8000df8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dfc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e04:	fb00 f308 	mul.w	r3, r0, r8
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x1c4>
 8000e0c:	1879      	adds	r1, r7, r1
 8000e0e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e12:	d273      	bcs.n	8000efc <__udivmoddi4+0x2a4>
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d971      	bls.n	8000efc <__udivmoddi4+0x2a4>
 8000e18:	3802      	subs	r0, #2
 8000e1a:	4439      	add	r1, r7
 8000e1c:	1acb      	subs	r3, r1, r3
 8000e1e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e22:	e778      	b.n	8000d16 <__udivmoddi4+0xbe>
 8000e24:	f1c6 0c20 	rsb	ip, r6, #32
 8000e28:	fa03 f406 	lsl.w	r4, r3, r6
 8000e2c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e30:	431c      	orrs	r4, r3
 8000e32:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e36:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e3e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e42:	431f      	orrs	r7, r3
 8000e44:	0c3b      	lsrs	r3, r7, #16
 8000e46:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e4a:	fa1f f884 	uxth.w	r8, r4
 8000e4e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e52:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e56:	fb09 fa08 	mul.w	sl, r9, r8
 8000e5a:	458a      	cmp	sl, r1
 8000e5c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e60:	fa00 f306 	lsl.w	r3, r0, r6
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x220>
 8000e66:	1861      	adds	r1, r4, r1
 8000e68:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e6c:	d248      	bcs.n	8000f00 <__udivmoddi4+0x2a8>
 8000e6e:	458a      	cmp	sl, r1
 8000e70:	d946      	bls.n	8000f00 <__udivmoddi4+0x2a8>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4421      	add	r1, r4
 8000e78:	eba1 010a 	sub.w	r1, r1, sl
 8000e7c:	b2bf      	uxth	r7, r7
 8000e7e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e82:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e86:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e8a:	fb00 f808 	mul.w	r8, r0, r8
 8000e8e:	45b8      	cmp	r8, r7
 8000e90:	d907      	bls.n	8000ea2 <__udivmoddi4+0x24a>
 8000e92:	19e7      	adds	r7, r4, r7
 8000e94:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e98:	d22e      	bcs.n	8000ef8 <__udivmoddi4+0x2a0>
 8000e9a:	45b8      	cmp	r8, r7
 8000e9c:	d92c      	bls.n	8000ef8 <__udivmoddi4+0x2a0>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4427      	add	r7, r4
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	eba7 0708 	sub.w	r7, r7, r8
 8000eaa:	fba0 8902 	umull	r8, r9, r0, r2
 8000eae:	454f      	cmp	r7, r9
 8000eb0:	46c6      	mov	lr, r8
 8000eb2:	4649      	mov	r1, r9
 8000eb4:	d31a      	bcc.n	8000eec <__udivmoddi4+0x294>
 8000eb6:	d017      	beq.n	8000ee8 <__udivmoddi4+0x290>
 8000eb8:	b15d      	cbz	r5, 8000ed2 <__udivmoddi4+0x27a>
 8000eba:	ebb3 020e 	subs.w	r2, r3, lr
 8000ebe:	eb67 0701 	sbc.w	r7, r7, r1
 8000ec2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ec6:	40f2      	lsrs	r2, r6
 8000ec8:	ea4c 0202 	orr.w	r2, ip, r2
 8000ecc:	40f7      	lsrs	r7, r6
 8000ece:	e9c5 2700 	strd	r2, r7, [r5]
 8000ed2:	2600      	movs	r6, #0
 8000ed4:	4631      	mov	r1, r6
 8000ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eda:	462e      	mov	r6, r5
 8000edc:	4628      	mov	r0, r5
 8000ede:	e70b      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000ee0:	4606      	mov	r6, r0
 8000ee2:	e6e9      	b.n	8000cb8 <__udivmoddi4+0x60>
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	e6fd      	b.n	8000ce4 <__udivmoddi4+0x8c>
 8000ee8:	4543      	cmp	r3, r8
 8000eea:	d2e5      	bcs.n	8000eb8 <__udivmoddi4+0x260>
 8000eec:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ef0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ef4:	3801      	subs	r0, #1
 8000ef6:	e7df      	b.n	8000eb8 <__udivmoddi4+0x260>
 8000ef8:	4608      	mov	r0, r1
 8000efa:	e7d2      	b.n	8000ea2 <__udivmoddi4+0x24a>
 8000efc:	4660      	mov	r0, ip
 8000efe:	e78d      	b.n	8000e1c <__udivmoddi4+0x1c4>
 8000f00:	4681      	mov	r9, r0
 8000f02:	e7b9      	b.n	8000e78 <__udivmoddi4+0x220>
 8000f04:	4666      	mov	r6, ip
 8000f06:	e775      	b.n	8000df4 <__udivmoddi4+0x19c>
 8000f08:	4630      	mov	r0, r6
 8000f0a:	e74a      	b.n	8000da2 <__udivmoddi4+0x14a>
 8000f0c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f10:	4439      	add	r1, r7
 8000f12:	e713      	b.n	8000d3c <__udivmoddi4+0xe4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	443c      	add	r4, r7
 8000f18:	e724      	b.n	8000d64 <__udivmoddi4+0x10c>
 8000f1a:	bf00      	nop

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f24:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <HAL_Init+0x40>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a0d      	ldr	r2, [pc, #52]	; (8000f60 <HAL_Init+0x40>)
 8000f2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f30:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <HAL_Init+0x40>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a0a      	ldr	r2, [pc, #40]	; (8000f60 <HAL_Init+0x40>)
 8000f36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <HAL_Init+0x40>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a07      	ldr	r2, [pc, #28]	; (8000f60 <HAL_Init+0x40>)
 8000f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f48:	2003      	movs	r0, #3
 8000f4a:	f000 ffb1 	bl	8001eb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f000 f808 	bl	8000f64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f54:	f004 ffa0 	bl	8005e98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40023c00 	.word	0x40023c00

08000f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_InitTick+0x54>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <HAL_InitTick+0x58>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	4619      	mov	r1, r3
 8000f76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 ffc9 	bl	8001f1a <HAL_SYSTICK_Config>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e00e      	b.n	8000fb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2b0f      	cmp	r3, #15
 8000f96:	d80a      	bhi.n	8000fae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	6879      	ldr	r1, [r7, #4]
 8000f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa0:	f000 ff91 	bl	8001ec6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa4:	4a06      	ldr	r2, [pc, #24]	; (8000fc0 <HAL_InitTick+0x5c>)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000faa:	2300      	movs	r3, #0
 8000fac:	e000      	b.n	8000fb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000008 	.word	0x20000008
 8000fbc:	20000004 	.word	0x20000004
 8000fc0:	20000000 	.word	0x20000000

08000fc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc8:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <HAL_IncTick+0x20>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <HAL_IncTick+0x24>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <HAL_IncTick+0x24>)
 8000fd6:	6013      	str	r3, [r2, #0]
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	20000004 	.word	0x20000004
 8000fe8:	20000210 	.word	0x20000210

08000fec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff0:	4b03      	ldr	r3, [pc, #12]	; (8001000 <HAL_GetTick+0x14>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	20000210 	.word	0x20000210

08001004 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800100c:	f7ff ffee 	bl	8000fec <HAL_GetTick>
 8001010:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800101c:	d005      	beq.n	800102a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800101e:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <HAL_Delay+0x44>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	461a      	mov	r2, r3
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4413      	add	r3, r2
 8001028:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800102a:	bf00      	nop
 800102c:	f7ff ffde 	bl	8000fec <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	68fa      	ldr	r2, [r7, #12]
 8001038:	429a      	cmp	r2, r3
 800103a:	d8f7      	bhi.n	800102c <HAL_Delay+0x28>
  {
  }
}
 800103c:	bf00      	nop
 800103e:	bf00      	nop
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000004 	.word	0x20000004

0800104c <HAL_CAN_Init>:
 *         parameters in the CAN_InitStruct.
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;

	/* Check CAN handle */
	if (hcan == NULL) {
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d101      	bne.n	800105e <HAL_CAN_Init+0x12>
		return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e0ed      	b.n	800123a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
	if (hcan->State == HAL_CAN_STATE_RESET) {
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b00      	cmp	r3, #0
 8001068:	d102      	bne.n	8001070 <HAL_CAN_Init+0x24>
		/* Init the low level hardware: CLOCK, NVIC */
		HAL_CAN_MspInit(hcan);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f004 ff3c 	bl	8005ee8 <HAL_CAN_MspInit>
	}
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

	/* Exit from sleep mode */
	CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f022 0202 	bic.w	r2, r2, #2
 800107e:	601a      	str	r2, [r3, #0]

	/* Get tick */
	tickstart = HAL_GetTick();
 8001080:	f7ff ffb4 	bl	8000fec <HAL_GetTick>
 8001084:	60f8      	str	r0, [r7, #12]

	/* Check Sleep mode leave acknowledge */
	while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U) {
 8001086:	e012      	b.n	80010ae <HAL_CAN_Init+0x62>
		if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE) {
 8001088:	f7ff ffb0 	bl	8000fec <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	2b0a      	cmp	r3, #10
 8001094:	d90b      	bls.n	80010ae <HAL_CAN_Init+0x62>
			/* Update error code */
			hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	625a      	str	r2, [r3, #36]	; 0x24

			/* Change CAN state */
			hcan->State = HAL_CAN_STATE_ERROR;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2205      	movs	r2, #5
 80010a6:	f883 2020 	strb.w	r2, [r3, #32]

			return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e0c5      	b.n	800123a <HAL_CAN_Init+0x1ee>
	while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U) {
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0302 	and.w	r3, r3, #2
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1e5      	bne.n	8001088 <HAL_CAN_Init+0x3c>
		}
	}

	/* Request initialisation */
	SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f042 0201 	orr.w	r2, r2, #1
 80010ca:	601a      	str	r2, [r3, #0]

	/* Get tick */
	tickstart = HAL_GetTick();
 80010cc:	f7ff ff8e 	bl	8000fec <HAL_GetTick>
 80010d0:	60f8      	str	r0, [r7, #12]

	/* Wait initialisation acknowledge */
	while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U) {
 80010d2:	e012      	b.n	80010fa <HAL_CAN_Init+0xae>
		if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE) {
 80010d4:	f7ff ff8a 	bl	8000fec <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b0a      	cmp	r3, #10
 80010e0:	d90b      	bls.n	80010fa <HAL_CAN_Init+0xae>
			/* Update error code */
			hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	625a      	str	r2, [r3, #36]	; 0x24

			/* Change CAN state */
			hcan->State = HAL_CAN_STATE_ERROR;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2205      	movs	r2, #5
 80010f2:	f883 2020 	strb.w	r2, [r3, #32]

			return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e09f      	b.n	800123a <HAL_CAN_Init+0x1ee>
	while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U) {
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	2b00      	cmp	r3, #0
 8001106:	d0e5      	beq.n	80010d4 <HAL_CAN_Init+0x88>
		}
	}

	/* Set the time triggered communication mode */
	if (hcan->Init.TimeTriggeredMode == ENABLE) {
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	7e1b      	ldrb	r3, [r3, #24]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d108      	bne.n	8001122 <HAL_CAN_Init+0xd6>
		SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	e007      	b.n	8001132 <HAL_CAN_Init+0xe6>
	} else {
		CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001130:	601a      	str	r2, [r3, #0]
	}

	/* Set the automatic bus-off management */
	if (hcan->Init.AutoBusOff == ENABLE) {
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	7e5b      	ldrb	r3, [r3, #25]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d108      	bne.n	800114c <HAL_CAN_Init+0x100>
		SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	e007      	b.n	800115c <HAL_CAN_Init+0x110>
	} else {
		CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800115a:	601a      	str	r2, [r3, #0]
	}

	/* Set the automatic wake-up mode */
	if (hcan->Init.AutoWakeUp == ENABLE) {
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	7e9b      	ldrb	r3, [r3, #26]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d108      	bne.n	8001176 <HAL_CAN_Init+0x12a>
		SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f042 0220 	orr.w	r2, r2, #32
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	e007      	b.n	8001186 <HAL_CAN_Init+0x13a>
	} else {
		CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f022 0220 	bic.w	r2, r2, #32
 8001184:	601a      	str	r2, [r3, #0]
	}

	/* Set the automatic retransmission */
	if (hcan->Init.AutoRetransmission == ENABLE) {
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	7edb      	ldrb	r3, [r3, #27]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d108      	bne.n	80011a0 <HAL_CAN_Init+0x154>
		CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f022 0210 	bic.w	r2, r2, #16
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	e007      	b.n	80011b0 <HAL_CAN_Init+0x164>
	} else {
		SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f042 0210 	orr.w	r2, r2, #16
 80011ae:	601a      	str	r2, [r3, #0]
	}

	/* Set the receive FIFO locked mode */
	if (hcan->Init.ReceiveFifoLocked == ENABLE) {
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	7f1b      	ldrb	r3, [r3, #28]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d108      	bne.n	80011ca <HAL_CAN_Init+0x17e>
		SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f042 0208 	orr.w	r2, r2, #8
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	e007      	b.n	80011da <HAL_CAN_Init+0x18e>
	} else {
		CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f022 0208 	bic.w	r2, r2, #8
 80011d8:	601a      	str	r2, [r3, #0]
	}

	/* Set the transmit FIFO priority */
	if (hcan->Init.TransmitFifoPriority == ENABLE) {
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	7f5b      	ldrb	r3, [r3, #29]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d108      	bne.n	80011f4 <HAL_CAN_Init+0x1a8>
		SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f042 0204 	orr.w	r2, r2, #4
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	e007      	b.n	8001204 <HAL_CAN_Init+0x1b8>
	} else {
		CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f022 0204 	bic.w	r2, r2, #4
 8001202:	601a      	str	r2, [r3, #0]
	}

	/* Set the bit timing register */
	WRITE_REG(hcan->Instance->BTR,
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	431a      	orrs	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	431a      	orrs	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	695b      	ldr	r3, [r3, #20]
 8001218:	ea42 0103 	orr.w	r1, r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	1e5a      	subs	r2, r3, #1
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	430a      	orrs	r2, r1
 8001228:	61da      	str	r2, [r3, #28]
			(uint32_t )(hcan->Init.Mode | hcan->Init.SyncJumpWidth
					| hcan->Init.TimeSeg1 | hcan->Init.TimeSeg2
					| (hcan->Init.Prescaler - 1U)));

	/* Initialize the error code */
	hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2200      	movs	r2, #0
 800122e:	625a      	str	r2, [r3, #36]	; 0x24

	/* Initialize the CAN state */
	hcan->State = HAL_CAN_STATE_READY;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2201      	movs	r2, #1
 8001234:	f883 2020 	strb.w	r2, [r3, #32]

	/* Return function status */
	return HAL_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <HAL_CAN_ConfigFilter>:
 * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
 *         contains the filter configuration information.
 * @retval None
 */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan,
		CAN_FilterTypeDef *sFilterConfig) {
 8001244:	b480      	push	{r7}
 8001246:	b087      	sub	sp, #28
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
	uint32_t filternbrbitpos;
	CAN_TypeDef *can_ip = hcan->Instance;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	617b      	str	r3, [r7, #20]
	HAL_CAN_StateTypeDef state = hcan->State;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f893 3020 	ldrb.w	r3, [r3, #32]
 800125a:	74fb      	strb	r3, [r7, #19]

	if ((state == HAL_CAN_STATE_READY) || (state == HAL_CAN_STATE_LISTENING)) {
 800125c:	7cfb      	ldrb	r3, [r7, #19]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d003      	beq.n	800126a <HAL_CAN_ConfigFilter+0x26>
 8001262:	7cfb      	ldrb	r3, [r7, #19]
 8001264:	2b02      	cmp	r3, #2
 8001266:	f040 80be 	bne.w	80013e6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
		/* CAN1 and CAN2 are dual instances with 28 common filters banks */
		/* Select master instance to access the filter banks */
		can_ip = CAN1;
 800126a:	4b65      	ldr	r3, [pc, #404]	; (8001400 <HAL_CAN_ConfigFilter+0x1bc>)
 800126c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

		/* Initialisation mode for the filter */
		SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001274:	f043 0201 	orr.w	r2, r3, #1
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
		/* Select the start filter number of CAN2 slave instance */
		CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001284:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		SET_BIT(can_ip->FMR,
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001298:	021b      	lsls	r3, r3, #8
 800129a:	431a      	orrs	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
				sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
		/* Convert filter number into bit position */
		filternbrbitpos = (uint32_t) 1 << (sFilterConfig->FilterBank & 0x1FU);
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	f003 031f 	and.w	r3, r3, #31
 80012aa:	2201      	movs	r2, #1
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	60fb      	str	r3, [r7, #12]

		/* Filter Deactivation */
		CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	43db      	mvns	r3, r3
 80012bc:	401a      	ands	r2, r3
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

		/* Filter Scale */
		if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT) {
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	69db      	ldr	r3, [r3, #28]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d123      	bne.n	8001314 <HAL_CAN_ConfigFilter+0xd0>
			/* 16-bit scale for the filter */
			CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	43db      	mvns	r3, r3
 80012d6:	401a      	ands	r2, r3
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

			/* First 16-bit identifier and First 16-bit mask */
			/* Or First 16-bit identifier and Second 16-bit identifier */
			can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
					((0x0000FFFFU & (uint32_t) sFilterConfig->FilterMaskIdLow)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	68db      	ldr	r3, [r3, #12]
							<< 16U)
 80012e2:	0419      	lsls	r1, r3, #16
							| (0x0000FFFFU
									& (uint32_t) sFilterConfig->FilterIdLow);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	b29b      	uxth	r3, r3
			can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012ea:	683a      	ldr	r2, [r7, #0]
 80012ec:	6952      	ldr	r2, [r2, #20]
							| (0x0000FFFFU
 80012ee:	4319      	orrs	r1, r3
			can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	3248      	adds	r2, #72	; 0x48
 80012f4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

			/* Second 16-bit identifier and Second 16-bit mask */
			/* Or Third 16-bit identifier and Fourth 16-bit identifier */
			can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
					((0x0000FFFFU & (uint32_t) sFilterConfig->FilterMaskIdHigh)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	689b      	ldr	r3, [r3, #8]
							<< 16U)
 80012fc:	0419      	lsls	r1, r3, #16
							| (0x0000FFFFU
									& (uint32_t) sFilterConfig->FilterIdHigh);
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	b29a      	uxth	r2, r3
			can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	695b      	ldr	r3, [r3, #20]
							| (0x0000FFFFU
 8001308:	430a      	orrs	r2, r1
			can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800130a:	6979      	ldr	r1, [r7, #20]
 800130c:	3348      	adds	r3, #72	; 0x48
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	440b      	add	r3, r1
 8001312:	605a      	str	r2, [r3, #4]
		}

		if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT) {
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	69db      	ldr	r3, [r3, #28]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d122      	bne.n	8001362 <HAL_CAN_ConfigFilter+0x11e>
			/* 32-bit scale for the filter */
			SET_BIT(can_ip->FS1R, filternbrbitpos);
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	431a      	orrs	r2, r3
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

			/* 32-bit identifier or First 32-bit identifier */
			can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
					((0x0000FFFFU & (uint32_t) sFilterConfig->FilterIdHigh)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
							<< 16U)
 8001330:	0419      	lsls	r1, r3, #16
							| (0x0000FFFFU
									& (uint32_t) sFilterConfig->FilterIdLow);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	b29b      	uxth	r3, r3
			can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	6952      	ldr	r2, [r2, #20]
							| (0x0000FFFFU
 800133c:	4319      	orrs	r1, r3
			can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	3248      	adds	r2, #72	; 0x48
 8001342:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

			/* 32-bit mask or Second 32-bit identifier */
			can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
					((0x0000FFFFU & (uint32_t) sFilterConfig->FilterMaskIdHigh)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	689b      	ldr	r3, [r3, #8]
							<< 16U)
 800134a:	0419      	lsls	r1, r3, #16
							| (0x0000FFFFU
									& (uint32_t) sFilterConfig->FilterMaskIdLow);
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	b29a      	uxth	r2, r3
			can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	695b      	ldr	r3, [r3, #20]
							| (0x0000FFFFU
 8001356:	430a      	orrs	r2, r1
			can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001358:	6979      	ldr	r1, [r7, #20]
 800135a:	3348      	adds	r3, #72	; 0x48
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	440b      	add	r3, r1
 8001360:	605a      	str	r2, [r3, #4]
		}

		/* Filter Mode */
		if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK) {
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d109      	bne.n	800137e <HAL_CAN_ConfigFilter+0x13a>
			/* Id/Mask mode for the filter*/
			CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	43db      	mvns	r3, r3
 8001374:	401a      	ands	r2, r3
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800137c:	e007      	b.n	800138e <HAL_CAN_ConfigFilter+0x14a>
		} else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
		{
			/* Identifier list mode for the filter*/
			SET_BIT(can_ip->FM1R, filternbrbitpos);
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	431a      	orrs	r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		}

		/* Filter FIFO assignment */
		if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0) {
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d109      	bne.n	80013aa <HAL_CAN_ConfigFilter+0x166>
			/* FIFO 0 assignation for the filter */
			CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	43db      	mvns	r3, r3
 80013a0:	401a      	ands	r2, r3
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80013a8:	e007      	b.n	80013ba <HAL_CAN_ConfigFilter+0x176>
		} else {
			/* FIFO 1 assignation for the filter */
			SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	431a      	orrs	r2, r3
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
		}

		/* Filter activation */
		if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE) {
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	6a1b      	ldr	r3, [r3, #32]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d107      	bne.n	80013d2 <HAL_CAN_ConfigFilter+0x18e>
			SET_BIT(can_ip->FA1R, filternbrbitpos);
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	431a      	orrs	r2, r3
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
		}

		/* Leave the initialisation mode for the filter */
		CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013d8:	f023 0201 	bic.w	r2, r3, #1
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

		/* Return function status */
		return HAL_OK;
 80013e2:	2300      	movs	r3, #0
 80013e4:	e006      	b.n	80013f4 <HAL_CAN_ConfigFilter+0x1b0>
	} else {
		/* Update error code */
		hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	625a      	str	r2, [r3, #36]	; 0x24

		return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
	}
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	371c      	adds	r7, #28
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	40006400 	.word	0x40006400

08001404 <HAL_CAN_Start>:
 * @brief  Start the CAN module.
 * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan) {
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;

	if (hcan->State == HAL_CAN_STATE_READY) {
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001412:	b2db      	uxtb	r3, r3
 8001414:	2b01      	cmp	r3, #1
 8001416:	d12e      	bne.n	8001476 <HAL_CAN_Start+0x72>
		/* Change CAN peripheral state */
		hcan->State = HAL_CAN_STATE_LISTENING;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2202      	movs	r2, #2
 800141c:	f883 2020 	strb.w	r2, [r3, #32]

		/* Request leave initialisation */
		CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f022 0201 	bic.w	r2, r2, #1
 800142e:	601a      	str	r2, [r3, #0]

		/* Get tick */
		tickstart = HAL_GetTick();
 8001430:	f7ff fddc 	bl	8000fec <HAL_GetTick>
 8001434:	60f8      	str	r0, [r7, #12]

		/* Wait the acknowledge */
		while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U) {
 8001436:	e012      	b.n	800145e <HAL_CAN_Start+0x5a>
			/* Check for the Timeout */
			if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE) {
 8001438:	f7ff fdd8 	bl	8000fec <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b0a      	cmp	r3, #10
 8001444:	d90b      	bls.n	800145e <HAL_CAN_Start+0x5a>
				/* Update error code */
				hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	625a      	str	r2, [r3, #36]	; 0x24

				/* Change CAN state */
				hcan->State = HAL_CAN_STATE_ERROR;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2205      	movs	r2, #5
 8001456:	f883 2020 	strb.w	r2, [r3, #32]

				return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e012      	b.n	8001484 <HAL_CAN_Start+0x80>
		while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U) {
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1e5      	bne.n	8001438 <HAL_CAN_Start+0x34>
			}
		}

		/* Reset the CAN ErrorCode */
		hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	625a      	str	r2, [r3, #36]	; 0x24

		/* Return function status */
		return HAL_OK;
 8001472:	2300      	movs	r3, #0
 8001474:	e006      	b.n	8001484 <HAL_CAN_Start+0x80>
	} else {
		/* Update error code */
		hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	625a      	str	r2, [r3, #36]	; 0x24

		return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
	}
}
 8001484:	4618      	mov	r0, r3
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <HAL_CAN_AddTxMessage>:
 *         the TxMailbox used to store the Tx message.
 *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan,
		CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox) {
 800148c:	b480      	push	{r7}
 800148e:	b089      	sub	sp, #36	; 0x24
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
 8001498:	603b      	str	r3, [r7, #0]
	uint32_t transmitmailbox;
	HAL_CAN_StateTypeDef state = hcan->State;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014a0:	77fb      	strb	r3, [r7, #31]
	uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	61bb      	str	r3, [r7, #24]
	} else {
		assert_param(IS_CAN_EXTID(pHeader->ExtId));
	}
	assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

	if ((state == HAL_CAN_STATE_READY) || (state == HAL_CAN_STATE_LISTENING)) {
 80014aa:	7ffb      	ldrb	r3, [r7, #31]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d003      	beq.n	80014b8 <HAL_CAN_AddTxMessage+0x2c>
 80014b0:	7ffb      	ldrb	r3, [r7, #31]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	f040 80b8 	bne.w	8001628 <HAL_CAN_AddTxMessage+0x19c>
		/* Check that all the Tx mailboxes are not full */
		if (((tsr & CAN_TSR_TME0) != 0U) || ((tsr & CAN_TSR_TME1) != 0U)
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d10a      	bne.n	80014d8 <HAL_CAN_AddTxMessage+0x4c>
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d105      	bne.n	80014d8 <HAL_CAN_AddTxMessage+0x4c>
				|| ((tsr & CAN_TSR_TME2) != 0U)) {
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f000 80a0 	beq.w	8001618 <HAL_CAN_AddTxMessage+0x18c>
			/* Select an empty transmit mailbox */
			transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	0e1b      	lsrs	r3, r3, #24
 80014dc:	f003 0303 	and.w	r3, r3, #3
 80014e0:	617b      	str	r3, [r7, #20]

			/* Check transmit mailbox value */
			if (transmitmailbox > 2U) {
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d907      	bls.n	80014f8 <HAL_CAN_AddTxMessage+0x6c>
				/* Update error code */
				hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	625a      	str	r2, [r3, #36]	; 0x24

				return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e09e      	b.n	8001636 <HAL_CAN_AddTxMessage+0x1aa>
			}

			/* Store the Tx mailbox */
			*pTxMailbox = (uint32_t) 1 << transmitmailbox;
 80014f8:	2201      	movs	r2, #1
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	409a      	lsls	r2, r3
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	601a      	str	r2, [r3, #0]

			/* Set up the Id */
			if (pHeader->IDE == CAN_ID_STD) {
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10d      	bne.n	8001526 <HAL_CAN_AddTxMessage+0x9a>
				hcan->Instance->sTxMailBox[transmitmailbox].TIR =
						((pHeader->StdId << CAN_TI0R_STID_Pos) | pHeader->RTR);
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	055a      	lsls	r2, r3, #21
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	68db      	ldr	r3, [r3, #12]
				hcan->Instance->sTxMailBox[transmitmailbox].TIR =
 8001514:	68f9      	ldr	r1, [r7, #12]
 8001516:	6809      	ldr	r1, [r1, #0]
						((pHeader->StdId << CAN_TI0R_STID_Pos) | pHeader->RTR);
 8001518:	431a      	orrs	r2, r3
				hcan->Instance->sTxMailBox[transmitmailbox].TIR =
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	3318      	adds	r3, #24
 800151e:	011b      	lsls	r3, r3, #4
 8001520:	440b      	add	r3, r1
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	e00f      	b.n	8001546 <HAL_CAN_AddTxMessage+0xba>
			} else {
				hcan->Instance->sTxMailBox[transmitmailbox].TIR =
						((pHeader->ExtId << CAN_TI0R_EXID_Pos) | pHeader->IDE
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	00da      	lsls	r2, r3, #3
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	431a      	orrs	r2, r3
								| pHeader->RTR);
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	68db      	ldr	r3, [r3, #12]
				hcan->Instance->sTxMailBox[transmitmailbox].TIR =
 8001536:	68f9      	ldr	r1, [r7, #12]
 8001538:	6809      	ldr	r1, [r1, #0]
								| pHeader->RTR);
 800153a:	431a      	orrs	r2, r3
				hcan->Instance->sTxMailBox[transmitmailbox].TIR =
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	3318      	adds	r3, #24
 8001540:	011b      	lsls	r3, r3, #4
 8001542:	440b      	add	r3, r1
 8001544:	601a      	str	r2, [r3, #0]
			}

			/* Set up the DLC */
			hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6819      	ldr	r1, [r3, #0]
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	691a      	ldr	r2, [r3, #16]
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	3318      	adds	r3, #24
 8001552:	011b      	lsls	r3, r3, #4
 8001554:	440b      	add	r3, r1
 8001556:	3304      	adds	r3, #4
 8001558:	601a      	str	r2, [r3, #0]

			/* Set up the Transmit Global Time mode */
			if (pHeader->TransmitGlobalTime == ENABLE) {
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	7d1b      	ldrb	r3, [r3, #20]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d111      	bne.n	8001586 <HAL_CAN_AddTxMessage+0xfa>
				SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR,
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	3318      	adds	r3, #24
 800156a:	011b      	lsls	r3, r3, #4
 800156c:	4413      	add	r3, r2
 800156e:	3304      	adds	r3, #4
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	6811      	ldr	r1, [r2, #0]
 8001576:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	3318      	adds	r3, #24
 800157e:	011b      	lsls	r3, r3, #4
 8001580:	440b      	add	r3, r1
 8001582:	3304      	adds	r3, #4
 8001584:	601a      	str	r2, [r3, #0]
						CAN_TDT0R_TGT);
			}

			/* Set up the data field */
			WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3307      	adds	r3, #7
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	061a      	lsls	r2, r3, #24
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	3306      	adds	r3, #6
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	041b      	lsls	r3, r3, #16
 8001596:	431a      	orrs	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3305      	adds	r3, #5
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	021b      	lsls	r3, r3, #8
 80015a0:	4313      	orrs	r3, r2
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	3204      	adds	r2, #4
 80015a6:	7812      	ldrb	r2, [r2, #0]
 80015a8:	4610      	mov	r0, r2
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	6811      	ldr	r1, [r2, #0]
 80015ae:	ea43 0200 	orr.w	r2, r3, r0
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	011b      	lsls	r3, r3, #4
 80015b6:	440b      	add	r3, r1
 80015b8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80015bc:	601a      	str	r2, [r3, #0]
					((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) | ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) | ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) | ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
			WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3303      	adds	r3, #3
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	061a      	lsls	r2, r3, #24
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	3302      	adds	r3, #2
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	041b      	lsls	r3, r3, #16
 80015ce:	431a      	orrs	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3301      	adds	r3, #1
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	021b      	lsls	r3, r3, #8
 80015d8:	4313      	orrs	r3, r2
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	7812      	ldrb	r2, [r2, #0]
 80015de:	4610      	mov	r0, r2
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	6811      	ldr	r1, [r2, #0]
 80015e4:	ea43 0200 	orr.w	r2, r3, r0
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	011b      	lsls	r3, r3, #4
 80015ec:	440b      	add	r3, r1
 80015ee:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80015f2:	601a      	str	r2, [r3, #0]
					((uint32_t)aData[3] << CAN_TDL0R_DATA3_Pos) | ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) | ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) | ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

			/* Request transmission */
			SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR,
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	3318      	adds	r3, #24
 80015fc:	011b      	lsls	r3, r3, #4
 80015fe:	4413      	add	r3, r2
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	6811      	ldr	r1, [r2, #0]
 8001606:	f043 0201 	orr.w	r2, r3, #1
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	3318      	adds	r3, #24
 800160e:	011b      	lsls	r3, r3, #4
 8001610:	440b      	add	r3, r1
 8001612:	601a      	str	r2, [r3, #0]
					CAN_TI0R_TXRQ);

			/* Return function status */
			return HAL_OK;
 8001614:	2300      	movs	r3, #0
 8001616:	e00e      	b.n	8001636 <HAL_CAN_AddTxMessage+0x1aa>
		} else {
			/* Update error code */
			hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	625a      	str	r2, [r3, #36]	; 0x24

			return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e006      	b.n	8001636 <HAL_CAN_AddTxMessage+0x1aa>
		}
	} else {
		/* Update error code */
		hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	625a      	str	r2, [r3, #36]	; 0x24

		return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
	}
}
 8001636:	4618      	mov	r0, r3
 8001638:	3724      	adds	r7, #36	; 0x24
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <HAL_CAN_GetRxMessage>:
 *         of the Rx frame will be stored.
 * @param  aData array where the payload of the Rx frame will be stored.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
		CAN_RxHeaderTypeDef *pHeader, uint8_t aData[]) {
 8001642:	b480      	push	{r7}
 8001644:	b087      	sub	sp, #28
 8001646:	af00      	add	r7, sp, #0
 8001648:	60f8      	str	r0, [r7, #12]
 800164a:	60b9      	str	r1, [r7, #8]
 800164c:	607a      	str	r2, [r7, #4]
 800164e:	603b      	str	r3, [r7, #0]
	HAL_CAN_StateTypeDef state = hcan->State;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001656:	75fb      	strb	r3, [r7, #23]

	assert_param(IS_CAN_RX_FIFO(RxFifo));

	if ((state == HAL_CAN_STATE_READY) || (state == HAL_CAN_STATE_LISTENING)) {
 8001658:	7dfb      	ldrb	r3, [r7, #23]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d003      	beq.n	8001666 <HAL_CAN_GetRxMessage+0x24>
 800165e:	7dfb      	ldrb	r3, [r7, #23]
 8001660:	2b02      	cmp	r3, #2
 8001662:	f040 80f3 	bne.w	800184c <HAL_CAN_GetRxMessage+0x20a>
		/* Check the Rx FIFO */
		if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d10e      	bne.n	800168a <HAL_CAN_GetRxMessage+0x48>
		{
			/* Check that the Rx FIFO 0 is not empty */
			if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U) {
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	f003 0303 	and.w	r3, r3, #3
 8001676:	2b00      	cmp	r3, #0
 8001678:	d116      	bne.n	80016a8 <HAL_CAN_GetRxMessage+0x66>
				/* Update error code */
				hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	625a      	str	r2, [r3, #36]	; 0x24

				return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e0e7      	b.n	800185a <HAL_CAN_GetRxMessage+0x218>
			}
		} else /* Rx element is assigned to Rx FIFO 1 */
		{
			/* Check that the Rx FIFO 1 is not empty */
			if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U) {
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	f003 0303 	and.w	r3, r3, #3
 8001694:	2b00      	cmp	r3, #0
 8001696:	d107      	bne.n	80016a8 <HAL_CAN_GetRxMessage+0x66>
				/* Update error code */
				hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	625a      	str	r2, [r3, #36]	; 0x24

				return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e0d8      	b.n	800185a <HAL_CAN_GetRxMessage+0x218>
			}
		}

		/* Get the header */
		pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	331b      	adds	r3, #27
 80016b0:	011b      	lsls	r3, r3, #4
 80016b2:	4413      	add	r3, r2
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0204 	and.w	r2, r3, #4
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	609a      	str	r2, [r3, #8]
		if (pHeader->IDE == CAN_ID_STD) {
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d10c      	bne.n	80016e0 <HAL_CAN_GetRxMessage+0x9e>
			pHeader->StdId = (CAN_RI0R_STID
					& hcan->Instance->sFIFOMailBox[RxFifo].RIR)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	331b      	adds	r3, #27
 80016ce:	011b      	lsls	r3, r3, #4
 80016d0:	4413      	add	r3, r2
 80016d2:	681b      	ldr	r3, [r3, #0]
					>> CAN_TI0R_STID_Pos;
 80016d4:	0d5b      	lsrs	r3, r3, #21
 80016d6:	f3c3 020a 	ubfx	r2, r3, #0, #11
			pHeader->StdId = (CAN_RI0R_STID
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	e00b      	b.n	80016f8 <HAL_CAN_GetRxMessage+0xb6>
		} else {
			pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID)
					& hcan->Instance->sFIFOMailBox[RxFifo].RIR)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	331b      	adds	r3, #27
 80016e8:	011b      	lsls	r3, r3, #4
 80016ea:	4413      	add	r3, r2
 80016ec:	681b      	ldr	r3, [r3, #0]
					>> CAN_RI0R_EXID_Pos;
 80016ee:	08db      	lsrs	r3, r3, #3
 80016f0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
			pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	605a      	str	r2, [r3, #4]
		}
		pHeader->RTR =
				(CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	331b      	adds	r3, #27
 8001700:	011b      	lsls	r3, r3, #4
 8001702:	4413      	add	r3, r2
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0202 	and.w	r2, r3, #2
		pHeader->RTR =
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	60da      	str	r2, [r3, #12]
		pHeader->DLC = (CAN_RDT0R_DLC
				& hcan->Instance->sFIFOMailBox[RxFifo].RDTR)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	331b      	adds	r3, #27
 8001716:	011b      	lsls	r3, r3, #4
 8001718:	4413      	add	r3, r2
 800171a:	3304      	adds	r3, #4
 800171c:	681b      	ldr	r3, [r3, #0]
				>> CAN_RDT0R_DLC_Pos;
 800171e:	f003 020f 	and.w	r2, r3, #15
		pHeader->DLC = (CAN_RDT0R_DLC
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	611a      	str	r2, [r3, #16]
		pHeader->FilterMatchIndex = (CAN_RDT0R_FMI
				& hcan->Instance->sFIFOMailBox[RxFifo].RDTR)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	331b      	adds	r3, #27
 800172e:	011b      	lsls	r3, r3, #4
 8001730:	4413      	add	r3, r2
 8001732:	3304      	adds	r3, #4
 8001734:	681b      	ldr	r3, [r3, #0]
				>> CAN_RDT0R_FMI_Pos;
 8001736:	0a1b      	lsrs	r3, r3, #8
 8001738:	b2da      	uxtb	r2, r3
		pHeader->FilterMatchIndex = (CAN_RDT0R_FMI
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	619a      	str	r2, [r3, #24]
		pHeader->Timestamp = (CAN_RDT0R_TIME
				& hcan->Instance->sFIFOMailBox[RxFifo].RDTR)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	331b      	adds	r3, #27
 8001746:	011b      	lsls	r3, r3, #4
 8001748:	4413      	add	r3, r2
 800174a:	3304      	adds	r3, #4
 800174c:	681b      	ldr	r3, [r3, #0]
				>> CAN_RDT0R_TIME_Pos;
 800174e:	0c1b      	lsrs	r3, r3, #16
 8001750:	b29a      	uxth	r2, r3
		pHeader->Timestamp = (CAN_RDT0R_TIME
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	615a      	str	r2, [r3, #20]

		/* Get the data */
		aData[0] = (uint8_t) ((CAN_RDL0R_DATA0
				& hcan->Instance->sFIFOMailBox[RxFifo].RDLR)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	011b      	lsls	r3, r3, #4
 800175e:	4413      	add	r3, r2
 8001760:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001764:	681b      	ldr	r3, [r3, #0]
		aData[0] = (uint8_t) ((CAN_RDL0R_DATA0
 8001766:	b2da      	uxtb	r2, r3
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	701a      	strb	r2, [r3, #0]
				>> CAN_RDL0R_DATA0_Pos);
		aData[1] = (uint8_t) ((CAN_RDL0R_DATA1
				& hcan->Instance->sFIFOMailBox[RxFifo].RDLR)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	011b      	lsls	r3, r3, #4
 8001774:	4413      	add	r3, r2
 8001776:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800177a:	681b      	ldr	r3, [r3, #0]
				>> CAN_RDL0R_DATA1_Pos);
 800177c:	0a1a      	lsrs	r2, r3, #8
		aData[1] = (uint8_t) ((CAN_RDL0R_DATA1
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	3301      	adds	r3, #1
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	701a      	strb	r2, [r3, #0]
		aData[2] = (uint8_t) ((CAN_RDL0R_DATA2
				& hcan->Instance->sFIFOMailBox[RxFifo].RDLR)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	011b      	lsls	r3, r3, #4
 800178e:	4413      	add	r3, r2
 8001790:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001794:	681b      	ldr	r3, [r3, #0]
				>> CAN_RDL0R_DATA2_Pos);
 8001796:	0c1a      	lsrs	r2, r3, #16
		aData[2] = (uint8_t) ((CAN_RDL0R_DATA2
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	3302      	adds	r3, #2
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	701a      	strb	r2, [r3, #0]
		aData[3] = (uint8_t) ((CAN_RDL0R_DATA3
				& hcan->Instance->sFIFOMailBox[RxFifo].RDLR)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	011b      	lsls	r3, r3, #4
 80017a8:	4413      	add	r3, r2
 80017aa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017ae:	681b      	ldr	r3, [r3, #0]
				>> CAN_RDL0R_DATA3_Pos);
 80017b0:	0e1a      	lsrs	r2, r3, #24
		aData[3] = (uint8_t) ((CAN_RDL0R_DATA3
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	3303      	adds	r3, #3
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	701a      	strb	r2, [r3, #0]
		aData[4] = (uint8_t) ((CAN_RDH0R_DATA4
				& hcan->Instance->sFIFOMailBox[RxFifo].RDHR)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	011b      	lsls	r3, r3, #4
 80017c2:	4413      	add	r3, r2
 80017c4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017c8:	681a      	ldr	r2, [r3, #0]
		aData[4] = (uint8_t) ((CAN_RDH0R_DATA4
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	3304      	adds	r3, #4
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	701a      	strb	r2, [r3, #0]
				>> CAN_RDH0R_DATA4_Pos);
		aData[5] = (uint8_t) ((CAN_RDH0R_DATA5
				& hcan->Instance->sFIFOMailBox[RxFifo].RDHR)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	011b      	lsls	r3, r3, #4
 80017da:	4413      	add	r3, r2
 80017dc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017e0:	681b      	ldr	r3, [r3, #0]
				>> CAN_RDH0R_DATA5_Pos);
 80017e2:	0a1a      	lsrs	r2, r3, #8
		aData[5] = (uint8_t) ((CAN_RDH0R_DATA5
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	3305      	adds	r3, #5
 80017e8:	b2d2      	uxtb	r2, r2
 80017ea:	701a      	strb	r2, [r3, #0]
		aData[6] = (uint8_t) ((CAN_RDH0R_DATA6
				& hcan->Instance->sFIFOMailBox[RxFifo].RDHR)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	011b      	lsls	r3, r3, #4
 80017f4:	4413      	add	r3, r2
 80017f6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017fa:	681b      	ldr	r3, [r3, #0]
				>> CAN_RDH0R_DATA6_Pos);
 80017fc:	0c1a      	lsrs	r2, r3, #16
		aData[6] = (uint8_t) ((CAN_RDH0R_DATA6
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	3306      	adds	r3, #6
 8001802:	b2d2      	uxtb	r2, r2
 8001804:	701a      	strb	r2, [r3, #0]
		aData[7] = (uint8_t) ((CAN_RDH0R_DATA7
				& hcan->Instance->sFIFOMailBox[RxFifo].RDHR)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	011b      	lsls	r3, r3, #4
 800180e:	4413      	add	r3, r2
 8001810:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001814:	681b      	ldr	r3, [r3, #0]
				>> CAN_RDH0R_DATA7_Pos);
 8001816:	0e1a      	lsrs	r2, r3, #24
		aData[7] = (uint8_t) ((CAN_RDH0R_DATA7
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	3307      	adds	r3, #7
 800181c:	b2d2      	uxtb	r2, r2
 800181e:	701a      	strb	r2, [r3, #0]

		/* Release the FIFO */
		if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d108      	bne.n	8001838 <HAL_CAN_GetRxMessage+0x1f6>
		{
			/* Release RX FIFO 0 */
			SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68da      	ldr	r2, [r3, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f042 0220 	orr.w	r2, r2, #32
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	e007      	b.n	8001848 <HAL_CAN_GetRxMessage+0x206>
		} else /* Rx element is assigned to Rx FIFO 1 */
		{
			/* Release RX FIFO 1 */
			SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	691a      	ldr	r2, [r3, #16]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f042 0220 	orr.w	r2, r2, #32
 8001846:	611a      	str	r2, [r3, #16]
		}

		/* Return function status */
		return HAL_OK;
 8001848:	2300      	movs	r3, #0
 800184a:	e006      	b.n	800185a <HAL_CAN_GetRxMessage+0x218>
	} else {
		/* Update error code */
		hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001850:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	625a      	str	r2, [r3, #36]	; 0x24

		return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
	}
}
 800185a:	4618      	mov	r0, r3
 800185c:	371c      	adds	r7, #28
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <HAL_CAN_ActivateNotification>:
 * @param  ActiveITs indicates which interrupts will be enabled.
 *         This parameter can be any combination of @arg CAN_Interrupts.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan,
		uint32_t ActiveITs) {
 8001866:	b480      	push	{r7}
 8001868:	b085      	sub	sp, #20
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
 800186e:	6039      	str	r1, [r7, #0]
	HAL_CAN_StateTypeDef state = hcan->State;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001876:	73fb      	strb	r3, [r7, #15]

	/* Check function parameters */
	assert_param(IS_CAN_IT(ActiveITs));

	if ((state == HAL_CAN_STATE_READY) || (state == HAL_CAN_STATE_LISTENING)) {
 8001878:	7bfb      	ldrb	r3, [r7, #15]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d002      	beq.n	8001884 <HAL_CAN_ActivateNotification+0x1e>
 800187e:	7bfb      	ldrb	r3, [r7, #15]
 8001880:	2b02      	cmp	r3, #2
 8001882:	d109      	bne.n	8001898 <HAL_CAN_ActivateNotification+0x32>
		/* Enable the selected interrupts */
		__HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6959      	ldr	r1, [r3, #20]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	430a      	orrs	r2, r1
 8001892:	615a      	str	r2, [r3, #20]

		/* Return function status */
		return HAL_OK;
 8001894:	2300      	movs	r3, #0
 8001896:	e006      	b.n	80018a6 <HAL_CAN_ActivateNotification+0x40>
	} else {
		/* Update error code */
		hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	625a      	str	r2, [r3, #36]	; 0x24

		return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
	}
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <HAL_CAN_IRQHandler>:
 * @brief  Handles CAN interrupt request
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan) {
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b08a      	sub	sp, #40	; 0x28
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
	uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	623b      	str	r3, [r7, #32]
	uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	61fb      	str	r3, [r7, #28]
	uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	61bb      	str	r3, [r7, #24]
	uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	617b      	str	r3, [r7, #20]
	uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	613b      	str	r3, [r7, #16]
	uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	60fb      	str	r3, [r7, #12]

	/* Transmit Mailbox empty interrupt management *****************************/
	if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U) {
 80018ee:	6a3b      	ldr	r3, [r7, #32]
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d07c      	beq.n	80019f2 <HAL_CAN_IRQHandler+0x140>
		/* Transmit Mailbox 0 management *****************************************/
		if ((tsrflags & CAN_TSR_RQCP0) != 0U) {
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d023      	beq.n	800194a <HAL_CAN_IRQHandler+0x98>
			/* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
			__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2201      	movs	r2, #1
 8001908:	609a      	str	r2, [r3, #8]

			if ((tsrflags & CAN_TSR_TXOK0) != 0U) {
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
				/* Call weak (surcharged) callback */
				HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f000 f983 	bl	8001c20 <HAL_CAN_TxMailbox0CompleteCallback>
 800191a:	e016      	b.n	800194a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
			} else {
				if ((tsrflags & CAN_TSR_ALST0) != 0U) {
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	f003 0304 	and.w	r3, r3, #4
 8001922:	2b00      	cmp	r3, #0
 8001924:	d004      	beq.n	8001930 <HAL_CAN_IRQHandler+0x7e>
					/* Update error code */
					errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001928:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
 800192e:	e00c      	b.n	800194a <HAL_CAN_IRQHandler+0x98>
				} else if ((tsrflags & CAN_TSR_TERR0) != 0U) {
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	f003 0308 	and.w	r3, r3, #8
 8001936:	2b00      	cmp	r3, #0
 8001938:	d004      	beq.n	8001944 <HAL_CAN_IRQHandler+0x92>
					/* Update error code */
					errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
 8001942:	e002      	b.n	800194a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
					/* Call weak (surcharged) callback */
					HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 f989 	bl	8001c5c <HAL_CAN_TxMailbox0AbortCallback>
				}
			}
		}

		/* Transmit Mailbox 1 management *****************************************/
		if ((tsrflags & CAN_TSR_RQCP1) != 0U) {
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001950:	2b00      	cmp	r3, #0
 8001952:	d024      	beq.n	800199e <HAL_CAN_IRQHandler+0xec>
			/* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
			__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f44f 7280 	mov.w	r2, #256	; 0x100
 800195c:	609a      	str	r2, [r3, #8]

			if ((tsrflags & CAN_TSR_TXOK1) != 0U) {
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
				/* Call weak (surcharged) callback */
				HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 f963 	bl	8001c34 <HAL_CAN_TxMailbox1CompleteCallback>
 800196e:	e016      	b.n	800199e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
			} else {
				if ((tsrflags & CAN_TSR_ALST1) != 0U) {
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001976:	2b00      	cmp	r3, #0
 8001978:	d004      	beq.n	8001984 <HAL_CAN_IRQHandler+0xd2>
					/* Update error code */
					errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
 8001982:	e00c      	b.n	800199e <HAL_CAN_IRQHandler+0xec>
				} else if ((tsrflags & CAN_TSR_TERR1) != 0U) {
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800198a:	2b00      	cmp	r3, #0
 800198c:	d004      	beq.n	8001998 <HAL_CAN_IRQHandler+0xe6>
					/* Update error code */
					errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
 8001996:	e002      	b.n	800199e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
					/* Call weak (surcharged) callback */
					HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f000 f969 	bl	8001c70 <HAL_CAN_TxMailbox1AbortCallback>
				}
			}
		}

		/* Transmit Mailbox 2 management *****************************************/
		if ((tsrflags & CAN_TSR_RQCP2) != 0U) {
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d024      	beq.n	80019f2 <HAL_CAN_IRQHandler+0x140>
			/* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
			__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019b0:	609a      	str	r2, [r3, #8]

			if ((tsrflags & CAN_TSR_TXOK2) != 0U) {
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
				/* Call weak (surcharged) callback */
				HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 f943 	bl	8001c48 <HAL_CAN_TxMailbox2CompleteCallback>
 80019c2:	e016      	b.n	80019f2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
			} else {
				if ((tsrflags & CAN_TSR_ALST2) != 0U) {
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d004      	beq.n	80019d8 <HAL_CAN_IRQHandler+0x126>
					/* Update error code */
					errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
 80019d6:	e00c      	b.n	80019f2 <HAL_CAN_IRQHandler+0x140>
				} else if ((tsrflags & CAN_TSR_TERR2) != 0U) {
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d004      	beq.n	80019ec <HAL_CAN_IRQHandler+0x13a>
					/* Update error code */
					errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
 80019ea:	e002      	b.n	80019f2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
					/* Call weak (surcharged) callback */
					HAL_CAN_TxMailbox2AbortCallback(hcan);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f000 f949 	bl	8001c84 <HAL_CAN_TxMailbox2AbortCallback>
			}
		}
	}

	/* Receive FIFO 0 overrun interrupt management *****************************/
	if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U) {
 80019f2:	6a3b      	ldr	r3, [r7, #32]
 80019f4:	f003 0308 	and.w	r3, r3, #8
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d00c      	beq.n	8001a16 <HAL_CAN_IRQHandler+0x164>
		if ((rf0rflags & CAN_RF0R_FOVR0) != 0U) {
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	f003 0310 	and.w	r3, r3, #16
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d007      	beq.n	8001a16 <HAL_CAN_IRQHandler+0x164>
			/* Set CAN error code to Rx Fifo 0 overrun error */
			errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Clear FIFO0 Overrun Flag */
			__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2210      	movs	r2, #16
 8001a14:	60da      	str	r2, [r3, #12]
		}
	}

	/* Receive FIFO 0 full interrupt management ********************************/
	if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U) {
 8001a16:	6a3b      	ldr	r3, [r7, #32]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d00b      	beq.n	8001a38 <HAL_CAN_IRQHandler+0x186>
		if ((rf0rflags & CAN_RF0R_FULL0) != 0U) {
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	f003 0308 	and.w	r3, r3, #8
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d006      	beq.n	8001a38 <HAL_CAN_IRQHandler+0x186>
			/* Clear FIFO 0 full Flag */
			__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2208      	movs	r2, #8
 8001a30:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
			/* Call weak (surcharged) callback */
			HAL_CAN_RxFifo0FullCallback(hcan);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 f930 	bl	8001c98 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
		}
	}

	/* Receive FIFO 0 message pending interrupt management *********************/
	if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U) {
 8001a38:	6a3b      	ldr	r3, [r7, #32]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d009      	beq.n	8001a56 <HAL_CAN_IRQHandler+0x1a4>
		/* Check if message is still pending */
		if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U) {
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d002      	beq.n	8001a56 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
			/* Call weak (surcharged) callback */
			HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f004 f867 	bl	8005b24 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
		}
	}

	/* Receive FIFO 1 overrun interrupt management *****************************/
	if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U) {
 8001a56:	6a3b      	ldr	r3, [r7, #32]
 8001a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00c      	beq.n	8001a7a <HAL_CAN_IRQHandler+0x1c8>
		if ((rf1rflags & CAN_RF1R_FOVR1) != 0U) {
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	f003 0310 	and.w	r3, r3, #16
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d007      	beq.n	8001a7a <HAL_CAN_IRQHandler+0x1c8>
			/* Set CAN error code to Rx Fifo 1 overrun error */
			errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24

			/* Clear FIFO1 Overrun Flag */
			__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2210      	movs	r2, #16
 8001a78:	611a      	str	r2, [r3, #16]
		}
	}

	/* Receive FIFO 1 full interrupt management ********************************/
	if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U) {
 8001a7a:	6a3b      	ldr	r3, [r7, #32]
 8001a7c:	f003 0320 	and.w	r3, r3, #32
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d00b      	beq.n	8001a9c <HAL_CAN_IRQHandler+0x1ea>
		if ((rf1rflags & CAN_RF1R_FULL1) != 0U) {
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	f003 0308 	and.w	r3, r3, #8
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d006      	beq.n	8001a9c <HAL_CAN_IRQHandler+0x1ea>
			/* Clear FIFO 1 full Flag */
			__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2208      	movs	r2, #8
 8001a94:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
			/* Call weak (surcharged) callback */
			HAL_CAN_RxFifo1FullCallback(hcan);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 f912 	bl	8001cc0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
		}
	}

	/* Receive FIFO 1 message pending interrupt management *********************/
	if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U) {
 8001a9c:	6a3b      	ldr	r3, [r7, #32]
 8001a9e:	f003 0310 	and.w	r3, r3, #16
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d009      	beq.n	8001aba <HAL_CAN_IRQHandler+0x208>
		/* Check if message is still pending */
		if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U) {
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d002      	beq.n	8001aba <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
			/* Call weak (surcharged) callback */
			HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 f8f9 	bl	8001cac <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
		}
	}

	/* Sleep interrupt management *********************************************/
	if ((interrupts & CAN_IT_SLEEP_ACK) != 0U) {
 8001aba:	6a3b      	ldr	r3, [r7, #32]
 8001abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d00b      	beq.n	8001adc <HAL_CAN_IRQHandler+0x22a>
		if ((msrflags & CAN_MSR_SLAKI) != 0U) {
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f003 0310 	and.w	r3, r3, #16
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d006      	beq.n	8001adc <HAL_CAN_IRQHandler+0x22a>
			/* Clear Sleep interrupt Flag */
			__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2210      	movs	r2, #16
 8001ad4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
			/* Call weak (surcharged) callback */
			HAL_CAN_SleepCallback(hcan);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 f8fc 	bl	8001cd4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
		}
	}

	/* WakeUp interrupt management *********************************************/
	if ((interrupts & CAN_IT_WAKEUP) != 0U) {
 8001adc:	6a3b      	ldr	r3, [r7, #32]
 8001ade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00b      	beq.n	8001afe <HAL_CAN_IRQHandler+0x24c>
		if ((msrflags & CAN_MSR_WKUI) != 0U) {
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	f003 0308 	and.w	r3, r3, #8
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d006      	beq.n	8001afe <HAL_CAN_IRQHandler+0x24c>
			/* Clear WakeUp Flag */
			__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2208      	movs	r2, #8
 8001af6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
			/* Call weak (surcharged) callback */
			HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 f8f5 	bl	8001ce8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
		}
	}

	/* Error interrupts management *********************************************/
	if ((interrupts & CAN_IT_ERROR) != 0U) {
 8001afe:	6a3b      	ldr	r3, [r7, #32]
 8001b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d07b      	beq.n	8001c00 <HAL_CAN_IRQHandler+0x34e>
		if ((msrflags & CAN_MSR_ERRI) != 0U) {
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	f003 0304 	and.w	r3, r3, #4
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d072      	beq.n	8001bf8 <HAL_CAN_IRQHandler+0x346>
			/* Check Error Warning Flag */
			if (((interrupts & CAN_IT_ERROR_WARNING) != 0U)
 8001b12:	6a3b      	ldr	r3, [r7, #32]
 8001b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d008      	beq.n	8001b2e <HAL_CAN_IRQHandler+0x27c>
					&& ((esrflags & CAN_ESR_EWGF) != 0U)) {
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_CAN_IRQHandler+0x27c>
				/* Set CAN error code to Error Warning */
				errorcode |= HAL_CAN_ERROR_EWG;
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24

				/* No need for clear of Error Warning Flag as read-only */
			}

			/* Check Error Passive Flag */
			if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U)
 8001b2e:	6a3b      	ldr	r3, [r7, #32]
 8001b30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d008      	beq.n	8001b4a <HAL_CAN_IRQHandler+0x298>
					&& ((esrflags & CAN_ESR_EPVF) != 0U)) {
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <HAL_CAN_IRQHandler+0x298>
				/* Set CAN error code to Error Passive */
				errorcode |= HAL_CAN_ERROR_EPV;
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	f043 0302 	orr.w	r3, r3, #2
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24

				/* No need for clear of Error Passive Flag as read-only */
			}

			/* Check Bus-off Flag */
			if (((interrupts & CAN_IT_BUSOFF) != 0U)
 8001b4a:	6a3b      	ldr	r3, [r7, #32]
 8001b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d008      	beq.n	8001b66 <HAL_CAN_IRQHandler+0x2b4>
					&& ((esrflags & CAN_ESR_BOFF) != 0U)) {
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f003 0304 	and.w	r3, r3, #4
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_CAN_IRQHandler+0x2b4>
				/* Set CAN error code to Bus-Off */
				errorcode |= HAL_CAN_ERROR_BOF;
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	f043 0304 	orr.w	r3, r3, #4
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24

				/* No need for clear of Error Bus-Off as read-only */
			}

			/* Check Last Error Code Flag */
			if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U)
 8001b66:	6a3b      	ldr	r3, [r7, #32]
 8001b68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d043      	beq.n	8001bf8 <HAL_CAN_IRQHandler+0x346>
					&& ((esrflags & CAN_ESR_LEC) != 0U)) {
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d03e      	beq.n	8001bf8 <HAL_CAN_IRQHandler+0x346>
				switch (esrflags & CAN_ESR_LEC) {
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b80:	2b60      	cmp	r3, #96	; 0x60
 8001b82:	d02b      	beq.n	8001bdc <HAL_CAN_IRQHandler+0x32a>
 8001b84:	2b60      	cmp	r3, #96	; 0x60
 8001b86:	d82e      	bhi.n	8001be6 <HAL_CAN_IRQHandler+0x334>
 8001b88:	2b50      	cmp	r3, #80	; 0x50
 8001b8a:	d022      	beq.n	8001bd2 <HAL_CAN_IRQHandler+0x320>
 8001b8c:	2b50      	cmp	r3, #80	; 0x50
 8001b8e:	d82a      	bhi.n	8001be6 <HAL_CAN_IRQHandler+0x334>
 8001b90:	2b40      	cmp	r3, #64	; 0x40
 8001b92:	d019      	beq.n	8001bc8 <HAL_CAN_IRQHandler+0x316>
 8001b94:	2b40      	cmp	r3, #64	; 0x40
 8001b96:	d826      	bhi.n	8001be6 <HAL_CAN_IRQHandler+0x334>
 8001b98:	2b30      	cmp	r3, #48	; 0x30
 8001b9a:	d010      	beq.n	8001bbe <HAL_CAN_IRQHandler+0x30c>
 8001b9c:	2b30      	cmp	r3, #48	; 0x30
 8001b9e:	d822      	bhi.n	8001be6 <HAL_CAN_IRQHandler+0x334>
 8001ba0:	2b10      	cmp	r3, #16
 8001ba2:	d002      	beq.n	8001baa <HAL_CAN_IRQHandler+0x2f8>
 8001ba4:	2b20      	cmp	r3, #32
 8001ba6:	d005      	beq.n	8001bb4 <HAL_CAN_IRQHandler+0x302>
				case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
					/* Set CAN error code to CRC error */
					errorcode |= HAL_CAN_ERROR_CRC;
					break;
				default:
					break;
 8001ba8:	e01d      	b.n	8001be6 <HAL_CAN_IRQHandler+0x334>
					errorcode |= HAL_CAN_ERROR_STF;
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	f043 0308 	orr.w	r3, r3, #8
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8001bb2:	e019      	b.n	8001be8 <HAL_CAN_IRQHandler+0x336>
					errorcode |= HAL_CAN_ERROR_FOR;
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb6:	f043 0310 	orr.w	r3, r3, #16
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8001bbc:	e014      	b.n	8001be8 <HAL_CAN_IRQHandler+0x336>
					errorcode |= HAL_CAN_ERROR_ACK;
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	f043 0320 	orr.w	r3, r3, #32
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8001bc6:	e00f      	b.n	8001be8 <HAL_CAN_IRQHandler+0x336>
					errorcode |= HAL_CAN_ERROR_BR;
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8001bd0:	e00a      	b.n	8001be8 <HAL_CAN_IRQHandler+0x336>
					errorcode |= HAL_CAN_ERROR_BD;
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8001bda:	e005      	b.n	8001be8 <HAL_CAN_IRQHandler+0x336>
					errorcode |= HAL_CAN_ERROR_CRC;
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8001be4:	e000      	b.n	8001be8 <HAL_CAN_IRQHandler+0x336>
					break;
 8001be6:	bf00      	nop
				}

				/* Clear Last error code Flag */
				CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	699a      	ldr	r2, [r3, #24]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001bf6:	619a      	str	r2, [r3, #24]
			}
		}

		/* Clear ERRI Flag */
		__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2204      	movs	r2, #4
 8001bfe:	605a      	str	r2, [r3, #4]
	}

	/* Call the Error call Back in case of Errors */
	if (errorcode != HAL_CAN_ERROR_NONE) {
 8001c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d008      	beq.n	8001c18 <HAL_CAN_IRQHandler+0x366>
		/* Update error code in handle */
		hcan->ErrorCode |= errorcode;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
		/* Call weak (surcharged) callback */
		HAL_CAN_ErrorCallback(hcan);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f872 	bl	8001cfc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
	}
}
 8001c18:	bf00      	nop
 8001c1a:	3728      	adds	r7, #40	; 0x28
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HAL_CAN_TxMailbox0CompleteCallback>:
 * @brief  Transmission Mailbox 0 complete callback.
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
	 user file
	 */
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <HAL_CAN_TxMailbox1CompleteCallback>:
 * @brief  Transmission Mailbox 1 complete callback.
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan) {
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
	 user file
	 */
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <HAL_CAN_TxMailbox2CompleteCallback>:
 * @brief  Transmission Mailbox 2 complete callback.
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) {
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
	 user file
	 */
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <HAL_CAN_TxMailbox0AbortCallback>:
 * @brief  Transmission Mailbox 0 Cancellation callback.
 * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan) {
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
	 user file
	 */
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <HAL_CAN_TxMailbox1AbortCallback>:
 * @brief  Transmission Mailbox 1 Cancellation callback.
 * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan) {
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
	 user file
	 */
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <HAL_CAN_TxMailbox2AbortCallback>:
 * @brief  Transmission Mailbox 2 Cancellation callback.
 * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan) {
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
	 user file
	 */
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <HAL_CAN_RxFifo0FullCallback>:
 * @brief  Rx FIFO 0 full callback.
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan) {
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_CAN_RxFifo0FullCallback could be implemented in the user
	 file
	 */
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <HAL_CAN_RxFifo1MsgPendingCallback>:
 * @brief  Rx FIFO 1 message pending callback.
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
	 user file
	 */
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_CAN_RxFifo1FullCallback>:
 * @brief  Rx FIFO 1 full callback.
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan) {
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_CAN_RxFifo1FullCallback could be implemented in the user
	 file
	 */
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <HAL_CAN_SleepCallback>:
 * @brief  Sleep callback.
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan) {
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
	UNUSED(hcan);

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_CAN_SleepCallback could be implemented in the user file
	 */
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_CAN_WakeUpFromRxMsgCallback>:
 * @brief  WakeUp from Rx message callback.
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan) {
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
	 user file
	 */
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <HAL_CAN_ErrorCallback>:
 * @brief  Error CAN callback.
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
	UNUSED(hcan);

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_CAN_ErrorCallback could be implemented in the user file
	 */
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d20:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <__NVIC_SetPriorityGrouping+0x44>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d26:	68ba      	ldr	r2, [r7, #8]
 8001d28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d42:	4a04      	ldr	r2, [pc, #16]	; (8001d54 <__NVIC_SetPriorityGrouping+0x44>)
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	60d3      	str	r3, [r2, #12]
}
 8001d48:	bf00      	nop
 8001d4a:	3714      	adds	r7, #20
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d5c:	4b04      	ldr	r3, [pc, #16]	; (8001d70 <__NVIC_GetPriorityGrouping+0x18>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	0a1b      	lsrs	r3, r3, #8
 8001d62:	f003 0307 	and.w	r3, r3, #7
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	db0b      	blt.n	8001d9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d86:	79fb      	ldrb	r3, [r7, #7]
 8001d88:	f003 021f 	and.w	r2, r3, #31
 8001d8c:	4907      	ldr	r1, [pc, #28]	; (8001dac <__NVIC_EnableIRQ+0x38>)
 8001d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d92:	095b      	lsrs	r3, r3, #5
 8001d94:	2001      	movs	r0, #1
 8001d96:	fa00 f202 	lsl.w	r2, r0, r2
 8001d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	e000e100 	.word	0xe000e100

08001db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	6039      	str	r1, [r7, #0]
 8001dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	db0a      	blt.n	8001dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	490c      	ldr	r1, [pc, #48]	; (8001dfc <__NVIC_SetPriority+0x4c>)
 8001dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dce:	0112      	lsls	r2, r2, #4
 8001dd0:	b2d2      	uxtb	r2, r2
 8001dd2:	440b      	add	r3, r1
 8001dd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dd8:	e00a      	b.n	8001df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	4908      	ldr	r1, [pc, #32]	; (8001e00 <__NVIC_SetPriority+0x50>)
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	3b04      	subs	r3, #4
 8001de8:	0112      	lsls	r2, r2, #4
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	440b      	add	r3, r1
 8001dee:	761a      	strb	r2, [r3, #24]
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	e000e100 	.word	0xe000e100
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b089      	sub	sp, #36	; 0x24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f1c3 0307 	rsb	r3, r3, #7
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	bf28      	it	cs
 8001e22:	2304      	movcs	r3, #4
 8001e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	3304      	adds	r3, #4
 8001e2a:	2b06      	cmp	r3, #6
 8001e2c:	d902      	bls.n	8001e34 <NVIC_EncodePriority+0x30>
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	3b03      	subs	r3, #3
 8001e32:	e000      	b.n	8001e36 <NVIC_EncodePriority+0x32>
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e38:	f04f 32ff 	mov.w	r2, #4294967295
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43da      	mvns	r2, r3
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	401a      	ands	r2, r3
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	fa01 f303 	lsl.w	r3, r1, r3
 8001e56:	43d9      	mvns	r1, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e5c:	4313      	orrs	r3, r2
         );
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3724      	adds	r7, #36	; 0x24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
	...

08001e6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e7c:	d301      	bcc.n	8001e82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e00f      	b.n	8001ea2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e82:	4a0a      	ldr	r2, [pc, #40]	; (8001eac <SysTick_Config+0x40>)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e8a:	210f      	movs	r1, #15
 8001e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e90:	f7ff ff8e 	bl	8001db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e94:	4b05      	ldr	r3, [pc, #20]	; (8001eac <SysTick_Config+0x40>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e9a:	4b04      	ldr	r3, [pc, #16]	; (8001eac <SysTick_Config+0x40>)
 8001e9c:	2207      	movs	r2, #7
 8001e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	e000e010 	.word	0xe000e010

08001eb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7ff ff29 	bl	8001d10 <__NVIC_SetPriorityGrouping>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b086      	sub	sp, #24
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	4603      	mov	r3, r0
 8001ece:	60b9      	str	r1, [r7, #8]
 8001ed0:	607a      	str	r2, [r7, #4]
 8001ed2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed8:	f7ff ff3e 	bl	8001d58 <__NVIC_GetPriorityGrouping>
 8001edc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	68b9      	ldr	r1, [r7, #8]
 8001ee2:	6978      	ldr	r0, [r7, #20]
 8001ee4:	f7ff ff8e 	bl	8001e04 <NVIC_EncodePriority>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eee:	4611      	mov	r1, r2
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ff5d 	bl	8001db0 <__NVIC_SetPriority>
}
 8001ef6:	bf00      	nop
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	4603      	mov	r3, r0
 8001f06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff ff31 	bl	8001d74 <__NVIC_EnableIRQ>
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff ffa2 	bl	8001e6c <SysTick_Config>
 8001f28:	4603      	mov	r3, r0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b089      	sub	sp, #36	; 0x24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61fb      	str	r3, [r7, #28]
 8001f4e:	e165      	b.n	800221c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f50:	2201      	movs	r2, #1
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	4013      	ands	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	f040 8154 	bne.w	8002216 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d005      	beq.n	8001f86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d130      	bne.n	8001fe8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	2203      	movs	r2, #3
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	43db      	mvns	r3, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	68da      	ldr	r2, [r3, #12]
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	091b      	lsrs	r3, r3, #4
 8001fd2:	f003 0201 	and.w	r2, r3, #1
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 0303 	and.w	r3, r3, #3
 8001ff0:	2b03      	cmp	r3, #3
 8001ff2:	d017      	beq.n	8002024 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	2203      	movs	r2, #3
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4013      	ands	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4313      	orrs	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 0303 	and.w	r3, r3, #3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d123      	bne.n	8002078 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	08da      	lsrs	r2, r3, #3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3208      	adds	r2, #8
 8002038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800203c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	220f      	movs	r2, #15
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4013      	ands	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	691a      	ldr	r2, [r3, #16]
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4313      	orrs	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	08da      	lsrs	r2, r3, #3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3208      	adds	r2, #8
 8002072:	69b9      	ldr	r1, [r7, #24]
 8002074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	2203      	movs	r2, #3
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 0203 	and.w	r2, r3, #3
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 80ae 	beq.w	8002216 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	4b5d      	ldr	r3, [pc, #372]	; (8002234 <HAL_GPIO_Init+0x300>)
 80020c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c2:	4a5c      	ldr	r2, [pc, #368]	; (8002234 <HAL_GPIO_Init+0x300>)
 80020c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020c8:	6453      	str	r3, [r2, #68]	; 0x44
 80020ca:	4b5a      	ldr	r3, [pc, #360]	; (8002234 <HAL_GPIO_Init+0x300>)
 80020cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020d6:	4a58      	ldr	r2, [pc, #352]	; (8002238 <HAL_GPIO_Init+0x304>)
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	089b      	lsrs	r3, r3, #2
 80020dc:	3302      	adds	r3, #2
 80020de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	220f      	movs	r2, #15
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4013      	ands	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a4f      	ldr	r2, [pc, #316]	; (800223c <HAL_GPIO_Init+0x308>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d025      	beq.n	800214e <HAL_GPIO_Init+0x21a>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a4e      	ldr	r2, [pc, #312]	; (8002240 <HAL_GPIO_Init+0x30c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d01f      	beq.n	800214a <HAL_GPIO_Init+0x216>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a4d      	ldr	r2, [pc, #308]	; (8002244 <HAL_GPIO_Init+0x310>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d019      	beq.n	8002146 <HAL_GPIO_Init+0x212>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a4c      	ldr	r2, [pc, #304]	; (8002248 <HAL_GPIO_Init+0x314>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d013      	beq.n	8002142 <HAL_GPIO_Init+0x20e>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a4b      	ldr	r2, [pc, #300]	; (800224c <HAL_GPIO_Init+0x318>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d00d      	beq.n	800213e <HAL_GPIO_Init+0x20a>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a4a      	ldr	r2, [pc, #296]	; (8002250 <HAL_GPIO_Init+0x31c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d007      	beq.n	800213a <HAL_GPIO_Init+0x206>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a49      	ldr	r2, [pc, #292]	; (8002254 <HAL_GPIO_Init+0x320>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d101      	bne.n	8002136 <HAL_GPIO_Init+0x202>
 8002132:	2306      	movs	r3, #6
 8002134:	e00c      	b.n	8002150 <HAL_GPIO_Init+0x21c>
 8002136:	2307      	movs	r3, #7
 8002138:	e00a      	b.n	8002150 <HAL_GPIO_Init+0x21c>
 800213a:	2305      	movs	r3, #5
 800213c:	e008      	b.n	8002150 <HAL_GPIO_Init+0x21c>
 800213e:	2304      	movs	r3, #4
 8002140:	e006      	b.n	8002150 <HAL_GPIO_Init+0x21c>
 8002142:	2303      	movs	r3, #3
 8002144:	e004      	b.n	8002150 <HAL_GPIO_Init+0x21c>
 8002146:	2302      	movs	r3, #2
 8002148:	e002      	b.n	8002150 <HAL_GPIO_Init+0x21c>
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <HAL_GPIO_Init+0x21c>
 800214e:	2300      	movs	r3, #0
 8002150:	69fa      	ldr	r2, [r7, #28]
 8002152:	f002 0203 	and.w	r2, r2, #3
 8002156:	0092      	lsls	r2, r2, #2
 8002158:	4093      	lsls	r3, r2
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002160:	4935      	ldr	r1, [pc, #212]	; (8002238 <HAL_GPIO_Init+0x304>)
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	089b      	lsrs	r3, r3, #2
 8002166:	3302      	adds	r3, #2
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800216e:	4b3a      	ldr	r3, [pc, #232]	; (8002258 <HAL_GPIO_Init+0x324>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	43db      	mvns	r3, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4013      	ands	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002192:	4a31      	ldr	r2, [pc, #196]	; (8002258 <HAL_GPIO_Init+0x324>)
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002198:	4b2f      	ldr	r3, [pc, #188]	; (8002258 <HAL_GPIO_Init+0x324>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021bc:	4a26      	ldr	r2, [pc, #152]	; (8002258 <HAL_GPIO_Init+0x324>)
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021c2:	4b25      	ldr	r3, [pc, #148]	; (8002258 <HAL_GPIO_Init+0x324>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	43db      	mvns	r3, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4013      	ands	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021e6:	4a1c      	ldr	r2, [pc, #112]	; (8002258 <HAL_GPIO_Init+0x324>)
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021ec:	4b1a      	ldr	r3, [pc, #104]	; (8002258 <HAL_GPIO_Init+0x324>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	43db      	mvns	r3, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4013      	ands	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002210:	4a11      	ldr	r2, [pc, #68]	; (8002258 <HAL_GPIO_Init+0x324>)
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	3301      	adds	r3, #1
 800221a:	61fb      	str	r3, [r7, #28]
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	2b0f      	cmp	r3, #15
 8002220:	f67f ae96 	bls.w	8001f50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002224:	bf00      	nop
 8002226:	bf00      	nop
 8002228:	3724      	adds	r7, #36	; 0x24
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40023800 	.word	0x40023800
 8002238:	40013800 	.word	0x40013800
 800223c:	40020000 	.word	0x40020000
 8002240:	40020400 	.word	0x40020400
 8002244:	40020800 	.word	0x40020800
 8002248:	40020c00 	.word	0x40020c00
 800224c:	40021000 	.word	0x40021000
 8002250:	40021400 	.word	0x40021400
 8002254:	40021800 	.word	0x40021800
 8002258:	40013c00 	.word	0x40013c00

0800225c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	807b      	strh	r3, [r7, #2]
 8002268:	4613      	mov	r3, r2
 800226a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800226c:	787b      	ldrb	r3, [r7, #1]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002272:	887a      	ldrh	r2, [r7, #2]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002278:	e003      	b.n	8002282 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800227a:	887b      	ldrh	r3, [r7, #2]
 800227c:	041a      	lsls	r2, r3, #16
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	619a      	str	r2, [r3, #24]
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
	...

08002290 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e0cc      	b.n	800243e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022a4:	4b68      	ldr	r3, [pc, #416]	; (8002448 <HAL_RCC_ClockConfig+0x1b8>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 030f 	and.w	r3, r3, #15
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d90c      	bls.n	80022cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b2:	4b65      	ldr	r3, [pc, #404]	; (8002448 <HAL_RCC_ClockConfig+0x1b8>)
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	b2d2      	uxtb	r2, r2
 80022b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ba:	4b63      	ldr	r3, [pc, #396]	; (8002448 <HAL_RCC_ClockConfig+0x1b8>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 030f 	and.w	r3, r3, #15
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d001      	beq.n	80022cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e0b8      	b.n	800243e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d020      	beq.n	800231a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d005      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022e4:	4b59      	ldr	r3, [pc, #356]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	4a58      	ldr	r2, [pc, #352]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 80022ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0308 	and.w	r3, r3, #8
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d005      	beq.n	8002308 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022fc:	4b53      	ldr	r3, [pc, #332]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	4a52      	ldr	r2, [pc, #328]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 8002302:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002306:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002308:	4b50      	ldr	r3, [pc, #320]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	494d      	ldr	r1, [pc, #308]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 8002316:	4313      	orrs	r3, r2
 8002318:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b00      	cmp	r3, #0
 8002324:	d044      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d107      	bne.n	800233e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232e:	4b47      	ldr	r3, [pc, #284]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d119      	bne.n	800236e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e07f      	b.n	800243e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b02      	cmp	r3, #2
 8002344:	d003      	beq.n	800234e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800234a:	2b03      	cmp	r3, #3
 800234c:	d107      	bne.n	800235e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800234e:	4b3f      	ldr	r3, [pc, #252]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d109      	bne.n	800236e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e06f      	b.n	800243e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235e:	4b3b      	ldr	r3, [pc, #236]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e067      	b.n	800243e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800236e:	4b37      	ldr	r3, [pc, #220]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f023 0203 	bic.w	r2, r3, #3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	4934      	ldr	r1, [pc, #208]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 800237c:	4313      	orrs	r3, r2
 800237e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002380:	f7fe fe34 	bl	8000fec <HAL_GetTick>
 8002384:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002386:	e00a      	b.n	800239e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002388:	f7fe fe30 	bl	8000fec <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	f241 3288 	movw	r2, #5000	; 0x1388
 8002396:	4293      	cmp	r3, r2
 8002398:	d901      	bls.n	800239e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e04f      	b.n	800243e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239e:	4b2b      	ldr	r3, [pc, #172]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 020c 	and.w	r2, r3, #12
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d1eb      	bne.n	8002388 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023b0:	4b25      	ldr	r3, [pc, #148]	; (8002448 <HAL_RCC_ClockConfig+0x1b8>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 030f 	and.w	r3, r3, #15
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d20c      	bcs.n	80023d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023be:	4b22      	ldr	r3, [pc, #136]	; (8002448 <HAL_RCC_ClockConfig+0x1b8>)
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c6:	4b20      	ldr	r3, [pc, #128]	; (8002448 <HAL_RCC_ClockConfig+0x1b8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d001      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e032      	b.n	800243e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d008      	beq.n	80023f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023e4:	4b19      	ldr	r3, [pc, #100]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	4916      	ldr	r1, [pc, #88]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d009      	beq.n	8002416 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002402:	4b12      	ldr	r3, [pc, #72]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	490e      	ldr	r1, [pc, #56]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 8002412:	4313      	orrs	r3, r2
 8002414:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002416:	f000 f855 	bl	80024c4 <HAL_RCC_GetSysClockFreq>
 800241a:	4602      	mov	r2, r0
 800241c:	4b0b      	ldr	r3, [pc, #44]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	091b      	lsrs	r3, r3, #4
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	490a      	ldr	r1, [pc, #40]	; (8002450 <HAL_RCC_ClockConfig+0x1c0>)
 8002428:	5ccb      	ldrb	r3, [r1, r3]
 800242a:	fa22 f303 	lsr.w	r3, r2, r3
 800242e:	4a09      	ldr	r2, [pc, #36]	; (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 8002430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002432:	4b09      	ldr	r3, [pc, #36]	; (8002458 <HAL_RCC_ClockConfig+0x1c8>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f7fe fd94 	bl	8000f64 <HAL_InitTick>

  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40023c00 	.word	0x40023c00
 800244c:	40023800 	.word	0x40023800
 8002450:	080091f4 	.word	0x080091f4
 8002454:	20000008 	.word	0x20000008
 8002458:	20000000 	.word	0x20000000

0800245c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002460:	4b03      	ldr	r3, [pc, #12]	; (8002470 <HAL_RCC_GetHCLKFreq+0x14>)
 8002462:	681b      	ldr	r3, [r3, #0]
}
 8002464:	4618      	mov	r0, r3
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	20000008 	.word	0x20000008

08002474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002478:	f7ff fff0 	bl	800245c <HAL_RCC_GetHCLKFreq>
 800247c:	4602      	mov	r2, r0
 800247e:	4b05      	ldr	r3, [pc, #20]	; (8002494 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	0a9b      	lsrs	r3, r3, #10
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	4903      	ldr	r1, [pc, #12]	; (8002498 <HAL_RCC_GetPCLK1Freq+0x24>)
 800248a:	5ccb      	ldrb	r3, [r1, r3]
 800248c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002490:	4618      	mov	r0, r3
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40023800 	.word	0x40023800
 8002498:	08009204 	.word	0x08009204

0800249c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024a0:	f7ff ffdc 	bl	800245c <HAL_RCC_GetHCLKFreq>
 80024a4:	4602      	mov	r2, r0
 80024a6:	4b05      	ldr	r3, [pc, #20]	; (80024bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	0b5b      	lsrs	r3, r3, #13
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	4903      	ldr	r1, [pc, #12]	; (80024c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024b2:	5ccb      	ldrb	r3, [r1, r3]
 80024b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40023800 	.word	0x40023800
 80024c0:	08009204 	.word	0x08009204

080024c4 <HAL_RCC_GetSysClockFreq>:
 *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
 *
 *
 * @retval SYSCLK frequency
 */
uint32_t HAL_RCC_GetSysClockFreq(void) {
 80024c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024c8:	b088      	sub	sp, #32
 80024ca:	af00      	add	r7, sp, #0
	uint32_t pllm = 0U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]
	uint32_t pllvco = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	61fb      	str	r3, [r7, #28]
	uint32_t pllp = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	613b      	str	r3, [r7, #16]
	uint32_t pllr = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	60fb      	str	r3, [r7, #12]
	uint32_t sysclockfreq = 0U;
 80024dc:	2300      	movs	r3, #0
 80024de:	61bb      	str	r3, [r7, #24]

	/* Get SYSCLK source -------------------------------------------------------*/
	switch (RCC->CFGR & RCC_CFGR_SWS) {
 80024e0:	4bce      	ldr	r3, [pc, #824]	; (800281c <HAL_RCC_GetSysClockFreq+0x358>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 030c 	and.w	r3, r3, #12
 80024e8:	2b0c      	cmp	r3, #12
 80024ea:	f200 818d 	bhi.w	8002808 <HAL_RCC_GetSysClockFreq+0x344>
 80024ee:	a201      	add	r2, pc, #4	; (adr r2, 80024f4 <HAL_RCC_GetSysClockFreq+0x30>)
 80024f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f4:	08002529 	.word	0x08002529
 80024f8:	08002809 	.word	0x08002809
 80024fc:	08002809 	.word	0x08002809
 8002500:	08002809 	.word	0x08002809
 8002504:	0800252f 	.word	0x0800252f
 8002508:	08002809 	.word	0x08002809
 800250c:	08002809 	.word	0x08002809
 8002510:	08002809 	.word	0x08002809
 8002514:	08002535 	.word	0x08002535
 8002518:	08002809 	.word	0x08002809
 800251c:	08002809 	.word	0x08002809
 8002520:	08002809 	.word	0x08002809
 8002524:	080026a9 	.word	0x080026a9
	case RCC_CFGR_SWS_HSI: /* HSI used as system clock source */
	{
		sysclockfreq = HSI_VALUE;
 8002528:	4bbd      	ldr	r3, [pc, #756]	; (8002820 <HAL_RCC_GetSysClockFreq+0x35c>)
 800252a:	61bb      	str	r3, [r7, #24]
		break;
 800252c:	e16f      	b.n	800280e <HAL_RCC_GetSysClockFreq+0x34a>
	}
	case RCC_CFGR_SWS_HSE: /* HSE used as system clock  source */
	{
		sysclockfreq = HSE_VALUE;
 800252e:	4bbd      	ldr	r3, [pc, #756]	; (8002824 <HAL_RCC_GetSysClockFreq+0x360>)
 8002530:	61bb      	str	r3, [r7, #24]
		break;
 8002532:	e16c      	b.n	800280e <HAL_RCC_GetSysClockFreq+0x34a>
	}
	case RCC_CFGR_SWS_PLL: /* PLL/PLLP used as system clock  source */
	{
		/* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
		 SYSCLK = PLL_VCO / PLLP */
		pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002534:	4bb9      	ldr	r3, [pc, #740]	; (800281c <HAL_RCC_GetSysClockFreq+0x358>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800253c:	617b      	str	r3, [r7, #20]
		if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI) {
 800253e:	4bb7      	ldr	r3, [pc, #732]	; (800281c <HAL_RCC_GetSysClockFreq+0x358>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d053      	beq.n	80025f2 <HAL_RCC_GetSysClockFreq+0x12e>
			/* HSE used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 800254a:	4bb4      	ldr	r3, [pc, #720]	; (800281c <HAL_RCC_GetSysClockFreq+0x358>)
 800254c:	685b      	ldr	r3, [r3, #4]
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 800254e:	099b      	lsrs	r3, r3, #6
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8002550:	461a      	mov	r2, r3
 8002552:	f04f 0300 	mov.w	r3, #0
 8002556:	f240 10ff 	movw	r0, #511	; 0x1ff
 800255a:	f04f 0100 	mov.w	r1, #0
 800255e:	ea02 0400 	and.w	r4, r2, r0
 8002562:	603c      	str	r4, [r7, #0]
 8002564:	400b      	ands	r3, r1
 8002566:	607b      	str	r3, [r7, #4]
 8002568:	e9d7 4500 	ldrd	r4, r5, [r7]
 800256c:	4620      	mov	r0, r4
 800256e:	4629      	mov	r1, r5
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	f04f 0300 	mov.w	r3, #0
 8002578:	014b      	lsls	r3, r1, #5
 800257a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800257e:	0142      	lsls	r2, r0, #5
 8002580:	4610      	mov	r0, r2
 8002582:	4619      	mov	r1, r3
 8002584:	4623      	mov	r3, r4
 8002586:	1ac0      	subs	r0, r0, r3
 8002588:	462b      	mov	r3, r5
 800258a:	eb61 0103 	sbc.w	r1, r1, r3
 800258e:	f04f 0200 	mov.w	r2, #0
 8002592:	f04f 0300 	mov.w	r3, #0
 8002596:	018b      	lsls	r3, r1, #6
 8002598:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800259c:	0182      	lsls	r2, r0, #6
 800259e:	1a12      	subs	r2, r2, r0
 80025a0:	eb63 0301 	sbc.w	r3, r3, r1
 80025a4:	f04f 0000 	mov.w	r0, #0
 80025a8:	f04f 0100 	mov.w	r1, #0
 80025ac:	00d9      	lsls	r1, r3, #3
 80025ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025b2:	00d0      	lsls	r0, r2, #3
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4621      	mov	r1, r4
 80025ba:	1852      	adds	r2, r2, r1
 80025bc:	4629      	mov	r1, r5
 80025be:	eb43 0101 	adc.w	r1, r3, r1
 80025c2:	460b      	mov	r3, r1
 80025c4:	f04f 0000 	mov.w	r0, #0
 80025c8:	f04f 0100 	mov.w	r1, #0
 80025cc:	0259      	lsls	r1, r3, #9
 80025ce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80025d2:	0250      	lsls	r0, r2, #9
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	4610      	mov	r0, r2
 80025da:	4619      	mov	r1, r3
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	461a      	mov	r2, r3
 80025e0:	f04f 0300 	mov.w	r3, #0
 80025e4:	f7fe fb20 	bl	8000c28 <__aeabi_uldivmod>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
 80025ec:	4613      	mov	r3, r2
 80025ee:	61fb      	str	r3, [r7, #28]
 80025f0:	e04c      	b.n	800268c <HAL_RCC_GetSysClockFreq+0x1c8>
		} else {
			/* HSI used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 80025f2:	4b8a      	ldr	r3, [pc, #552]	; (800281c <HAL_RCC_GetSysClockFreq+0x358>)
 80025f4:	685b      	ldr	r3, [r3, #4]
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 80025f6:	099b      	lsrs	r3, r3, #6
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 80025f8:	461a      	mov	r2, r3
 80025fa:	f04f 0300 	mov.w	r3, #0
 80025fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002602:	f04f 0100 	mov.w	r1, #0
 8002606:	ea02 0a00 	and.w	sl, r2, r0
 800260a:	ea03 0b01 	and.w	fp, r3, r1
 800260e:	4650      	mov	r0, sl
 8002610:	4659      	mov	r1, fp
 8002612:	f04f 0200 	mov.w	r2, #0
 8002616:	f04f 0300 	mov.w	r3, #0
 800261a:	014b      	lsls	r3, r1, #5
 800261c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002620:	0142      	lsls	r2, r0, #5
 8002622:	4610      	mov	r0, r2
 8002624:	4619      	mov	r1, r3
 8002626:	ebb0 000a 	subs.w	r0, r0, sl
 800262a:	eb61 010b 	sbc.w	r1, r1, fp
 800262e:	f04f 0200 	mov.w	r2, #0
 8002632:	f04f 0300 	mov.w	r3, #0
 8002636:	018b      	lsls	r3, r1, #6
 8002638:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800263c:	0182      	lsls	r2, r0, #6
 800263e:	1a12      	subs	r2, r2, r0
 8002640:	eb63 0301 	sbc.w	r3, r3, r1
 8002644:	f04f 0000 	mov.w	r0, #0
 8002648:	f04f 0100 	mov.w	r1, #0
 800264c:	00d9      	lsls	r1, r3, #3
 800264e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002652:	00d0      	lsls	r0, r2, #3
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	eb12 020a 	adds.w	r2, r2, sl
 800265c:	eb43 030b 	adc.w	r3, r3, fp
 8002660:	f04f 0000 	mov.w	r0, #0
 8002664:	f04f 0100 	mov.w	r1, #0
 8002668:	0299      	lsls	r1, r3, #10
 800266a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800266e:	0290      	lsls	r0, r2, #10
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4610      	mov	r0, r2
 8002676:	4619      	mov	r1, r3
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	461a      	mov	r2, r3
 800267c:	f04f 0300 	mov.w	r3, #0
 8002680:	f7fe fad2 	bl	8000c28 <__aeabi_uldivmod>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
 8002688:	4613      	mov	r3, r2
 800268a:	61fb      	str	r3, [r7, #28]
		}
		pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos)
 800268c:	4b63      	ldr	r3, [pc, #396]	; (800281c <HAL_RCC_GetSysClockFreq+0x358>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	0c1b      	lsrs	r3, r3, #16
 8002692:	f003 0303 	and.w	r3, r3, #3
				+ 1U) * 2U);
 8002696:	3301      	adds	r3, #1
		pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos)
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	613b      	str	r3, [r7, #16]

		sysclockfreq = pllvco / pllp;
 800269c:	69fa      	ldr	r2, [r7, #28]
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a4:	61bb      	str	r3, [r7, #24]
		break;
 80026a6:	e0b2      	b.n	800280e <HAL_RCC_GetSysClockFreq+0x34a>
	}
	case RCC_CFGR_SWS_PLLR: /* PLL/PLLR used as system clock  source */
	{
		/* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
		 SYSCLK = PLL_VCO / PLLR */
		pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026a8:	4b5c      	ldr	r3, [pc, #368]	; (800281c <HAL_RCC_GetSysClockFreq+0x358>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026b0:	617b      	str	r3, [r7, #20]
		if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI) {
 80026b2:	4b5a      	ldr	r3, [pc, #360]	; (800281c <HAL_RCC_GetSysClockFreq+0x358>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d04d      	beq.n	800275a <HAL_RCC_GetSysClockFreq+0x296>
			/* HSE used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 80026be:	4b57      	ldr	r3, [pc, #348]	; (800281c <HAL_RCC_GetSysClockFreq+0x358>)
 80026c0:	685b      	ldr	r3, [r3, #4]
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 80026c2:	099b      	lsrs	r3, r3, #6
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 80026c4:	461a      	mov	r2, r3
 80026c6:	f04f 0300 	mov.w	r3, #0
 80026ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80026ce:	f04f 0100 	mov.w	r1, #0
 80026d2:	ea02 0800 	and.w	r8, r2, r0
 80026d6:	ea03 0901 	and.w	r9, r3, r1
 80026da:	4640      	mov	r0, r8
 80026dc:	4649      	mov	r1, r9
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	014b      	lsls	r3, r1, #5
 80026e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80026ec:	0142      	lsls	r2, r0, #5
 80026ee:	4610      	mov	r0, r2
 80026f0:	4619      	mov	r1, r3
 80026f2:	ebb0 0008 	subs.w	r0, r0, r8
 80026f6:	eb61 0109 	sbc.w	r1, r1, r9
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	f04f 0300 	mov.w	r3, #0
 8002702:	018b      	lsls	r3, r1, #6
 8002704:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002708:	0182      	lsls	r2, r0, #6
 800270a:	1a12      	subs	r2, r2, r0
 800270c:	eb63 0301 	sbc.w	r3, r3, r1
 8002710:	f04f 0000 	mov.w	r0, #0
 8002714:	f04f 0100 	mov.w	r1, #0
 8002718:	00d9      	lsls	r1, r3, #3
 800271a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800271e:	00d0      	lsls	r0, r2, #3
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	eb12 0208 	adds.w	r2, r2, r8
 8002728:	eb43 0309 	adc.w	r3, r3, r9
 800272c:	f04f 0000 	mov.w	r0, #0
 8002730:	f04f 0100 	mov.w	r1, #0
 8002734:	0259      	lsls	r1, r3, #9
 8002736:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800273a:	0250      	lsls	r0, r2, #9
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	4610      	mov	r0, r2
 8002742:	4619      	mov	r1, r3
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	461a      	mov	r2, r3
 8002748:	f04f 0300 	mov.w	r3, #0
 800274c:	f7fe fa6c 	bl	8000c28 <__aeabi_uldivmod>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
 8002754:	4613      	mov	r3, r2
 8002756:	61fb      	str	r3, [r7, #28]
 8002758:	e04a      	b.n	80027f0 <HAL_RCC_GetSysClockFreq+0x32c>
		} else {
			/* HSI used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 800275a:	4b30      	ldr	r3, [pc, #192]	; (800281c <HAL_RCC_GetSysClockFreq+0x358>)
 800275c:	685b      	ldr	r3, [r3, #4]
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 800275e:	099b      	lsrs	r3, r3, #6
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8002760:	461a      	mov	r2, r3
 8002762:	f04f 0300 	mov.w	r3, #0
 8002766:	f240 10ff 	movw	r0, #511	; 0x1ff
 800276a:	f04f 0100 	mov.w	r1, #0
 800276e:	ea02 0400 	and.w	r4, r2, r0
 8002772:	ea03 0501 	and.w	r5, r3, r1
 8002776:	4620      	mov	r0, r4
 8002778:	4629      	mov	r1, r5
 800277a:	f04f 0200 	mov.w	r2, #0
 800277e:	f04f 0300 	mov.w	r3, #0
 8002782:	014b      	lsls	r3, r1, #5
 8002784:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002788:	0142      	lsls	r2, r0, #5
 800278a:	4610      	mov	r0, r2
 800278c:	4619      	mov	r1, r3
 800278e:	1b00      	subs	r0, r0, r4
 8002790:	eb61 0105 	sbc.w	r1, r1, r5
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	018b      	lsls	r3, r1, #6
 800279e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80027a2:	0182      	lsls	r2, r0, #6
 80027a4:	1a12      	subs	r2, r2, r0
 80027a6:	eb63 0301 	sbc.w	r3, r3, r1
 80027aa:	f04f 0000 	mov.w	r0, #0
 80027ae:	f04f 0100 	mov.w	r1, #0
 80027b2:	00d9      	lsls	r1, r3, #3
 80027b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027b8:	00d0      	lsls	r0, r2, #3
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	1912      	adds	r2, r2, r4
 80027c0:	eb45 0303 	adc.w	r3, r5, r3
 80027c4:	f04f 0000 	mov.w	r0, #0
 80027c8:	f04f 0100 	mov.w	r1, #0
 80027cc:	0299      	lsls	r1, r3, #10
 80027ce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80027d2:	0290      	lsls	r0, r2, #10
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	4610      	mov	r0, r2
 80027da:	4619      	mov	r1, r3
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	461a      	mov	r2, r3
 80027e0:	f04f 0300 	mov.w	r3, #0
 80027e4:	f7fe fa20 	bl	8000c28 <__aeabi_uldivmod>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
 80027ec:	4613      	mov	r3, r2
 80027ee:	61fb      	str	r3, [r7, #28]
		}
		pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80027f0:	4b0a      	ldr	r3, [pc, #40]	; (800281c <HAL_RCC_GetSysClockFreq+0x358>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	0f1b      	lsrs	r3, r3, #28
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	60fb      	str	r3, [r7, #12]

		sysclockfreq = pllvco / pllr;
 80027fc:	69fa      	ldr	r2, [r7, #28]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	fbb2 f3f3 	udiv	r3, r2, r3
 8002804:	61bb      	str	r3, [r7, #24]
		break;
 8002806:	e002      	b.n	800280e <HAL_RCC_GetSysClockFreq+0x34a>
	}
	default: {
		sysclockfreq = HSI_VALUE;
 8002808:	4b05      	ldr	r3, [pc, #20]	; (8002820 <HAL_RCC_GetSysClockFreq+0x35c>)
 800280a:	61bb      	str	r3, [r7, #24]
		break;
 800280c:	bf00      	nop
	}
	}
	return sysclockfreq;
 800280e:	69bb      	ldr	r3, [r7, #24]
}
 8002810:	4618      	mov	r0, r3
 8002812:	3720      	adds	r7, #32
 8002814:	46bd      	mov	sp, r7
 8002816:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800281a:	bf00      	nop
 800281c:	40023800 	.word	0x40023800
 8002820:	00f42400 	.word	0x00f42400
 8002824:	007a1200 	.word	0x007a1200

08002828 <HAL_RCC_OscConfig>:
 *         first and then HSE On or HSE Bypass.
 * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
 *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct) {
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
	uint32_t tickstart, pll_config;

	/* Check Null pointer */
	if (RCC_OscInitStruct == NULL) {
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_RCC_OscConfig+0x12>
		return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e28d      	b.n	8002d56 <HAL_RCC_OscConfig+0x52e>
	}

	/* Check the parameters */
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 8083 	beq.w	800294e <HAL_RCC_OscConfig+0x126>
			== RCC_OSCILLATORTYPE_HSE) {
		/* Check the parameters */
		assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
		/* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002848:	4b94      	ldr	r3, [pc, #592]	; (8002a9c <HAL_RCC_OscConfig+0x274>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f003 030c 	and.w	r3, r3, #12
 8002850:	2b04      	cmp	r3, #4
 8002852:	d019      	beq.n	8002888 <HAL_RCC_OscConfig+0x60>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002854:	4b91      	ldr	r3, [pc, #580]	; (8002a9c <HAL_RCC_OscConfig+0x274>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 030c 	and.w	r3, r3, #12
 800285c:	2b08      	cmp	r3, #8
 800285e:	d106      	bne.n	800286e <HAL_RCC_OscConfig+0x46>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 8002860:	4b8e      	ldr	r3, [pc, #568]	; (8002a9c <HAL_RCC_OscConfig+0x274>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002868:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800286c:	d00c      	beq.n	8002888 <HAL_RCC_OscConfig+0x60>
								== RCC_PLLCFGR_PLLSRC_HSE))
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR)
 800286e:	4b8b      	ldr	r3, [pc, #556]	; (8002a9c <HAL_RCC_OscConfig+0x274>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 030c 	and.w	r3, r3, #12
 8002876:	2b0c      	cmp	r3, #12
 8002878:	d112      	bne.n	80028a0 <HAL_RCC_OscConfig+0x78>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 800287a:	4b88      	ldr	r3, [pc, #544]	; (8002a9c <HAL_RCC_OscConfig+0x274>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002882:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002886:	d10b      	bne.n	80028a0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
				{
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002888:	4b84      	ldr	r3, [pc, #528]	; (8002a9c <HAL_RCC_OscConfig+0x274>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d05b      	beq.n	800294c <HAL_RCC_OscConfig+0x124>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d157      	bne.n	800294c <HAL_RCC_OscConfig+0x124>
				return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e25a      	b.n	8002d56 <HAL_RCC_OscConfig+0x52e>
			}
		} else {
			/* Set the new HSE configuration ---------------------------------------*/
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028a8:	d106      	bne.n	80028b8 <HAL_RCC_OscConfig+0x90>
 80028aa:	4b7c      	ldr	r3, [pc, #496]	; (8002a9c <HAL_RCC_OscConfig+0x274>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a7b      	ldr	r2, [pc, #492]	; (8002a9c <HAL_RCC_OscConfig+0x274>)
 80028b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	e01d      	b.n	80028f4 <HAL_RCC_OscConfig+0xcc>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028c0:	d10c      	bne.n	80028dc <HAL_RCC_OscConfig+0xb4>
 80028c2:	4b76      	ldr	r3, [pc, #472]	; (8002a9c <HAL_RCC_OscConfig+0x274>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a75      	ldr	r2, [pc, #468]	; (8002a9c <HAL_RCC_OscConfig+0x274>)
 80028c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	4b73      	ldr	r3, [pc, #460]	; (8002a9c <HAL_RCC_OscConfig+0x274>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a72      	ldr	r2, [pc, #456]	; (8002a9c <HAL_RCC_OscConfig+0x274>)
 80028d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	e00b      	b.n	80028f4 <HAL_RCC_OscConfig+0xcc>
 80028dc:	4b6f      	ldr	r3, [pc, #444]	; (8002a9c <HAL_RCC_OscConfig+0x274>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a6e      	ldr	r2, [pc, #440]	; (8002a9c <HAL_RCC_OscConfig+0x274>)
 80028e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028e6:	6013      	str	r3, [r2, #0]
 80028e8:	4b6c      	ldr	r3, [pc, #432]	; (8002a9c <HAL_RCC_OscConfig+0x274>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a6b      	ldr	r2, [pc, #428]	; (8002a9c <HAL_RCC_OscConfig+0x274>)
 80028ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028f2:	6013      	str	r3, [r2, #0]

			/* Check the HSE State */
			if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF) {
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d013      	beq.n	8002924 <HAL_RCC_OscConfig+0xfc>
				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 80028fc:	f7fe fb76 	bl	8000fec <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0xee>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8002904:	f7fe fb72 	bl	8000fec <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b64      	cmp	r3, #100	; 0x64
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0xee>
						return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e21f      	b.n	8002d56 <HAL_RCC_OscConfig+0x52e>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8002916:	4b61      	ldr	r3, [pc, #388]	; (8002a9c <HAL_RCC_OscConfig+0x274>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0f0      	beq.n	8002904 <HAL_RCC_OscConfig+0xdc>
 8002922:	e014      	b.n	800294e <HAL_RCC_OscConfig+0x126>
					}
				}
			} else {
				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8002924:	f7fe fb62 	bl	8000fec <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is bypassed or disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x116>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 800292c:	f7fe fb5e 	bl	8000fec <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b64      	cmp	r3, #100	; 0x64
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x116>
						return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e20b      	b.n	8002d56 <HAL_RCC_OscConfig+0x52e>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 800293e:	4b57      	ldr	r3, [pc, #348]	; (8002a9c <HAL_RCC_OscConfig+0x274>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f0      	bne.n	800292c <HAL_RCC_OscConfig+0x104>
 800294a:	e000      	b.n	800294e <HAL_RCC_OscConfig+0x126>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800294c:	bf00      	nop
				}
			}
		}
	}
	/*----------------------------- HSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d06f      	beq.n	8002a3a <HAL_RCC_OscConfig+0x212>
		assert_param(
				IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

		/* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800295a:	4b50      	ldr	r3, [pc, #320]	; (8002a9c <HAL_RCC_OscConfig+0x274>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 030c 	and.w	r3, r3, #12
 8002962:	2b00      	cmp	r3, #0
 8002964:	d017      	beq.n	8002996 <HAL_RCC_OscConfig+0x16e>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002966:	4b4d      	ldr	r3, [pc, #308]	; (8002a9c <HAL_RCC_OscConfig+0x274>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 030c 	and.w	r3, r3, #12
 800296e:	2b08      	cmp	r3, #8
 8002970:	d105      	bne.n	800297e <HAL_RCC_OscConfig+0x156>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 8002972:	4b4a      	ldr	r3, [pc, #296]	; (8002a9c <HAL_RCC_OscConfig+0x274>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00b      	beq.n	8002996 <HAL_RCC_OscConfig+0x16e>
								== RCC_PLLCFGR_PLLSRC_HSI))
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR)
 800297e:	4b47      	ldr	r3, [pc, #284]	; (8002a9c <HAL_RCC_OscConfig+0x274>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 030c 	and.w	r3, r3, #12
 8002986:	2b0c      	cmp	r3, #12
 8002988:	d11c      	bne.n	80029c4 <HAL_RCC_OscConfig+0x19c>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 800298a:	4b44      	ldr	r3, [pc, #272]	; (8002a9c <HAL_RCC_OscConfig+0x274>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d116      	bne.n	80029c4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
				{
			/* When HSI is used as system clock it will not disabled */
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002996:	4b41      	ldr	r3, [pc, #260]	; (8002a9c <HAL_RCC_OscConfig+0x274>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d005      	beq.n	80029ae <HAL_RCC_OscConfig+0x186>
					&& (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d001      	beq.n	80029ae <HAL_RCC_OscConfig+0x186>
				return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e1d3      	b.n	8002d56 <HAL_RCC_OscConfig+0x52e>
			}
			/* Otherwise, just the calibration is allowed */
			else {
				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 80029ae:	4b3b      	ldr	r3, [pc, #236]	; (8002a9c <HAL_RCC_OscConfig+0x274>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	4937      	ldr	r1, [pc, #220]	; (8002a9c <HAL_RCC_OscConfig+0x274>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	600b      	str	r3, [r1, #0]
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029c2:	e03a      	b.n	8002a3a <HAL_RCC_OscConfig+0x212>
						RCC_OscInitStruct->HSICalibrationValue);
			}
		} else {
			/* Check the HSI State */
			if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF) {
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d020      	beq.n	8002a0e <HAL_RCC_OscConfig+0x1e6>
				/* Enable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_ENABLE();
 80029cc:	4b34      	ldr	r3, [pc, #208]	; (8002aa0 <HAL_RCC_OscConfig+0x278>)
 80029ce:	2201      	movs	r2, #1
 80029d0:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 80029d2:	f7fe fb0b 	bl	8000fec <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x1c4>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 80029da:	f7fe fb07 	bl	8000fec <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x1c4>
						return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e1b4      	b.n	8002d56 <HAL_RCC_OscConfig+0x52e>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 80029ec:	4b2b      	ldr	r3, [pc, #172]	; (8002a9c <HAL_RCC_OscConfig+0x274>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0f0      	beq.n	80029da <HAL_RCC_OscConfig+0x1b2>
					}
				}

				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 80029f8:	4b28      	ldr	r3, [pc, #160]	; (8002a9c <HAL_RCC_OscConfig+0x274>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	4925      	ldr	r1, [pc, #148]	; (8002a9c <HAL_RCC_OscConfig+0x274>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	600b      	str	r3, [r1, #0]
 8002a0c:	e015      	b.n	8002a3a <HAL_RCC_OscConfig+0x212>
						RCC_OscInitStruct->HSICalibrationValue);
			} else {
				/* Disable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_DISABLE();
 8002a0e:	4b24      	ldr	r3, [pc, #144]	; (8002aa0 <HAL_RCC_OscConfig+0x278>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8002a14:	f7fe faea 	bl	8000fec <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x206>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8002a1c:	f7fe fae6 	bl	8000fec <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x206>
						return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e193      	b.n	8002d56 <HAL_RCC_OscConfig+0x52e>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 8002a2e:	4b1b      	ldr	r3, [pc, #108]	; (8002a9c <HAL_RCC_OscConfig+0x274>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0x1f4>
				}
			}
		}
	}
	/*------------------------------ LSI Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d036      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x28c>
			== RCC_OSCILLATORTYPE_LSI) {
		/* Check the parameters */
		assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

		/* Check the LSI State */
		if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF) {
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d016      	beq.n	8002a7c <HAL_RCC_OscConfig+0x254>
			/* Enable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_ENABLE();
 8002a4e:	4b15      	ldr	r3, [pc, #84]	; (8002aa4 <HAL_RCC_OscConfig+0x27c>)
 8002a50:	2201      	movs	r2, #1
 8002a52:	601a      	str	r2, [r3, #0]

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8002a54:	f7fe faca 	bl	8000fec <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x246>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8002a5c:	f7fe fac6 	bl	8000fec <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x246>
					return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e173      	b.n	8002d56 <HAL_RCC_OscConfig+0x52e>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8002a6e:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <HAL_RCC_OscConfig+0x274>)
 8002a70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0f0      	beq.n	8002a5c <HAL_RCC_OscConfig+0x234>
 8002a7a:	e01b      	b.n	8002ab4 <HAL_RCC_OscConfig+0x28c>
				}
			}
		} else {
			/* Disable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_DISABLE();
 8002a7c:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <HAL_RCC_OscConfig+0x27c>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	601a      	str	r2, [r3, #0]

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8002a82:	f7fe fab3 	bl	8000fec <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 8002a88:	e00e      	b.n	8002aa8 <HAL_RCC_OscConfig+0x280>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8002a8a:	f7fe faaf 	bl	8000fec <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d907      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x280>
					return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e15c      	b.n	8002d56 <HAL_RCC_OscConfig+0x52e>
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	42470000 	.word	0x42470000
 8002aa4:	42470e80 	.word	0x42470e80
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 8002aa8:	4b8a      	ldr	r3, [pc, #552]	; (8002cd4 <HAL_RCC_OscConfig+0x4ac>)
 8002aaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1ea      	bne.n	8002a8a <HAL_RCC_OscConfig+0x262>
				}
			}
		}
	}
	/*------------------------------ LSE Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 8097 	beq.w	8002bf0 <HAL_RCC_OscConfig+0x3c8>
			== RCC_OSCILLATORTYPE_LSE) {
		FlagStatus pwrclkchanged = RESET;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	75fb      	strb	r3, [r7, #23]
		/* Check the parameters */
		assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

		/* Update LSE configuration in Backup Domain control register    */
		/* Requires to enable write access to Backup Domain of necessary */
		if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 8002ac6:	4b83      	ldr	r3, [pc, #524]	; (8002cd4 <HAL_RCC_OscConfig+0x4ac>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10f      	bne.n	8002af2 <HAL_RCC_OscConfig+0x2ca>
			__HAL_RCC_PWR_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60bb      	str	r3, [r7, #8]
 8002ad6:	4b7f      	ldr	r3, [pc, #508]	; (8002cd4 <HAL_RCC_OscConfig+0x4ac>)
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	4a7e      	ldr	r2, [pc, #504]	; (8002cd4 <HAL_RCC_OscConfig+0x4ac>)
 8002adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ae2:	4b7c      	ldr	r3, [pc, #496]	; (8002cd4 <HAL_RCC_OscConfig+0x4ac>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aea:	60bb      	str	r3, [r7, #8]
 8002aec:	68bb      	ldr	r3, [r7, #8]
			pwrclkchanged = SET;
 8002aee:	2301      	movs	r3, #1
 8002af0:	75fb      	strb	r3, [r7, #23]
		}

		if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8002af2:	4b79      	ldr	r3, [pc, #484]	; (8002cd8 <HAL_RCC_OscConfig+0x4b0>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d118      	bne.n	8002b30 <HAL_RCC_OscConfig+0x308>
			/* Enable write access to Backup domain */
			SET_BIT(PWR->CR, PWR_CR_DBP);
 8002afe:	4b76      	ldr	r3, [pc, #472]	; (8002cd8 <HAL_RCC_OscConfig+0x4b0>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a75      	ldr	r2, [pc, #468]	; (8002cd8 <HAL_RCC_OscConfig+0x4b0>)
 8002b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b08:	6013      	str	r3, [r2, #0]

			/* Wait for Backup domain Write protection disable */
			tickstart = HAL_GetTick();
 8002b0a:	f7fe fa6f 	bl	8000fec <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8002b10:	e008      	b.n	8002b24 <HAL_RCC_OscConfig+0x2fc>
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 8002b12:	f7fe fa6b 	bl	8000fec <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x2fc>
					return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e118      	b.n	8002d56 <HAL_RCC_OscConfig+0x52e>
			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8002b24:	4b6c      	ldr	r3, [pc, #432]	; (8002cd8 <HAL_RCC_OscConfig+0x4b0>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0f0      	beq.n	8002b12 <HAL_RCC_OscConfig+0x2ea>
				}
			}
		}

		/* Set the new LSE configuration -----------------------------------------*/
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d106      	bne.n	8002b46 <HAL_RCC_OscConfig+0x31e>
 8002b38:	4b66      	ldr	r3, [pc, #408]	; (8002cd4 <HAL_RCC_OscConfig+0x4ac>)
 8002b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3c:	4a65      	ldr	r2, [pc, #404]	; (8002cd4 <HAL_RCC_OscConfig+0x4ac>)
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	6713      	str	r3, [r2, #112]	; 0x70
 8002b44:	e01c      	b.n	8002b80 <HAL_RCC_OscConfig+0x358>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	2b05      	cmp	r3, #5
 8002b4c:	d10c      	bne.n	8002b68 <HAL_RCC_OscConfig+0x340>
 8002b4e:	4b61      	ldr	r3, [pc, #388]	; (8002cd4 <HAL_RCC_OscConfig+0x4ac>)
 8002b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b52:	4a60      	ldr	r2, [pc, #384]	; (8002cd4 <HAL_RCC_OscConfig+0x4ac>)
 8002b54:	f043 0304 	orr.w	r3, r3, #4
 8002b58:	6713      	str	r3, [r2, #112]	; 0x70
 8002b5a:	4b5e      	ldr	r3, [pc, #376]	; (8002cd4 <HAL_RCC_OscConfig+0x4ac>)
 8002b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5e:	4a5d      	ldr	r2, [pc, #372]	; (8002cd4 <HAL_RCC_OscConfig+0x4ac>)
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	6713      	str	r3, [r2, #112]	; 0x70
 8002b66:	e00b      	b.n	8002b80 <HAL_RCC_OscConfig+0x358>
 8002b68:	4b5a      	ldr	r3, [pc, #360]	; (8002cd4 <HAL_RCC_OscConfig+0x4ac>)
 8002b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6c:	4a59      	ldr	r2, [pc, #356]	; (8002cd4 <HAL_RCC_OscConfig+0x4ac>)
 8002b6e:	f023 0301 	bic.w	r3, r3, #1
 8002b72:	6713      	str	r3, [r2, #112]	; 0x70
 8002b74:	4b57      	ldr	r3, [pc, #348]	; (8002cd4 <HAL_RCC_OscConfig+0x4ac>)
 8002b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b78:	4a56      	ldr	r2, [pc, #344]	; (8002cd4 <HAL_RCC_OscConfig+0x4ac>)
 8002b7a:	f023 0304 	bic.w	r3, r3, #4
 8002b7e:	6713      	str	r3, [r2, #112]	; 0x70
		/* Check the LSE State */
		if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF) {
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d015      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x38c>
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8002b88:	f7fe fa30 	bl	8000fec <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8002b8e:	e00a      	b.n	8002ba6 <HAL_RCC_OscConfig+0x37e>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8002b90:	f7fe fa2c 	bl	8000fec <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x37e>
					return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e0d7      	b.n	8002d56 <HAL_RCC_OscConfig+0x52e>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8002ba6:	4b4b      	ldr	r3, [pc, #300]	; (8002cd4 <HAL_RCC_OscConfig+0x4ac>)
 8002ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0ee      	beq.n	8002b90 <HAL_RCC_OscConfig+0x368>
 8002bb2:	e014      	b.n	8002bde <HAL_RCC_OscConfig+0x3b6>
				}
			}
		} else {
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8002bb4:	f7fe fa1a 	bl	8000fec <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 8002bba:	e00a      	b.n	8002bd2 <HAL_RCC_OscConfig+0x3aa>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8002bbc:	f7fe fa16 	bl	8000fec <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x3aa>
					return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e0c1      	b.n	8002d56 <HAL_RCC_OscConfig+0x52e>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 8002bd2:	4b40      	ldr	r3, [pc, #256]	; (8002cd4 <HAL_RCC_OscConfig+0x4ac>)
 8002bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1ee      	bne.n	8002bbc <HAL_RCC_OscConfig+0x394>
				}
			}
		}

		/* Restore clock configuration if changed */
		if (pwrclkchanged == SET) {
 8002bde:	7dfb      	ldrb	r3, [r7, #23]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d105      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x3c8>
			__HAL_RCC_PWR_CLK_DISABLE();
 8002be4:	4b3b      	ldr	r3, [pc, #236]	; (8002cd4 <HAL_RCC_OscConfig+0x4ac>)
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	4a3a      	ldr	r2, [pc, #232]	; (8002cd4 <HAL_RCC_OscConfig+0x4ac>)
 8002bea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bee:	6413      	str	r3, [r2, #64]	; 0x40
		}
	}
	/*-------------------------------- PLL Configuration -----------------------*/
	/* Check the parameters */
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
	if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 80ad 	beq.w	8002d54 <HAL_RCC_OscConfig+0x52c>
		/* Check if the PLL is used as system clock or not */
		if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL) {
 8002bfa:	4b36      	ldr	r3, [pc, #216]	; (8002cd4 <HAL_RCC_OscConfig+0x4ac>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 030c 	and.w	r3, r3, #12
 8002c02:	2b08      	cmp	r3, #8
 8002c04:	d060      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x4a0>
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d145      	bne.n	8002c9a <HAL_RCC_OscConfig+0x472>
				assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
				assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
				assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 8002c0e:	4b33      	ldr	r3, [pc, #204]	; (8002cdc <HAL_RCC_OscConfig+0x4b4>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8002c14:	f7fe f9ea 	bl	8000fec <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x406>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8002c1c:	f7fe f9e6 	bl	8000fec <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x406>
						return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e093      	b.n	8002d56 <HAL_RCC_OscConfig+0x52e>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8002c2e:	4b29      	ldr	r3, [pc, #164]	; (8002cd4 <HAL_RCC_OscConfig+0x4ac>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCC_OscConfig+0x3f4>
					}
				}

				/* Configure the main PLL clock source, multiplication and division factors. */
				WRITE_REG(RCC->PLLCFGR,
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69da      	ldr	r2, [r3, #28]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	019b      	lsls	r3, r3, #6
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c50:	085b      	lsrs	r3, r3, #1
 8002c52:	3b01      	subs	r3, #1
 8002c54:	041b      	lsls	r3, r3, #16
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5c:	061b      	lsls	r3, r3, #24
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c64:	071b      	lsls	r3, r3, #28
 8002c66:	491b      	ldr	r1, [pc, #108]	; (8002cd4 <HAL_RCC_OscConfig+0x4ac>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	604b      	str	r3, [r1, #4]
						(RCC_OscInitStruct->PLL.PLLSource | RCC_OscInitStruct->PLL.PLLM | (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos) | (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos) | (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
				/* Enable the main PLL. */
				__HAL_RCC_PLL_ENABLE();
 8002c6c:	4b1b      	ldr	r3, [pc, #108]	; (8002cdc <HAL_RCC_OscConfig+0x4b4>)
 8002c6e:	2201      	movs	r2, #1
 8002c70:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8002c72:	f7fe f9bb 	bl	8000fec <HAL_GetTick>
 8002c76:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8002c78:	e008      	b.n	8002c8c <HAL_RCC_OscConfig+0x464>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8002c7a:	f7fe f9b7 	bl	8000fec <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d901      	bls.n	8002c8c <HAL_RCC_OscConfig+0x464>
						return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e064      	b.n	8002d56 <HAL_RCC_OscConfig+0x52e>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8002c8c:	4b11      	ldr	r3, [pc, #68]	; (8002cd4 <HAL_RCC_OscConfig+0x4ac>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d0f0      	beq.n	8002c7a <HAL_RCC_OscConfig+0x452>
 8002c98:	e05c      	b.n	8002d54 <HAL_RCC_OscConfig+0x52c>
					}
				}
			} else {
				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 8002c9a:	4b10      	ldr	r3, [pc, #64]	; (8002cdc <HAL_RCC_OscConfig+0x4b4>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8002ca0:	f7fe f9a4 	bl	8000fec <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x492>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8002ca8:	f7fe f9a0 	bl	8000fec <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x492>
						return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e04d      	b.n	8002d56 <HAL_RCC_OscConfig+0x52e>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8002cba:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <HAL_RCC_OscConfig+0x4ac>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f0      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x480>
 8002cc6:	e045      	b.n	8002d54 <HAL_RCC_OscConfig+0x52c>
					}
				}
			}
		} else {
			/* Check if there is a request to disable the PLL used as System clock source */
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) {
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d107      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x4b8>
				return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e040      	b.n	8002d56 <HAL_RCC_OscConfig+0x52e>
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	40007000 	.word	0x40007000
 8002cdc:	42470060 	.word	0x42470060
			} else {
				/* Do not return HAL_ERROR if request repeats the current configuration */
				pll_config = RCC->PLLCFGR;
 8002ce0:	4b1f      	ldr	r3, [pc, #124]	; (8002d60 <HAL_RCC_OscConfig+0x538>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
				if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d030      	beq.n	8002d50 <HAL_RCC_OscConfig+0x528>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
								!= RCC_OscInitStruct->PLL.PLLSource)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	69db      	ldr	r3, [r3, #28]
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d129      	bne.n	8002d50 <HAL_RCC_OscConfig+0x528>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
								!= (RCC_OscInitStruct->PLL.PLLM)
										<< RCC_PLLCFGR_PLLM_Pos)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a1b      	ldr	r3, [r3, #32]
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d122      	bne.n	8002d50 <HAL_RCC_OscConfig+0x528>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d10:	4013      	ands	r3, r2
								!= (RCC_OscInitStruct->PLL.PLLN)
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	6a52      	ldr	r2, [r2, #36]	; 0x24
										<< RCC_PLLCFGR_PLLN_Pos)
 8002d16:	0192      	lsls	r2, r2, #6
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d119      	bne.n	8002d50 <HAL_RCC_OscConfig+0x528>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
								!= (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d26:	085b      	lsrs	r3, r3, #1
 8002d28:	3b01      	subs	r3, #1
										<< RCC_PLLCFGR_PLLP_Pos)
 8002d2a:	041b      	lsls	r3, r3, #16
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d10f      	bne.n	8002d50 <HAL_RCC_OscConfig+0x528>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
								!= (RCC_OscInitStruct->PLL.PLLQ
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
										<< RCC_PLLCFGR_PLLQ_Pos))
 8002d3a:	061b      	lsls	r3, r3, #24
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d107      	bne.n	8002d50 <HAL_RCC_OscConfig+0x528>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
								!= (RCC_OscInitStruct->PLL.PLLR
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
										<< RCC_PLLCFGR_PLLR_Pos)))
 8002d4a:	071b      	lsls	r3, r3, #28
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d001      	beq.n	8002d54 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
						{
					return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e000      	b.n	8002d56 <HAL_RCC_OscConfig+0x52e>
				}
			}
		}
	}
	return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3718      	adds	r7, #24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40023800 	.word	0x40023800

08002d64 <HAL_SPI_Init>:
 *         in the SPI_InitTypeDef and initialize the associated handle.
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi) {
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
	/* Check the SPI handle allocation */
	if (hspi == NULL) {
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_SPI_Init+0x12>
		return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e07b      	b.n	8002e6e <HAL_SPI_Init+0x10a>
	assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
	assert_param(IS_SPI_NSS(hspi->Init.NSS));
	assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
	assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
	assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
	if (hspi->Init.TIMode == SPI_TIMODE_DISABLE) {
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d108      	bne.n	8002d90 <HAL_SPI_Init+0x2c>
		assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
		assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

		if (hspi->Init.Mode == SPI_MODE_MASTER) {
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d86:	d009      	beq.n	8002d9c <HAL_SPI_Init+0x38>
			assert_param(
					IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
		} else {
			/* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
			hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	61da      	str	r2, [r3, #28]
 8002d8e:	e005      	b.n	8002d9c <HAL_SPI_Init+0x38>
		}
	} else {
		assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

		/* Force polarity and phase to TI protocaol requirements */
		hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	611a      	str	r2, [r3, #16]
		hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

	if (hspi->State == HAL_SPI_STATE_RESET) {
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d106      	bne.n	8002dbc <HAL_SPI_Init+0x58>
		/* Allocate lock resource and initialize it */
		hspi->Lock = HAL_UNLOCKED;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC... */
		HAL_SPI_MspInit(hspi);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f003 f8e6 	bl	8005f88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
	}

	hspi->State = HAL_SPI_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

	/* Disable the selected SPI peripheral */
	__HAL_SPI_DISABLE(hspi);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dd2:	601a      	str	r2, [r3, #0]

	/*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
	/* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
	 Communication speed, First bit and CRC calculation state */
	WRITE_REG(hspi->Instance->CR1,
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002de4:	431a      	orrs	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e16:	431a      	orrs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e20:	ea42 0103 	orr.w	r1, r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e28:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	601a      	str	r2, [r3, #0]
			((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) | (hspi->Init.Direction & (SPI_CR1_RXONLY | SPI_CR1_BIDIMODE)) | (hspi->Init.DataSize & SPI_CR1_DFF) | (hspi->Init.CLKPolarity & SPI_CR1_CPOL) | (hspi->Init.CLKPhase & SPI_CR1_CPHA) | (hspi->Init.NSS & SPI_CR1_SSM) | (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) | (hspi->Init.FirstBit & SPI_CR1_LSBFIRST) | (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

	/* Configure : NSS management, TI Mode */
	WRITE_REG(hspi->Instance->CR2,
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	0c1b      	lsrs	r3, r3, #16
 8002e3a:	f003 0104 	and.w	r1, r3, #4
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e42:	f003 0210 	and.w	r2, r3, #16
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
	/* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
	CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	69da      	ldr	r2, [r3, #28]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	655a      	str	r2, [r3, #84]	; 0x54
	hspi->State = HAL_SPI_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

	return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_SPI_Receive>:
 * @param  Size amount of data to be received
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData,
		uint16_t Size, uint32_t Timeout) {
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b088      	sub	sp, #32
 8002e7a:	af02      	add	r7, sp, #8
 8002e7c:	60f8      	str	r0, [r7, #12]
 8002e7e:	60b9      	str	r1, [r7, #8]
 8002e80:	603b      	str	r3, [r7, #0]
 8002e82:	4613      	mov	r3, r2
 8002e84:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
	uint32_t tickstart;
	HAL_StatusTypeDef errorcode = HAL_OK;
 8002e86:	2300      	movs	r3, #0
 8002e88:	75fb      	strb	r3, [r7, #23]

	if ((hspi->Init.Mode == SPI_MODE_MASTER)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e92:	d112      	bne.n	8002eba <HAL_SPI_Receive+0x44>
			&& (hspi->Init.Direction == SPI_DIRECTION_2LINES)) {
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d10e      	bne.n	8002eba <HAL_SPI_Receive+0x44>
		hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2204      	movs	r2, #4
 8002ea0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		/* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
		return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002ea4:	88fa      	ldrh	r2, [r7, #6]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	68b9      	ldr	r1, [r7, #8]
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f000 f8f1 	bl	8003098 <HAL_SPI_TransmitReceive>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	e0ea      	b.n	8003090 <HAL_SPI_Receive+0x21a>
	}

	/* Process Locked */
	__HAL_LOCK(hspi);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d101      	bne.n	8002ec8 <HAL_SPI_Receive+0x52>
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	e0e3      	b.n	8003090 <HAL_SPI_Receive+0x21a>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	/* Init tickstart for timeout management*/
	tickstart = HAL_GetTick();
 8002ed0:	f7fe f88c 	bl	8000fec <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

	if (hspi->State != HAL_SPI_STATE_READY) {
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d002      	beq.n	8002ee8 <HAL_SPI_Receive+0x72>
		errorcode = HAL_BUSY;
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	75fb      	strb	r3, [r7, #23]
		goto error;
 8002ee6:	e0ca      	b.n	800307e <HAL_SPI_Receive+0x208>
	}

	if ((pData == NULL) || (Size == 0U)) {
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <HAL_SPI_Receive+0x7e>
 8002eee:	88fb      	ldrh	r3, [r7, #6]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d102      	bne.n	8002efa <HAL_SPI_Receive+0x84>
		errorcode = HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	75fb      	strb	r3, [r7, #23]
		goto error;
 8002ef8:	e0c1      	b.n	800307e <HAL_SPI_Receive+0x208>
	}

	/* Set the transaction information */
	hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2204      	movs	r2, #4
 8002efe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	655a      	str	r2, [r3, #84]	; 0x54
	hspi->pRxBuffPtr = (uint8_t*) pData;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	68ba      	ldr	r2, [r7, #8]
 8002f0c:	639a      	str	r2, [r3, #56]	; 0x38
	hspi->RxXferSize = Size;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	88fa      	ldrh	r2, [r7, #6]
 8002f12:	879a      	strh	r2, [r3, #60]	; 0x3c
	hspi->RxXferCount = Size;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	88fa      	ldrh	r2, [r7, #6]
 8002f18:	87da      	strh	r2, [r3, #62]	; 0x3e

	/*Init field not used in handle to zero */
	hspi->pTxBuffPtr = (uint8_t*) NULL;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	631a      	str	r2, [r3, #48]	; 0x30
	hspi->TxXferSize = 0U;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	869a      	strh	r2, [r3, #52]	; 0x34
	hspi->TxXferCount = 0U;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	86da      	strh	r2, [r3, #54]	; 0x36
	hspi->RxISR = NULL;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	641a      	str	r2, [r3, #64]	; 0x40
	hspi->TxISR = NULL;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

	/* Configure communication direction: 1Line */
	if (hspi->Init.Direction == SPI_DIRECTION_1LINE) {
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f40:	d10f      	bne.n	8002f62 <HAL_SPI_Receive+0xec>
		/* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
		__HAL_SPI_DISABLE(hspi);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f50:	601a      	str	r2, [r3, #0]
		SPI_1LINE_RX(hspi);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f60:	601a      	str	r2, [r3, #0]
	}

	/* Check if the SPI is already enabled */
	if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE) {
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6c:	2b40      	cmp	r3, #64	; 0x40
 8002f6e:	d007      	beq.n	8002f80 <HAL_SPI_Receive+0x10a>
		/* Enable SPI peripheral */
		__HAL_SPI_ENABLE(hspi);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f7e:	601a      	str	r2, [r3, #0]
	}

	/* Receive data in 8 Bit mode */
	if (hspi->Init.DataSize == SPI_DATASIZE_8BIT) {
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d162      	bne.n	800304e <HAL_SPI_Receive+0x1d8>
		/* Transfer loop */
		while (hspi->RxXferCount > 0U) {
 8002f88:	e02e      	b.n	8002fe8 <HAL_SPI_Receive+0x172>
			/* Check the RXNE flag */
			if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) {
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d115      	bne.n	8002fc4 <HAL_SPI_Receive+0x14e>
				/* read the received data */
				(*(uint8_t*) hspi->pRxBuffPtr) =
						*(__IO uint8_t*) &hspi->Instance->DR;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f103 020c 	add.w	r2, r3, #12
				(*(uint8_t*) hspi->pRxBuffPtr) =
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
						*(__IO uint8_t*) &hspi->Instance->DR;
 8002fa4:	7812      	ldrb	r2, [r2, #0]
 8002fa6:	b2d2      	uxtb	r2, r2
				(*(uint8_t*) hspi->pRxBuffPtr) =
 8002fa8:	701a      	strb	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint8_t);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fae:	1c5a      	adds	r2, r3, #1
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	639a      	str	r2, [r3, #56]	; 0x38
				hspi->RxXferCount--;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fc2:	e011      	b.n	8002fe8 <HAL_SPI_Receive+0x172>
			} else {
				/* Timeout management */
				if ((((HAL_GetTick() - tickstart) >= Timeout)
 8002fc4:	f7fe f812 	bl	8000fec <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d803      	bhi.n	8002fdc <HAL_SPI_Receive+0x166>
						&& (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U)) {
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fda:	d102      	bne.n	8002fe2 <HAL_SPI_Receive+0x16c>
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d102      	bne.n	8002fe8 <HAL_SPI_Receive+0x172>
					errorcode = HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	75fb      	strb	r3, [r7, #23]
					goto error;
 8002fe6:	e04a      	b.n	800307e <HAL_SPI_Receive+0x208>
		while (hspi->RxXferCount > 0U) {
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1cb      	bne.n	8002f8a <HAL_SPI_Receive+0x114>
 8002ff2:	e031      	b.n	8003058 <HAL_SPI_Receive+0x1e2>
		}
	} else {
		/* Transfer loop */
		while (hspi->RxXferCount > 0U) {
			/* Check the RXNE flag */
			if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) {
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d113      	bne.n	800302a <HAL_SPI_Receive+0x1b4>
				*((uint16_t*) hspi->pRxBuffPtr) = (uint16_t) hspi->Instance->DR;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68da      	ldr	r2, [r3, #12]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300c:	b292      	uxth	r2, r2
 800300e:	801a      	strh	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint16_t);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003014:	1c9a      	adds	r2, r3, #2
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	639a      	str	r2, [r3, #56]	; 0x38
				hspi->RxXferCount--;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800301e:	b29b      	uxth	r3, r3
 8003020:	3b01      	subs	r3, #1
 8003022:	b29a      	uxth	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003028:	e011      	b.n	800304e <HAL_SPI_Receive+0x1d8>
			} else {
				/* Timeout management */
				if ((((HAL_GetTick() - tickstart) >= Timeout)
 800302a:	f7fd ffdf 	bl	8000fec <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d803      	bhi.n	8003042 <HAL_SPI_Receive+0x1cc>
						&& (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U)) {
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003040:	d102      	bne.n	8003048 <HAL_SPI_Receive+0x1d2>
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d102      	bne.n	800304e <HAL_SPI_Receive+0x1d8>
					errorcode = HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	75fb      	strb	r3, [r7, #23]
					goto error;
 800304c:	e017      	b.n	800307e <HAL_SPI_Receive+0x208>
		while (hspi->RxXferCount > 0U) {
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003052:	b29b      	uxth	r3, r3
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1cd      	bne.n	8002ff4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

	/* Check the end of the transaction */
	if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK) {
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	6839      	ldr	r1, [r7, #0]
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f000 fa45 	bl	80034ec <SPI_EndRxTransaction>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d002      	beq.n	800306e <HAL_SPI_Receive+0x1f8>
		hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2220      	movs	r2, #32
 800306c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

	if (hspi->ErrorCode != HAL_SPI_ERROR_NONE) {
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003072:	2b00      	cmp	r3, #0
 8003074:	d002      	beq.n	800307c <HAL_SPI_Receive+0x206>
		errorcode = HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	75fb      	strb	r3, [r7, #23]
 800307a:	e000      	b.n	800307e <HAL_SPI_Receive+0x208>
	}

	error: hspi->State = HAL_SPI_STATE_READY;
 800307c:	bf00      	nop
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	__HAL_UNLOCK(hspi);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	return errorcode;
 800308e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003090:	4618      	mov	r0, r3
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_SPI_TransmitReceive>:
 * @param  Size amount of data to be sent and received
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi,
		uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout) {
 8003098:	b580      	push	{r7, lr}
 800309a:	b08c      	sub	sp, #48	; 0x30
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
 80030a4:	807b      	strh	r3, [r7, #2]
	uint32_t tmp_mode;
	HAL_SPI_StateTypeDef tmp_state;
	uint32_t tickstart;

	/* Variable used to alternate Rx and Tx during transfer */
	uint32_t txallowed = 1U;
 80030a6:	2301      	movs	r3, #1
 80030a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_StatusTypeDef errorcode = HAL_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	/* Check Direction parameter */
	assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

	/* Process Locked */
	__HAL_LOCK(hspi);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d101      	bne.n	80030be <HAL_SPI_TransmitReceive+0x26>
 80030ba:	2302      	movs	r3, #2
 80030bc:	e18a      	b.n	80033d4 <HAL_SPI_TransmitReceive+0x33c>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	/* Init tickstart for timeout management*/
	tickstart = HAL_GetTick();
 80030c6:	f7fd ff91 	bl	8000fec <HAL_GetTick>
 80030ca:	6278      	str	r0, [r7, #36]	; 0x24

	/* Init temporary variables */
	tmp_state = hspi->State;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	tmp_mode = hspi->Init.Mode;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	61fb      	str	r3, [r7, #28]
	initial_TxXferCount = Size;
 80030dc:	887b      	ldrh	r3, [r7, #2]
 80030de:	837b      	strh	r3, [r7, #26]

	if (!((tmp_state == HAL_SPI_STATE_READY)
 80030e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d00f      	beq.n	8003108 <HAL_SPI_TransmitReceive+0x70>
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030ee:	d107      	bne.n	8003100 <HAL_SPI_TransmitReceive+0x68>
			|| ((tmp_mode == SPI_MODE_MASTER)
					&& (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d103      	bne.n	8003100 <HAL_SPI_TransmitReceive+0x68>
					&& (tmp_state == HAL_SPI_STATE_BUSY_RX)))) {
 80030f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030fc:	2b04      	cmp	r3, #4
 80030fe:	d003      	beq.n	8003108 <HAL_SPI_TransmitReceive+0x70>
		errorcode = HAL_BUSY;
 8003100:	2302      	movs	r3, #2
 8003102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		goto error;
 8003106:	e15b      	b.n	80033c0 <HAL_SPI_TransmitReceive+0x328>
	}

	if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U)) {
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d005      	beq.n	800311a <HAL_SPI_TransmitReceive+0x82>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d002      	beq.n	800311a <HAL_SPI_TransmitReceive+0x82>
 8003114:	887b      	ldrh	r3, [r7, #2]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d103      	bne.n	8003122 <HAL_SPI_TransmitReceive+0x8a>
		errorcode = HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		goto error;
 8003120:	e14e      	b.n	80033c0 <HAL_SPI_TransmitReceive+0x328>
	}

	/* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
	if (hspi->State != HAL_SPI_STATE_BUSY_RX) {
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b04      	cmp	r3, #4
 800312c:	d003      	beq.n	8003136 <HAL_SPI_TransmitReceive+0x9e>
		hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2205      	movs	r2, #5
 8003132:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	}

	/* Set the transaction information */
	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	655a      	str	r2, [r3, #84]	; 0x54
	hspi->pRxBuffPtr = (uint8_t*) pRxData;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	639a      	str	r2, [r3, #56]	; 0x38
	hspi->RxXferCount = Size;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	887a      	ldrh	r2, [r7, #2]
 8003146:	87da      	strh	r2, [r3, #62]	; 0x3e
	hspi->RxXferSize = Size;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	887a      	ldrh	r2, [r7, #2]
 800314c:	879a      	strh	r2, [r3, #60]	; 0x3c
	hspi->pTxBuffPtr = (uint8_t*) pTxData;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	68ba      	ldr	r2, [r7, #8]
 8003152:	631a      	str	r2, [r3, #48]	; 0x30
	hspi->TxXferCount = Size;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	887a      	ldrh	r2, [r7, #2]
 8003158:	86da      	strh	r2, [r3, #54]	; 0x36
	hspi->TxXferSize = Size;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	887a      	ldrh	r2, [r7, #2]
 800315e:	869a      	strh	r2, [r3, #52]	; 0x34

	/*Init field not used in handle to zero */
	hspi->RxISR = NULL;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	641a      	str	r2, [r3, #64]	; 0x40
	hspi->TxISR = NULL;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

	/* Check if the SPI is already enabled */
	if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE) {
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003176:	2b40      	cmp	r3, #64	; 0x40
 8003178:	d007      	beq.n	800318a <HAL_SPI_TransmitReceive+0xf2>
		/* Enable SPI peripheral */
		__HAL_SPI_ENABLE(hspi);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003188:	601a      	str	r2, [r3, #0]
	}

	/* Transmit and Receive data in 16 Bit mode */
	if (hspi->Init.DataSize == SPI_DATASIZE_16BIT) {
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003192:	d178      	bne.n	8003286 <HAL_SPI_TransmitReceive+0x1ee>
		if ((hspi->Init.Mode == SPI_MODE_SLAVE)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d002      	beq.n	80031a2 <HAL_SPI_TransmitReceive+0x10a>
				|| (initial_TxXferCount == 0x01U)) {
 800319c:	8b7b      	ldrh	r3, [r7, #26]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d166      	bne.n	8003270 <HAL_SPI_TransmitReceive+0x1d8>
			hspi->Instance->DR = *((uint16_t*) hspi->pTxBuffPtr);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	881a      	ldrh	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	60da      	str	r2, [r3, #12]
			hspi->pTxBuffPtr += sizeof(uint16_t);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b2:	1c9a      	adds	r2, r3, #2
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	631a      	str	r2, [r3, #48]	; 0x30
			hspi->TxXferCount--;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031bc:	b29b      	uxth	r3, r3
 80031be:	3b01      	subs	r3, #1
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	86da      	strh	r2, [r3, #54]	; 0x36
		}
		while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 80031c6:	e053      	b.n	8003270 <HAL_SPI_TransmitReceive+0x1d8>
			/* Check TXE flag */
			if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d11b      	bne.n	800320e <HAL_SPI_TransmitReceive+0x176>
					&& (hspi->TxXferCount > 0U) && (txallowed == 1U)) {
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031da:	b29b      	uxth	r3, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d016      	beq.n	800320e <HAL_SPI_TransmitReceive+0x176>
 80031e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d113      	bne.n	800320e <HAL_SPI_TransmitReceive+0x176>
				hspi->Instance->DR = *((uint16_t*) hspi->pTxBuffPtr);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	881a      	ldrh	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	60da      	str	r2, [r3, #12]
				hspi->pTxBuffPtr += sizeof(uint16_t);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f6:	1c9a      	adds	r2, r3, #2
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	631a      	str	r2, [r3, #48]	; 0x30
				hspi->TxXferCount--;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003200:	b29b      	uxth	r3, r3
 8003202:	3b01      	subs	r3, #1
 8003204:	b29a      	uxth	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	86da      	strh	r2, [r3, #54]	; 0x36
				/* Next Data is a reception (Rx). Tx not allowed */
				txallowed = 0U;
 800320a:	2300      	movs	r3, #0
 800320c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
			}

			/* Check RXNE flag */
			if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b01      	cmp	r3, #1
 800321a:	d119      	bne.n	8003250 <HAL_SPI_TransmitReceive+0x1b8>
					&& (hspi->RxXferCount > 0U)) {
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003220:	b29b      	uxth	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d014      	beq.n	8003250 <HAL_SPI_TransmitReceive+0x1b8>
				*((uint16_t*) hspi->pRxBuffPtr) = (uint16_t) hspi->Instance->DR;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003230:	b292      	uxth	r2, r2
 8003232:	801a      	strh	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint16_t);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003238:	1c9a      	adds	r2, r3, #2
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	639a      	str	r2, [r3, #56]	; 0x38
				hspi->RxXferCount--;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003242:	b29b      	uxth	r3, r3
 8003244:	3b01      	subs	r3, #1
 8003246:	b29a      	uxth	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	87da      	strh	r2, [r3, #62]	; 0x3e
				/* Next Data is a Transmission (Tx). Tx is allowed */
				txallowed = 1U;
 800324c:	2301      	movs	r3, #1
 800324e:	62fb      	str	r3, [r7, #44]	; 0x2c
			}
			if (((HAL_GetTick() - tickstart) >= Timeout)
 8003250:	f7fd fecc 	bl	8000fec <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800325c:	429a      	cmp	r2, r3
 800325e:	d807      	bhi.n	8003270 <HAL_SPI_TransmitReceive+0x1d8>
					&& (Timeout != HAL_MAX_DELAY)) {
 8003260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003266:	d003      	beq.n	8003270 <HAL_SPI_TransmitReceive+0x1d8>
				errorcode = HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto error;
 800326e:	e0a7      	b.n	80033c0 <HAL_SPI_TransmitReceive+0x328>
		while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1a6      	bne.n	80031c8 <HAL_SPI_TransmitReceive+0x130>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800327e:	b29b      	uxth	r3, r3
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1a1      	bne.n	80031c8 <HAL_SPI_TransmitReceive+0x130>
 8003284:	e07c      	b.n	8003380 <HAL_SPI_TransmitReceive+0x2e8>
			}
		}
	}
	/* Transmit and Receive data in 8 Bit mode */
	else {
		if ((hspi->Init.Mode == SPI_MODE_SLAVE)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d002      	beq.n	8003294 <HAL_SPI_TransmitReceive+0x1fc>
				|| (initial_TxXferCount == 0x01U)) {
 800328e:	8b7b      	ldrh	r3, [r7, #26]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d16b      	bne.n	800336c <HAL_SPI_TransmitReceive+0x2d4>
			*((__IO uint8_t*) &hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	330c      	adds	r3, #12
 800329e:	7812      	ldrb	r2, [r2, #0]
 80032a0:	701a      	strb	r2, [r3, #0]
			hspi->pTxBuffPtr += sizeof(uint8_t);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	1c5a      	adds	r2, r3, #1
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	631a      	str	r2, [r3, #48]	; 0x30
			hspi->TxXferCount--;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	3b01      	subs	r3, #1
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	86da      	strh	r2, [r3, #54]	; 0x36
		}
		while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 80032ba:	e057      	b.n	800336c <HAL_SPI_TransmitReceive+0x2d4>
			/* Check TXE flag */
			if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d11c      	bne.n	8003304 <HAL_SPI_TransmitReceive+0x26c>
					&& (hspi->TxXferCount > 0U) && (txallowed == 1U)) {
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d017      	beq.n	8003304 <HAL_SPI_TransmitReceive+0x26c>
 80032d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d114      	bne.n	8003304 <HAL_SPI_TransmitReceive+0x26c>
				*(__IO uint8_t*) &hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	330c      	adds	r3, #12
 80032e4:	7812      	ldrb	r2, [r2, #0]
 80032e6:	701a      	strb	r2, [r3, #0]
				hspi->pTxBuffPtr++;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ec:	1c5a      	adds	r2, r3, #1
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	631a      	str	r2, [r3, #48]	; 0x30
				hspi->TxXferCount--;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	3b01      	subs	r3, #1
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	86da      	strh	r2, [r3, #54]	; 0x36
				/* Next Data is a reception (Rx). Tx not allowed */
				txallowed = 0U;
 8003300:	2300      	movs	r3, #0
 8003302:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
			}

			/* Wait until RXNE flag is reset */
			if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b01      	cmp	r3, #1
 8003310:	d119      	bne.n	8003346 <HAL_SPI_TransmitReceive+0x2ae>
					&& (hspi->RxXferCount > 0U)) {
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003316:	b29b      	uxth	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	d014      	beq.n	8003346 <HAL_SPI_TransmitReceive+0x2ae>
				(*(uint8_t*) hspi->pRxBuffPtr) = hspi->Instance->DR;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68da      	ldr	r2, [r3, #12]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	701a      	strb	r2, [r3, #0]
				hspi->pRxBuffPtr++;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332e:	1c5a      	adds	r2, r3, #1
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	639a      	str	r2, [r3, #56]	; 0x38
				hspi->RxXferCount--;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003338:	b29b      	uxth	r3, r3
 800333a:	3b01      	subs	r3, #1
 800333c:	b29a      	uxth	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	87da      	strh	r2, [r3, #62]	; 0x3e
				/* Next Data is a Transmission (Tx). Tx is allowed */
				txallowed = 1U;
 8003342:	2301      	movs	r3, #1
 8003344:	62fb      	str	r3, [r7, #44]	; 0x2c
			}
			if ((((HAL_GetTick() - tickstart) >= Timeout)
 8003346:	f7fd fe51 	bl	8000fec <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003352:	429a      	cmp	r2, r3
 8003354:	d803      	bhi.n	800335e <HAL_SPI_TransmitReceive+0x2c6>
					&& ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U)) {
 8003356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335c:	d102      	bne.n	8003364 <HAL_SPI_TransmitReceive+0x2cc>
 800335e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003360:	2b00      	cmp	r3, #0
 8003362:	d103      	bne.n	800336c <HAL_SPI_TransmitReceive+0x2d4>
				errorcode = HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto error;
 800336a:	e029      	b.n	80033c0 <HAL_SPI_TransmitReceive+0x328>
		while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1a2      	bne.n	80032bc <HAL_SPI_TransmitReceive+0x224>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800337a:	b29b      	uxth	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	d19d      	bne.n	80032bc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

	/* Check the end of the transaction */
	if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK) {
 8003380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003382:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 f917 	bl	80035b8 <SPI_EndRxTxTransaction>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d006      	beq.n	800339e <HAL_SPI_TransmitReceive+0x306>
		errorcode = HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2220      	movs	r2, #32
 800339a:	655a      	str	r2, [r3, #84]	; 0x54
		goto error;
 800339c:	e010      	b.n	80033c0 <HAL_SPI_TransmitReceive+0x328>
	}

	/* Clear overrun flag in 2 Lines communication mode because received is not read */
	if (hspi->Init.Direction == SPI_DIRECTION_2LINES) {
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10b      	bne.n	80033be <HAL_SPI_TransmitReceive+0x326>
		__HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033a6:	2300      	movs	r3, #0
 80033a8:	617b      	str	r3, [r7, #20]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	617b      	str	r3, [r7, #20]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	617b      	str	r3, [r7, #20]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	e000      	b.n	80033c0 <HAL_SPI_TransmitReceive+0x328>
	}

	error: hspi->State = HAL_SPI_STATE_READY;
 80033be:	bf00      	nop
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	__HAL_UNLOCK(hspi);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	return errorcode;
 80033d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3730      	adds	r7, #48	; 0x30
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <SPI_WaitFlagStateUntilTimeout>:
 * @param  Timeout Timeout duration
 * @param  Tickstart tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi,
		uint32_t Flag, FlagStatus State, uint32_t Timeout, uint32_t Tickstart) {
 80033dc:	b580      	push	{r7, lr}
 80033de:	b088      	sub	sp, #32
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	603b      	str	r3, [r7, #0]
 80033e8:	4613      	mov	r3, r2
 80033ea:	71fb      	strb	r3, [r7, #7]
	__IO uint32_t count;
	uint32_t tmp_timeout;
	uint32_t tmp_tickstart;

	/* Adjust Timeout value  in case of end of transfer */
	tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80033ec:	f7fd fdfe 	bl	8000fec <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f4:	1a9b      	subs	r3, r3, r2
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	4413      	add	r3, r2
 80033fa:	61fb      	str	r3, [r7, #28]
	tmp_tickstart = HAL_GetTick();
 80033fc:	f7fd fdf6 	bl	8000fec <HAL_GetTick>
 8003400:	61b8      	str	r0, [r7, #24]

	/* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
	count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003402:	4b39      	ldr	r3, [pc, #228]	; (80034e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	015b      	lsls	r3, r3, #5
 8003408:	0d1b      	lsrs	r3, r3, #20
 800340a:	69fa      	ldr	r2, [r7, #28]
 800340c:	fb02 f303 	mul.w	r3, r2, r3
 8003410:	617b      	str	r3, [r7, #20]

	while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State) {
 8003412:	e054      	b.n	80034be <SPI_WaitFlagStateUntilTimeout+0xe2>
		if (Timeout != HAL_MAX_DELAY) {
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800341a:	d050      	beq.n	80034be <SPI_WaitFlagStateUntilTimeout+0xe2>
			if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout)
 800341c:	f7fd fde6 	bl	8000fec <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	69fa      	ldr	r2, [r7, #28]
 8003428:	429a      	cmp	r2, r3
 800342a:	d902      	bls.n	8003432 <SPI_WaitFlagStateUntilTimeout+0x56>
					|| (tmp_timeout == 0U)) {
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d13d      	bne.n	80034ae <SPI_WaitFlagStateUntilTimeout+0xd2>
				/* Disable the SPI and reset the CRC: the CRC value should be cleared
				 on both master and slave sides in order to resynchronize the master
				 and slave for their respective CRC calculation */

				/* Disable TXE, RXNE and ERR interrupts for the interrupt process */
				__HAL_SPI_DISABLE_IT(hspi,
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003440:	605a      	str	r2, [r3, #4]
						(SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

				if ((hspi->Init.Mode == SPI_MODE_MASTER)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800344a:	d111      	bne.n	8003470 <SPI_WaitFlagStateUntilTimeout+0x94>
						&& ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003454:	d004      	beq.n	8003460 <SPI_WaitFlagStateUntilTimeout+0x84>
								|| (hspi->Init.Direction
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800345e:	d107      	bne.n	8003470 <SPI_WaitFlagStateUntilTimeout+0x94>
										== SPI_DIRECTION_2LINES_RXONLY))) {
					/* Disable SPI peripheral */
					__HAL_SPI_DISABLE(hspi);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800346e:	601a      	str	r2, [r3, #0]
				}

				/* Reset CRC Calculation */
				if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) {
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003474:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003478:	d10f      	bne.n	800349a <SPI_WaitFlagStateUntilTimeout+0xbe>
					SPI_RESET_CRC(hspi);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003498:	601a      	str	r2, [r3, #0]
				}

				hspi->State = HAL_SPI_STATE_READY;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

				/* Process Unlocked */
				__HAL_UNLOCK(hspi);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e017      	b.n	80034de <SPI_WaitFlagStateUntilTimeout+0x102>
			}
			/* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
			if (count == 0U) {
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
				tmp_timeout = 0U;
 80034b4:	2300      	movs	r3, #0
 80034b6:	61fb      	str	r3, [r7, #28]
			}
			count--;
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	617b      	str	r3, [r7, #20]
	while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State) {
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	4013      	ands	r3, r2
 80034c8:	68ba      	ldr	r2, [r7, #8]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	bf0c      	ite	eq
 80034ce:	2301      	moveq	r3, #1
 80034d0:	2300      	movne	r3, #0
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	461a      	mov	r2, r3
 80034d6:	79fb      	ldrb	r3, [r7, #7]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d19b      	bne.n	8003414 <SPI_WaitFlagStateUntilTimeout+0x38>
		}
	}

	return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3720      	adds	r7, #32
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	20000008 	.word	0x20000008

080034ec <SPI_EndRxTransaction>:
 * @param  Timeout Timeout duration
 * @param  Tickstart tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,
		uint32_t Timeout, uint32_t Tickstart) {
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af02      	add	r7, sp, #8
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
	if ((hspi->Init.Mode == SPI_MODE_MASTER)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003500:	d111      	bne.n	8003526 <SPI_EndRxTransaction+0x3a>
			&& ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800350a:	d004      	beq.n	8003516 <SPI_EndRxTransaction+0x2a>
					|| (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))) {
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003514:	d107      	bne.n	8003526 <SPI_EndRxTransaction+0x3a>
		/* Disable SPI peripheral */
		__HAL_SPI_DISABLE(hspi);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003524:	601a      	str	r2, [r3, #0]
	}

	/* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
	if (hspi->Init.Mode == SPI_MODE_MASTER) {
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800352e:	d12a      	bne.n	8003586 <SPI_EndRxTransaction+0x9a>
		if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY) {
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003538:	d012      	beq.n	8003560 <SPI_EndRxTransaction+0x74>
			/* Control the BSY flag */
			if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET,
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	2200      	movs	r2, #0
 8003542:	2180      	movs	r1, #128	; 0x80
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f7ff ff49 	bl	80033dc <SPI_WaitFlagStateUntilTimeout>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d02d      	beq.n	80035ac <SPI_EndRxTransaction+0xc0>
					Timeout, Tickstart) != HAL_OK) {
				SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003554:	f043 0220 	orr.w	r2, r3, #32
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	655a      	str	r2, [r3, #84]	; 0x54
				return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e026      	b.n	80035ae <SPI_EndRxTransaction+0xc2>
			}
		} else {
			/* Wait the RXNE reset */
			if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET,
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	2200      	movs	r2, #0
 8003568:	2101      	movs	r1, #1
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f7ff ff36 	bl	80033dc <SPI_WaitFlagStateUntilTimeout>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d01a      	beq.n	80035ac <SPI_EndRxTransaction+0xc0>
					Timeout, Tickstart) != HAL_OK) {
				SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357a:	f043 0220 	orr.w	r2, r3, #32
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	655a      	str	r2, [r3, #84]	; 0x54
				return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e013      	b.n	80035ae <SPI_EndRxTransaction+0xc2>
			}
		}
	} else {
		/* Wait the RXNE reset */
		if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout,
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	2200      	movs	r2, #0
 800358e:	2101      	movs	r1, #1
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f7ff ff23 	bl	80033dc <SPI_WaitFlagStateUntilTimeout>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d007      	beq.n	80035ac <SPI_EndRxTransaction+0xc0>
				Tickstart) != HAL_OK) {
			SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a0:	f043 0220 	orr.w	r2, r3, #32
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	655a      	str	r2, [r3, #84]	; 0x54
			return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e000      	b.n	80035ae <SPI_EndRxTransaction+0xc2>
		}
	}
	return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
	...

080035b8 <SPI_EndRxTxTransaction>:
 * @param  Timeout Timeout duration
 * @param  Tickstart tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi,
		uint32_t Timeout, uint32_t Tickstart) {
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b088      	sub	sp, #32
 80035bc:	af02      	add	r7, sp, #8
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
	/* Timeout in µs */
	__IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT
			* (SystemCoreClock / 24U / 1000000U);
 80035c4:	4b1b      	ldr	r3, [pc, #108]	; (8003634 <SPI_EndRxTxTransaction+0x7c>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a1b      	ldr	r2, [pc, #108]	; (8003638 <SPI_EndRxTxTransaction+0x80>)
 80035ca:	fba2 2303 	umull	r2, r3, r2, r3
 80035ce:	0d5b      	lsrs	r3, r3, #21
 80035d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80035d4:	fb02 f303 	mul.w	r3, r2, r3
	__IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT
 80035d8:	617b      	str	r3, [r7, #20]
	/* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
	if (hspi->Init.Mode == SPI_MODE_MASTER) {
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035e2:	d112      	bne.n	800360a <SPI_EndRxTxTransaction+0x52>
		/* Control the BSY flag */
		if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout,
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	2200      	movs	r2, #0
 80035ec:	2180      	movs	r1, #128	; 0x80
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f7ff fef4 	bl	80033dc <SPI_WaitFlagStateUntilTimeout>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d016      	beq.n	8003628 <SPI_EndRxTxTransaction+0x70>
				Tickstart) != HAL_OK) {
			SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035fe:	f043 0220 	orr.w	r2, r3, #32
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	655a      	str	r2, [r3, #84]	; 0x54
			return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e00f      	b.n	800362a <SPI_EndRxTxTransaction+0x72>
		 * If Timeout is reached, the transfer is considered as finish.
		 * User have to calculate the timeout value to fit with the time of 1 byte transfer.
		 * This time is directly link with the SPI clock from Master device.
		 */
		do {
			if (count == 0U) {
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00a      	beq.n	8003626 <SPI_EndRxTxTransaction+0x6e>
				break;
			}
			count--;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	3b01      	subs	r3, #1
 8003614:	617b      	str	r3, [r7, #20]
		} while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003620:	2b80      	cmp	r3, #128	; 0x80
 8003622:	d0f2      	beq.n	800360a <SPI_EndRxTxTransaction+0x52>
 8003624:	e000      	b.n	8003628 <SPI_EndRxTxTransaction+0x70>
				break;
 8003626:	bf00      	nop
	}

	return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3718      	adds	r7, #24
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	20000008 	.word	0x20000008
 8003638:	165e9f81 	.word	0x165e9f81

0800363c <HAL_TIM_Base_Init>:
 *         due to DIR bit readonly in center aligned mode.
 *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
 * @param  htim TIM Base handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim) {
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
	/* Check the TIM handle allocation */
	if (htim == NULL) {
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_TIM_Base_Init+0x12>
		return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e041      	b.n	80036d2 <HAL_TIM_Base_Init+0x96>
	assert_param(IS_TIM_INSTANCE(htim->Instance));
	assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
	assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
	assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

	if (htim->State == HAL_TIM_STATE_RESET) {
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d106      	bne.n	8003668 <HAL_TIM_Base_Init+0x2c>
		/* Allocate lock resource and initialize it */
		htim->Lock = HAL_UNLOCKED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC */
		HAL_TIM_Base_MspInit(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f002 fd08 	bl	8006078 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
	}

	/* Set the TIM state */
	htim->State = HAL_TIM_STATE_BUSY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2202      	movs	r2, #2
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Set the Time Base configuration */
	TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	3304      	adds	r3, #4
 8003678:	4619      	mov	r1, r3
 800367a:	4610      	mov	r0, r2
 800367c:	f000 fcba 	bl	8003ff4 <TIM_Base_SetConfig>

	/* Initialize the DMA burst operation state */
	htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

	/* Initialize the TIM channels state */
	TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

	/* Initialize the TIM state*/
	htim->State = HAL_TIM_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
	...

080036dc <HAL_TIM_Base_Start>:
/**
 * @brief  Starts the TIM Base generation.
 * @param  htim TIM Base handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim) {
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]

	/* Check the parameters */
	assert_param(IS_TIM_INSTANCE(htim->Instance));

	/* Check the TIM state */
	if (htim->State != HAL_TIM_STATE_READY) {
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d001      	beq.n	80036f4 <HAL_TIM_Base_Start+0x18>
		return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e046      	b.n	8003782 <HAL_TIM_Base_Start+0xa6>
	}

	/* Set the TIM state */
	htim->State = HAL_TIM_STATE_BUSY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
	if (IS_TIM_SLAVE_INSTANCE(htim->Instance)) {
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a23      	ldr	r2, [pc, #140]	; (8003790 <HAL_TIM_Base_Start+0xb4>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d022      	beq.n	800374c <HAL_TIM_Base_Start+0x70>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800370e:	d01d      	beq.n	800374c <HAL_TIM_Base_Start+0x70>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a1f      	ldr	r2, [pc, #124]	; (8003794 <HAL_TIM_Base_Start+0xb8>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d018      	beq.n	800374c <HAL_TIM_Base_Start+0x70>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a1e      	ldr	r2, [pc, #120]	; (8003798 <HAL_TIM_Base_Start+0xbc>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d013      	beq.n	800374c <HAL_TIM_Base_Start+0x70>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a1c      	ldr	r2, [pc, #112]	; (800379c <HAL_TIM_Base_Start+0xc0>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d00e      	beq.n	800374c <HAL_TIM_Base_Start+0x70>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a1b      	ldr	r2, [pc, #108]	; (80037a0 <HAL_TIM_Base_Start+0xc4>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d009      	beq.n	800374c <HAL_TIM_Base_Start+0x70>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a19      	ldr	r2, [pc, #100]	; (80037a4 <HAL_TIM_Base_Start+0xc8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d004      	beq.n	800374c <HAL_TIM_Base_Start+0x70>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a18      	ldr	r2, [pc, #96]	; (80037a8 <HAL_TIM_Base_Start+0xcc>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d111      	bne.n	8003770 <HAL_TIM_Base_Start+0x94>
		tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	60fb      	str	r3, [r7, #12]
		if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr)) {
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2b06      	cmp	r3, #6
 800375c:	d010      	beq.n	8003780 <HAL_TIM_Base_Start+0xa4>
			__HAL_TIM_ENABLE(htim);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f042 0201 	orr.w	r2, r2, #1
 800376c:	601a      	str	r2, [r3, #0]
		if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr)) {
 800376e:	e007      	b.n	8003780 <HAL_TIM_Base_Start+0xa4>
		}
	} else {
		__HAL_TIM_ENABLE(htim);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 0201 	orr.w	r2, r2, #1
 800377e:	601a      	str	r2, [r3, #0]
	}

	/* Return function status */
	return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	40010000 	.word	0x40010000
 8003794:	40000400 	.word	0x40000400
 8003798:	40000800 	.word	0x40000800
 800379c:	40000c00 	.word	0x40000c00
 80037a0:	40010400 	.word	0x40010400
 80037a4:	40014000 	.word	0x40014000
 80037a8:	40001800 	.word	0x40001800

080037ac <HAL_TIM_PWM_Init>:
 *         due to DIR bit readonly in center aligned mode.
 *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
 * @param  htim TIM PWM handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim) {
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
	/* Check the TIM handle allocation */
	if (htim == NULL) {
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_TIM_PWM_Init+0x12>
		return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e041      	b.n	8003842 <HAL_TIM_PWM_Init+0x96>
	assert_param(IS_TIM_INSTANCE(htim->Instance));
	assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
	assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
	assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

	if (htim->State == HAL_TIM_STATE_RESET) {
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d106      	bne.n	80037d8 <HAL_TIM_PWM_Init+0x2c>
		/* Allocate lock resource and initialize it */
		htim->Lock = HAL_UNLOCKED;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
		HAL_TIM_PWM_MspInit(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f002 fc94 	bl	8006100 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
	}

	/* Set the TIM state */
	htim->State = HAL_TIM_STATE_BUSY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2202      	movs	r2, #2
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Init the base time for the PWM */
	TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3304      	adds	r3, #4
 80037e8:	4619      	mov	r1, r3
 80037ea:	4610      	mov	r0, r2
 80037ec:	f000 fc02 	bl	8003ff4 <TIM_Base_SetConfig>

	/* Initialize the DMA burst operation state */
	htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

	/* Initialize the TIM channels state */
	TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

	/* Initialize the TIM state*/
	htim->State = HAL_TIM_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
	...

0800384c <HAL_TIM_PWM_Start>:
 *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
 *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
 *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel) {
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]

	/* Check the parameters */
	assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

	/* Check the TIM channel state */
	if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY) {
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d109      	bne.n	8003870 <HAL_TIM_PWM_Start+0x24>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b01      	cmp	r3, #1
 8003866:	bf14      	ite	ne
 8003868:	2301      	movne	r3, #1
 800386a:	2300      	moveq	r3, #0
 800386c:	b2db      	uxtb	r3, r3
 800386e:	e022      	b.n	80038b6 <HAL_TIM_PWM_Start+0x6a>
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	2b04      	cmp	r3, #4
 8003874:	d109      	bne.n	800388a <HAL_TIM_PWM_Start+0x3e>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b01      	cmp	r3, #1
 8003880:	bf14      	ite	ne
 8003882:	2301      	movne	r3, #1
 8003884:	2300      	moveq	r3, #0
 8003886:	b2db      	uxtb	r3, r3
 8003888:	e015      	b.n	80038b6 <HAL_TIM_PWM_Start+0x6a>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2b08      	cmp	r3, #8
 800388e:	d109      	bne.n	80038a4 <HAL_TIM_PWM_Start+0x58>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b01      	cmp	r3, #1
 800389a:	bf14      	ite	ne
 800389c:	2301      	movne	r3, #1
 800389e:	2300      	moveq	r3, #0
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	e008      	b.n	80038b6 <HAL_TIM_PWM_Start+0x6a>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	bf14      	ite	ne
 80038b0:	2301      	movne	r3, #1
 80038b2:	2300      	moveq	r3, #0
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <HAL_TIM_PWM_Start+0x72>
		return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e07c      	b.n	80039b8 <HAL_TIM_PWM_Start+0x16c>
	}

	/* Set the TIM channel state */
	TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d104      	bne.n	80038ce <HAL_TIM_PWM_Start+0x82>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2202      	movs	r2, #2
 80038c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038cc:	e013      	b.n	80038f6 <HAL_TIM_PWM_Start+0xaa>
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	2b04      	cmp	r3, #4
 80038d2:	d104      	bne.n	80038de <HAL_TIM_PWM_Start+0x92>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038dc:	e00b      	b.n	80038f6 <HAL_TIM_PWM_Start+0xaa>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	d104      	bne.n	80038ee <HAL_TIM_PWM_Start+0xa2>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038ec:	e003      	b.n	80038f6 <HAL_TIM_PWM_Start+0xaa>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2202      	movs	r2, #2
 80038f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	/* Enable the Capture compare channel */
	TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2201      	movs	r2, #1
 80038fc:	6839      	ldr	r1, [r7, #0]
 80038fe:	4618      	mov	r0, r3
 8003900:	f000 fe62 	bl	80045c8 <TIM_CCxChannelCmd>

	if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a2d      	ldr	r2, [pc, #180]	; (80039c0 <HAL_TIM_PWM_Start+0x174>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d004      	beq.n	8003918 <HAL_TIM_PWM_Start+0xcc>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a2c      	ldr	r2, [pc, #176]	; (80039c4 <HAL_TIM_PWM_Start+0x178>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d101      	bne.n	800391c <HAL_TIM_PWM_Start+0xd0>
 8003918:	2301      	movs	r3, #1
 800391a:	e000      	b.n	800391e <HAL_TIM_PWM_Start+0xd2>
 800391c:	2300      	movs	r3, #0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d007      	beq.n	8003932 <HAL_TIM_PWM_Start+0xe6>
		/* Enable the main output */
		__HAL_TIM_MOE_ENABLE(htim);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003930:	645a      	str	r2, [r3, #68]	; 0x44
	}

	/* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
	if (IS_TIM_SLAVE_INSTANCE(htim->Instance)) {
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a22      	ldr	r2, [pc, #136]	; (80039c0 <HAL_TIM_PWM_Start+0x174>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d022      	beq.n	8003982 <HAL_TIM_PWM_Start+0x136>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003944:	d01d      	beq.n	8003982 <HAL_TIM_PWM_Start+0x136>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a1f      	ldr	r2, [pc, #124]	; (80039c8 <HAL_TIM_PWM_Start+0x17c>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d018      	beq.n	8003982 <HAL_TIM_PWM_Start+0x136>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a1d      	ldr	r2, [pc, #116]	; (80039cc <HAL_TIM_PWM_Start+0x180>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d013      	beq.n	8003982 <HAL_TIM_PWM_Start+0x136>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a1c      	ldr	r2, [pc, #112]	; (80039d0 <HAL_TIM_PWM_Start+0x184>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d00e      	beq.n	8003982 <HAL_TIM_PWM_Start+0x136>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a16      	ldr	r2, [pc, #88]	; (80039c4 <HAL_TIM_PWM_Start+0x178>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d009      	beq.n	8003982 <HAL_TIM_PWM_Start+0x136>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a18      	ldr	r2, [pc, #96]	; (80039d4 <HAL_TIM_PWM_Start+0x188>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d004      	beq.n	8003982 <HAL_TIM_PWM_Start+0x136>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a16      	ldr	r2, [pc, #88]	; (80039d8 <HAL_TIM_PWM_Start+0x18c>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d111      	bne.n	80039a6 <HAL_TIM_PWM_Start+0x15a>
		tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	60fb      	str	r3, [r7, #12]
		if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr)) {
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2b06      	cmp	r3, #6
 8003992:	d010      	beq.n	80039b6 <HAL_TIM_PWM_Start+0x16a>
			__HAL_TIM_ENABLE(htim);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0201 	orr.w	r2, r2, #1
 80039a2:	601a      	str	r2, [r3, #0]
		if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr)) {
 80039a4:	e007      	b.n	80039b6 <HAL_TIM_PWM_Start+0x16a>
		}
	} else {
		__HAL_TIM_ENABLE(htim);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f042 0201 	orr.w	r2, r2, #1
 80039b4:	601a      	str	r2, [r3, #0]
	}

	/* Return function status */
	return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	40010000 	.word	0x40010000
 80039c4:	40010400 	.word	0x40010400
 80039c8:	40000400 	.word	0x40000400
 80039cc:	40000800 	.word	0x40000800
 80039d0:	40000c00 	.word	0x40000c00
 80039d4:	40014000 	.word	0x40014000
 80039d8:	40001800 	.word	0x40001800

080039dc <HAL_TIM_OnePulse_Init>:
 *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
 *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim,
		uint32_t OnePulseMode) {
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
	/* Check the TIM handle allocation */
	if (htim == NULL) {
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <HAL_TIM_OnePulse_Init+0x14>
		return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e041      	b.n	8003a74 <HAL_TIM_OnePulse_Init+0x98>
	assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
	assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
	assert_param(IS_TIM_OPM_MODE(OnePulseMode));
	assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

	if (htim->State == HAL_TIM_STATE_RESET) {
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d106      	bne.n	8003a0a <HAL_TIM_OnePulse_Init+0x2e>
		/* Allocate lock resource and initialize it */
		htim->Lock = HAL_UNLOCKED;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
		HAL_TIM_OnePulse_MspInit(htim);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f002 fb07 	bl	8006018 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
	}

	/* Set the TIM state */
	htim->State = HAL_TIM_STATE_BUSY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2202      	movs	r2, #2
 8003a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Configure the Time base in the One Pulse Mode */
	TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	3304      	adds	r3, #4
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	4610      	mov	r0, r2
 8003a1e:	f000 fae9 	bl	8003ff4 <TIM_Base_SetConfig>

	/* Reset the OPM Bit */
	htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0208 	bic.w	r2, r2, #8
 8003a30:	601a      	str	r2, [r3, #0]

	/* Configure the OPM Mode */
	htim->Instance->CR1 |= OnePulseMode;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6819      	ldr	r1, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	601a      	str	r2, [r3, #0]

	/* Initialize the DMA burst operation state */
	htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

	/* Initialize the TIM channels state */
	TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* Initialize the TIM state*/
	htim->State = HAL_TIM_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_TIM_IRQHandler>:
/**
 * @brief  This function handles TIM interrupts requests.
 * @param  htim TIM  handle
 * @retval None
 */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim) {
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
	/* Capture compare 1 event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET) {
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d122      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0x5c>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET) {
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d11b      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0x5c>
			{
				__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f06f 0202 	mvn.w	r2, #2
 8003aa8:	611a      	str	r2, [r3, #16]
				htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	771a      	strb	r2, [r3, #28]

				/* Input capture event */
				if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U) {
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_TIM_IRQHandler+0x4a>
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
					HAL_TIM_IC_CaptureCallback(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 fa7a 	bl	8003fb8 <HAL_TIM_IC_CaptureCallback>
 8003ac4:	e005      	b.n	8003ad2 <HAL_TIM_IRQHandler+0x56>
				else {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
					HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 fa6c 	bl	8003fa4 <HAL_TIM_OC_DelayElapsedCallback>
					HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 fa7d 	bl	8003fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
				}
				htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	771a      	strb	r2, [r3, #28]
			}
		}
	}
	/* Capture compare 2 event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET) {
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	f003 0304 	and.w	r3, r3, #4
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d122      	bne.n	8003b2c <HAL_TIM_IRQHandler+0xb0>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET) {
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	d11b      	bne.n	8003b2c <HAL_TIM_IRQHandler+0xb0>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f06f 0204 	mvn.w	r2, #4
 8003afc:	611a      	str	r2, [r3, #16]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2202      	movs	r2, #2
 8003b02:	771a      	strb	r2, [r3, #28]
			/* Input capture event */
			if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U) {
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_TIM_IRQHandler+0x9e>
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
				HAL_TIM_IC_CaptureCallback(htim);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 fa50 	bl	8003fb8 <HAL_TIM_IC_CaptureCallback>
 8003b18:	e005      	b.n	8003b26 <HAL_TIM_IRQHandler+0xaa>
			else {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
				HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 fa42 	bl	8003fa4 <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 fa53 	bl	8003fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
			}
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	771a      	strb	r2, [r3, #28]
		}
	}
	/* Capture compare 3 event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET) {
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b08      	cmp	r3, #8
 8003b38:	d122      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x104>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET) {
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	f003 0308 	and.w	r3, r3, #8
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d11b      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x104>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f06f 0208 	mvn.w	r2, #8
 8003b50:	611a      	str	r2, [r3, #16]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2204      	movs	r2, #4
 8003b56:	771a      	strb	r2, [r3, #28]
			/* Input capture event */
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U) {
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d003      	beq.n	8003b6e <HAL_TIM_IRQHandler+0xf2>
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
				HAL_TIM_IC_CaptureCallback(htim);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 fa26 	bl	8003fb8 <HAL_TIM_IC_CaptureCallback>
 8003b6c:	e005      	b.n	8003b7a <HAL_TIM_IRQHandler+0xfe>
			else {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
				HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 fa18 	bl	8003fa4 <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 fa29 	bl	8003fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
			}
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	771a      	strb	r2, [r3, #28]
		}
	}
	/* Capture compare 4 event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET) {
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	f003 0310 	and.w	r3, r3, #16
 8003b8a:	2b10      	cmp	r3, #16
 8003b8c:	d122      	bne.n	8003bd4 <HAL_TIM_IRQHandler+0x158>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET) {
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f003 0310 	and.w	r3, r3, #16
 8003b98:	2b10      	cmp	r3, #16
 8003b9a:	d11b      	bne.n	8003bd4 <HAL_TIM_IRQHandler+0x158>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f06f 0210 	mvn.w	r2, #16
 8003ba4:	611a      	str	r2, [r3, #16]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2208      	movs	r2, #8
 8003baa:	771a      	strb	r2, [r3, #28]
			/* Input capture event */
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U) {
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_TIM_IRQHandler+0x146>
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
				HAL_TIM_IC_CaptureCallback(htim);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f9fc 	bl	8003fb8 <HAL_TIM_IC_CaptureCallback>
 8003bc0:	e005      	b.n	8003bce <HAL_TIM_IRQHandler+0x152>
			else {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
				HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f9ee 	bl	8003fa4 <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f9ff 	bl	8003fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
			}
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	771a      	strb	r2, [r3, #28]
		}
	}
	/* TIM Update event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET) {
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d10e      	bne.n	8003c00 <HAL_TIM_IRQHandler+0x184>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET) {
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d107      	bne.n	8003c00 <HAL_TIM_IRQHandler+0x184>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f06f 0201 	mvn.w	r2, #1
 8003bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
			HAL_TIM_PeriodElapsedCallback(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f9c8 	bl	8003f90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
		}
	}
	/* TIM Break input event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET) {
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0a:	2b80      	cmp	r3, #128	; 0x80
 8003c0c:	d10e      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x1b0>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET) {
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c18:	2b80      	cmp	r3, #128	; 0x80
 8003c1a:	d107      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x1b0>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
			HAL_TIMEx_BreakCallback(htim);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 fdcc 	bl	80047c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
		}
	}
	/* TIM Trigger detection event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET) {
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c36:	2b40      	cmp	r3, #64	; 0x40
 8003c38:	d10e      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x1dc>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET) {
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c44:	2b40      	cmp	r3, #64	; 0x40
 8003c46:	d107      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x1dc>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
			HAL_TIM_TriggerCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f9c4 	bl	8003fe0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
		}
	}
	/* TIM commutation event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET) {
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	f003 0320 	and.w	r3, r3, #32
 8003c62:	2b20      	cmp	r3, #32
 8003c64:	d10e      	bne.n	8003c84 <HAL_TIM_IRQHandler+0x208>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET) {
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f003 0320 	and.w	r3, r3, #32
 8003c70:	2b20      	cmp	r3, #32
 8003c72:	d107      	bne.n	8003c84 <HAL_TIM_IRQHandler+0x208>
			__HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f06f 0220 	mvn.w	r2, #32
 8003c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
			HAL_TIMEx_CommutCallback(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 fd96 	bl	80047b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
		}
	}
}
 8003c84:	bf00      	nop
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <HAL_TIM_PWM_ConfigChannel>:
 *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
 *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
		TIM_OC_InitTypeDef *sConfig, uint32_t Channel) {
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
	assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
	assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
	assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

	/* Process Locked */
	__HAL_LOCK(htim);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d101      	bne.n	8003ca6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	e0ac      	b.n	8003e00 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b0c      	cmp	r3, #12
 8003cb2:	f200 809f 	bhi.w	8003df4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003cb6:	a201      	add	r2, pc, #4	; (adr r2, 8003cbc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cbc:	08003cf1 	.word	0x08003cf1
 8003cc0:	08003df5 	.word	0x08003df5
 8003cc4:	08003df5 	.word	0x08003df5
 8003cc8:	08003df5 	.word	0x08003df5
 8003ccc:	08003d31 	.word	0x08003d31
 8003cd0:	08003df5 	.word	0x08003df5
 8003cd4:	08003df5 	.word	0x08003df5
 8003cd8:	08003df5 	.word	0x08003df5
 8003cdc:	08003d73 	.word	0x08003d73
 8003ce0:	08003df5 	.word	0x08003df5
 8003ce4:	08003df5 	.word	0x08003df5
 8003ce8:	08003df5 	.word	0x08003df5
 8003cec:	08003db3 	.word	0x08003db3
	case TIM_CHANNEL_1: {
		/* Check the parameters */
		assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

		/* Configure the Channel 1 in PWM mode */
		TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68b9      	ldr	r1, [r7, #8]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 fa1c 	bl	8004134 <TIM_OC1_SetConfig>

		/* Set the Preload enable bit for channel1 */
		htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	699a      	ldr	r2, [r3, #24]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f042 0208 	orr.w	r2, r2, #8
 8003d0a:	619a      	str	r2, [r3, #24]

		/* Configure the Output Fast mode */
		htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699a      	ldr	r2, [r3, #24]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0204 	bic.w	r2, r2, #4
 8003d1a:	619a      	str	r2, [r3, #24]
		htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6999      	ldr	r1, [r3, #24]
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	691a      	ldr	r2, [r3, #16]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	619a      	str	r2, [r3, #24]
		break;
 8003d2e:	e062      	b.n	8003df6 <HAL_TIM_PWM_ConfigChannel+0x16a>
	case TIM_CHANNEL_2: {
		/* Check the parameters */
		assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

		/* Configure the Channel 2 in PWM mode */
		TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68b9      	ldr	r1, [r7, #8]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 fa6c 	bl	8004214 <TIM_OC2_SetConfig>

		/* Set the Preload enable bit for channel2 */
		htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699a      	ldr	r2, [r3, #24]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d4a:	619a      	str	r2, [r3, #24]

		/* Configure the Output Fast mode */
		htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699a      	ldr	r2, [r3, #24]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d5a:	619a      	str	r2, [r3, #24]
		htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6999      	ldr	r1, [r3, #24]
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	021a      	lsls	r2, r3, #8
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	619a      	str	r2, [r3, #24]
		break;
 8003d70:	e041      	b.n	8003df6 <HAL_TIM_PWM_ConfigChannel+0x16a>
	case TIM_CHANNEL_3: {
		/* Check the parameters */
		assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

		/* Configure the Channel 3 in PWM mode */
		TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68b9      	ldr	r1, [r7, #8]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f000 fac1 	bl	8004300 <TIM_OC3_SetConfig>

		/* Set the Preload enable bit for channel3 */
		htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	69da      	ldr	r2, [r3, #28]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f042 0208 	orr.w	r2, r2, #8
 8003d8c:	61da      	str	r2, [r3, #28]

		/* Configure the Output Fast mode */
		htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69da      	ldr	r2, [r3, #28]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0204 	bic.w	r2, r2, #4
 8003d9c:	61da      	str	r2, [r3, #28]
		htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	69d9      	ldr	r1, [r3, #28]
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	691a      	ldr	r2, [r3, #16]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	61da      	str	r2, [r3, #28]
		break;
 8003db0:	e021      	b.n	8003df6 <HAL_TIM_PWM_ConfigChannel+0x16a>
	case TIM_CHANNEL_4: {
		/* Check the parameters */
		assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

		/* Configure the Channel 4 in PWM mode */
		TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68b9      	ldr	r1, [r7, #8]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 fb15 	bl	80043e8 <TIM_OC4_SetConfig>

		/* Set the Preload enable bit for channel4 */
		htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	69da      	ldr	r2, [r3, #28]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dcc:	61da      	str	r2, [r3, #28]

		/* Configure the Output Fast mode */
		htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	69da      	ldr	r2, [r3, #28]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ddc:	61da      	str	r2, [r3, #28]
		htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69d9      	ldr	r1, [r3, #28]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	021a      	lsls	r2, r3, #8
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	61da      	str	r2, [r3, #28]
		break;
 8003df2:	e000      	b.n	8003df6 <HAL_TIM_PWM_ConfigChannel+0x16a>
	}

	default:
		break;
 8003df4:	bf00      	nop
	}

	__HAL_UNLOCK(htim);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <HAL_TIM_ConfigClockSource>:
 * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
 *         contains the clock source information for the TIM peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim,
		TIM_ClockConfigTypeDef *sClockSourceConfig) {
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
	uint32_t tmpsmcr;

	/* Process Locked */
	__HAL_LOCK(htim);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d101      	bne.n	8003e20 <HAL_TIM_ConfigClockSource+0x18>
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	e0b3      	b.n	8003f88 <HAL_TIM_ConfigClockSource+0x180>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	htim->State = HAL_TIM_STATE_BUSY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Check the parameters */
	assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

	/* Reset the SMS, TS, ECE, ETPS and ETRF bits */
	tmpsmcr = htim->Instance->SMCR;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	60fb      	str	r3, [r7, #12]
	tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e3e:	60fb      	str	r3, [r7, #12]
	tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e46:	60fb      	str	r3, [r7, #12]
	htim->Instance->SMCR = tmpsmcr;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	609a      	str	r2, [r3, #8]

	switch (sClockSourceConfig->ClockSource) {
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e58:	d03e      	beq.n	8003ed8 <HAL_TIM_ConfigClockSource+0xd0>
 8003e5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e5e:	f200 8087 	bhi.w	8003f70 <HAL_TIM_ConfigClockSource+0x168>
 8003e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e66:	f000 8085 	beq.w	8003f74 <HAL_TIM_ConfigClockSource+0x16c>
 8003e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e6e:	d87f      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x168>
 8003e70:	2b70      	cmp	r3, #112	; 0x70
 8003e72:	d01a      	beq.n	8003eaa <HAL_TIM_ConfigClockSource+0xa2>
 8003e74:	2b70      	cmp	r3, #112	; 0x70
 8003e76:	d87b      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x168>
 8003e78:	2b60      	cmp	r3, #96	; 0x60
 8003e7a:	d050      	beq.n	8003f1e <HAL_TIM_ConfigClockSource+0x116>
 8003e7c:	2b60      	cmp	r3, #96	; 0x60
 8003e7e:	d877      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x168>
 8003e80:	2b50      	cmp	r3, #80	; 0x50
 8003e82:	d03c      	beq.n	8003efe <HAL_TIM_ConfigClockSource+0xf6>
 8003e84:	2b50      	cmp	r3, #80	; 0x50
 8003e86:	d873      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x168>
 8003e88:	2b40      	cmp	r3, #64	; 0x40
 8003e8a:	d058      	beq.n	8003f3e <HAL_TIM_ConfigClockSource+0x136>
 8003e8c:	2b40      	cmp	r3, #64	; 0x40
 8003e8e:	d86f      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x168>
 8003e90:	2b30      	cmp	r3, #48	; 0x30
 8003e92:	d064      	beq.n	8003f5e <HAL_TIM_ConfigClockSource+0x156>
 8003e94:	2b30      	cmp	r3, #48	; 0x30
 8003e96:	d86b      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x168>
 8003e98:	2b20      	cmp	r3, #32
 8003e9a:	d060      	beq.n	8003f5e <HAL_TIM_ConfigClockSource+0x156>
 8003e9c:	2b20      	cmp	r3, #32
 8003e9e:	d867      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x168>
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d05c      	beq.n	8003f5e <HAL_TIM_ConfigClockSource+0x156>
 8003ea4:	2b10      	cmp	r3, #16
 8003ea6:	d05a      	beq.n	8003f5e <HAL_TIM_ConfigClockSource+0x156>
		TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
		break;
	}

	default:
		break;
 8003ea8:	e062      	b.n	8003f70 <HAL_TIM_ConfigClockSource+0x168>
		TIM_ETR_SetConfig(htim->Instance, sClockSourceConfig->ClockPrescaler,
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6818      	ldr	r0, [r3, #0]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	6899      	ldr	r1, [r3, #8]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685a      	ldr	r2, [r3, #4]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	f000 fb65 	bl	8004588 <TIM_ETR_SetConfig>
		tmpsmcr = htim->Instance->SMCR;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	60fb      	str	r3, [r7, #12]
		tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ecc:	60fb      	str	r3, [r7, #12]
		htim->Instance->SMCR = tmpsmcr;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	609a      	str	r2, [r3, #8]
		break;
 8003ed6:	e04e      	b.n	8003f76 <HAL_TIM_ConfigClockSource+0x16e>
		TIM_ETR_SetConfig(htim->Instance, sClockSourceConfig->ClockPrescaler,
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6818      	ldr	r0, [r3, #0]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	6899      	ldr	r1, [r3, #8]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	f000 fb4e 	bl	8004588 <TIM_ETR_SetConfig>
		htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003efa:	609a      	str	r2, [r3, #8]
		break;
 8003efc:	e03b      	b.n	8003f76 <HAL_TIM_ConfigClockSource+0x16e>
		TIM_TI1_ConfigInputStage(htim->Instance,
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6818      	ldr	r0, [r3, #0]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	6859      	ldr	r1, [r3, #4]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	f000 fac2 	bl	8004494 <TIM_TI1_ConfigInputStage>
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2150      	movs	r1, #80	; 0x50
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 fb1b 	bl	8004552 <TIM_ITRx_SetConfig>
		break;
 8003f1c:	e02b      	b.n	8003f76 <HAL_TIM_ConfigClockSource+0x16e>
		TIM_TI2_ConfigInputStage(htim->Instance,
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6818      	ldr	r0, [r3, #0]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	6859      	ldr	r1, [r3, #4]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	f000 fae1 	bl	80044f2 <TIM_TI2_ConfigInputStage>
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2160      	movs	r1, #96	; 0x60
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 fb0b 	bl	8004552 <TIM_ITRx_SetConfig>
		break;
 8003f3c:	e01b      	b.n	8003f76 <HAL_TIM_ConfigClockSource+0x16e>
		TIM_TI1_ConfigInputStage(htim->Instance,
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6818      	ldr	r0, [r3, #0]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	6859      	ldr	r1, [r3, #4]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	f000 faa2 	bl	8004494 <TIM_TI1_ConfigInputStage>
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2140      	movs	r1, #64	; 0x40
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 fafb 	bl	8004552 <TIM_ITRx_SetConfig>
		break;
 8003f5c:	e00b      	b.n	8003f76 <HAL_TIM_ConfigClockSource+0x16e>
		TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4619      	mov	r1, r3
 8003f68:	4610      	mov	r0, r2
 8003f6a:	f000 faf2 	bl	8004552 <TIM_ITRx_SetConfig>
		break;
 8003f6e:	e002      	b.n	8003f76 <HAL_TIM_ConfigClockSource+0x16e>
		break;
 8003f70:	bf00      	nop
 8003f72:	e000      	b.n	8003f76 <HAL_TIM_ConfigClockSource+0x16e>
		break;
 8003f74:	bf00      	nop
	}
	htim->State = HAL_TIM_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	__HAL_UNLOCK(htim);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_TIM_PeriodElapsedCallback>:
/**
 * @brief  Period elapsed callback in non-blocking mode
 * @param  htim TIM handle
 * @retval None
 */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
	 */
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_TIM_OC_DelayElapsedCallback>:
/**
 * @brief  Output Compare callback in non-blocking mode
 * @param  htim TIM OC handle
 * @retval None
 */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
	 */
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <HAL_TIM_IC_CaptureCallback>:
/**
 * @brief  Input Capture callback in non-blocking mode
 * @param  htim TIM IC handle
 * @retval None
 */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_TIM_IC_CaptureCallback could be implemented in the user file
	 */
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <HAL_TIM_PWM_PulseFinishedCallback>:
/**
 * @brief  PWM Pulse finished callback in non-blocking mode
 * @param  htim TIM handle
 * @retval None
 */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
	 */
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <HAL_TIM_TriggerCallback>:
/**
 * @brief  Hall Trigger detection callback in non-blocking mode
 * @param  htim TIM handle
 * @retval None
 */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim) {
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_TIM_TriggerCallback could be implemented in the user file
	 */
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <TIM_Base_SetConfig>:
 * @brief  Time Base configuration
 * @param  TIMx TIM peripheral
 * @param  Structure TIM Base configuration structure
 * @retval None
 */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure) {
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
	uint32_t tmpcr1;
	tmpcr1 = TIMx->CR1;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	60fb      	str	r3, [r7, #12]

	/* Set TIM Time Base Unit parameters ---------------------------------------*/
	if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx)) {
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a40      	ldr	r2, [pc, #256]	; (8004108 <TIM_Base_SetConfig+0x114>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d013      	beq.n	8004034 <TIM_Base_SetConfig+0x40>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004012:	d00f      	beq.n	8004034 <TIM_Base_SetConfig+0x40>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a3d      	ldr	r2, [pc, #244]	; (800410c <TIM_Base_SetConfig+0x118>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d00b      	beq.n	8004034 <TIM_Base_SetConfig+0x40>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a3c      	ldr	r2, [pc, #240]	; (8004110 <TIM_Base_SetConfig+0x11c>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d007      	beq.n	8004034 <TIM_Base_SetConfig+0x40>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a3b      	ldr	r2, [pc, #236]	; (8004114 <TIM_Base_SetConfig+0x120>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d003      	beq.n	8004034 <TIM_Base_SetConfig+0x40>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a3a      	ldr	r2, [pc, #232]	; (8004118 <TIM_Base_SetConfig+0x124>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d108      	bne.n	8004046 <TIM_Base_SetConfig+0x52>
		/* Select the Counter Mode */
		tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800403a:	60fb      	str	r3, [r7, #12]
		tmpcr1 |= Structure->CounterMode;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	4313      	orrs	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]
	}

	if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx)) {
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a2f      	ldr	r2, [pc, #188]	; (8004108 <TIM_Base_SetConfig+0x114>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d02b      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004054:	d027      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a2c      	ldr	r2, [pc, #176]	; (800410c <TIM_Base_SetConfig+0x118>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d023      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a2b      	ldr	r2, [pc, #172]	; (8004110 <TIM_Base_SetConfig+0x11c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d01f      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a2a      	ldr	r2, [pc, #168]	; (8004114 <TIM_Base_SetConfig+0x120>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d01b      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a29      	ldr	r2, [pc, #164]	; (8004118 <TIM_Base_SetConfig+0x124>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d017      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a28      	ldr	r2, [pc, #160]	; (800411c <TIM_Base_SetConfig+0x128>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d013      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a27      	ldr	r2, [pc, #156]	; (8004120 <TIM_Base_SetConfig+0x12c>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d00f      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a26      	ldr	r2, [pc, #152]	; (8004124 <TIM_Base_SetConfig+0x130>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d00b      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a25      	ldr	r2, [pc, #148]	; (8004128 <TIM_Base_SetConfig+0x134>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d007      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a24      	ldr	r2, [pc, #144]	; (800412c <TIM_Base_SetConfig+0x138>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d003      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a23      	ldr	r2, [pc, #140]	; (8004130 <TIM_Base_SetConfig+0x13c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d108      	bne.n	80040b8 <TIM_Base_SetConfig+0xc4>
		/* Set the clock division */
		tmpcr1 &= ~TIM_CR1_CKD;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ac:	60fb      	str	r3, [r7, #12]
		tmpcr1 |= (uint32_t) Structure->ClockDivision;
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	60fb      	str	r3, [r7, #12]
	}

	/* Set the auto-reload preload */
	MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]

	TIMx->CR1 = tmpcr1;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	601a      	str	r2, [r3, #0]

	/* Set the Autoreload value */
	TIMx->ARR = (uint32_t) Structure->Period;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Set the Prescaler value */
	TIMx->PSC = Structure->Prescaler;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	629a      	str	r2, [r3, #40]	; 0x28

	if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx)) {
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a0a      	ldr	r2, [pc, #40]	; (8004108 <TIM_Base_SetConfig+0x114>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d003      	beq.n	80040ec <TIM_Base_SetConfig+0xf8>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a0c      	ldr	r2, [pc, #48]	; (8004118 <TIM_Base_SetConfig+0x124>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d103      	bne.n	80040f4 <TIM_Base_SetConfig+0x100>
		/* Set the Repetition Counter value */
		TIMx->RCR = Structure->RepetitionCounter;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	691a      	ldr	r2, [r3, #16]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	631a      	str	r2, [r3, #48]	; 0x30
	}

	/* Generate an update event to reload the Prescaler
	 and the repetition counter (only for advanced timer) value immediately */
	TIMx->EGR = TIM_EGR_UG;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	615a      	str	r2, [r3, #20]
}
 80040fa:	bf00      	nop
 80040fc:	3714      	adds	r7, #20
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	40010000 	.word	0x40010000
 800410c:	40000400 	.word	0x40000400
 8004110:	40000800 	.word	0x40000800
 8004114:	40000c00 	.word	0x40000c00
 8004118:	40010400 	.word	0x40010400
 800411c:	40014000 	.word	0x40014000
 8004120:	40014400 	.word	0x40014400
 8004124:	40014800 	.word	0x40014800
 8004128:	40001800 	.word	0x40001800
 800412c:	40001c00 	.word	0x40001c00
 8004130:	40002000 	.word	0x40002000

08004134 <TIM_OC1_SetConfig>:
 * @brief  Timer Output Compare 1 configuration
 * @param  TIMx to select the TIM peripheral
 * @param  OC_Config The output configuration structure
 * @retval None
 */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config) {
 8004134:	b480      	push	{r7}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
	uint32_t tmpccmrx;
	uint32_t tmpccer;
	uint32_t tmpcr2;

	/* Disable the Channel 1: Reset the CC1E Bit */
	TIMx->CCER &= ~TIM_CCER_CC1E;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	f023 0201 	bic.w	r2, r3, #1
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	621a      	str	r2, [r3, #32]

	/* Get the TIMx CCER register value */
	tmpccer = TIMx->CCER;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	617b      	str	r3, [r7, #20]
	/* Get the TIMx CR2 register value */
	tmpcr2 = TIMx->CR2;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	613b      	str	r3, [r7, #16]

	/* Get the TIMx CCMR1 register value */
	tmpccmrx = TIMx->CCMR1;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Compare Mode Bits */
	tmpccmrx &= ~TIM_CCMR1_OC1M;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004162:	60fb      	str	r3, [r7, #12]
	tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f023 0303 	bic.w	r3, r3, #3
 800416a:	60fb      	str	r3, [r7, #12]
	/* Select the Output Compare Mode */
	tmpccmrx |= OC_Config->OCMode;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	4313      	orrs	r3, r2
 8004174:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Polarity level */
	tmpccer &= ~TIM_CCER_CC1P;
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f023 0302 	bic.w	r3, r3, #2
 800417c:	617b      	str	r3, [r7, #20]
	/* Set the Output Compare Polarity */
	tmpccer |= OC_Config->OCPolarity;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	4313      	orrs	r3, r2
 8004186:	617b      	str	r3, [r7, #20]

	if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1)) {
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a20      	ldr	r2, [pc, #128]	; (800420c <TIM_OC1_SetConfig+0xd8>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d003      	beq.n	8004198 <TIM_OC1_SetConfig+0x64>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a1f      	ldr	r2, [pc, #124]	; (8004210 <TIM_OC1_SetConfig+0xdc>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d10c      	bne.n	80041b2 <TIM_OC1_SetConfig+0x7e>
		/* Check parameters */
		assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

		/* Reset the Output N Polarity level */
		tmpccer &= ~TIM_CCER_CC1NP;
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f023 0308 	bic.w	r3, r3, #8
 800419e:	617b      	str	r3, [r7, #20]
		/* Set the Output N Polarity */
		tmpccer |= OC_Config->OCNPolarity;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	617b      	str	r3, [r7, #20]
		/* Reset the Output N State */
		tmpccer &= ~TIM_CCER_CC1NE;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f023 0304 	bic.w	r3, r3, #4
 80041b0:	617b      	str	r3, [r7, #20]
	}

	if (IS_TIM_BREAK_INSTANCE(TIMx)) {
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a15      	ldr	r2, [pc, #84]	; (800420c <TIM_OC1_SetConfig+0xd8>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d003      	beq.n	80041c2 <TIM_OC1_SetConfig+0x8e>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a14      	ldr	r2, [pc, #80]	; (8004210 <TIM_OC1_SetConfig+0xdc>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d111      	bne.n	80041e6 <TIM_OC1_SetConfig+0xb2>
		/* Check parameters */
		assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
		assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

		/* Reset the Output Compare and Output Compare N IDLE State */
		tmpcr2 &= ~TIM_CR2_OIS1;
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041c8:	613b      	str	r3, [r7, #16]
		tmpcr2 &= ~TIM_CR2_OIS1N;
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041d0:	613b      	str	r3, [r7, #16]
		/* Set the Output Idle state */
		tmpcr2 |= OC_Config->OCIdleState;
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	4313      	orrs	r3, r2
 80041da:	613b      	str	r3, [r7, #16]
		/* Set the Output N Idle state */
		tmpcr2 |= OC_Config->OCNIdleState;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]
	}

	/* Write to TIMx CR2 */
	TIMx->CR2 = tmpcr2;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	605a      	str	r2, [r3, #4]

	/* Write to TIMx CCMR1 */
	TIMx->CCMR1 = tmpccmrx;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	619a      	str	r2, [r3, #24]

	/* Set the Capture Compare Register value */
	TIMx->CCR1 = OC_Config->Pulse;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	635a      	str	r2, [r3, #52]	; 0x34

	/* Write to TIMx CCER */
	TIMx->CCER = tmpccer;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	621a      	str	r2, [r3, #32]
}
 8004200:	bf00      	nop
 8004202:	371c      	adds	r7, #28
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr
 800420c:	40010000 	.word	0x40010000
 8004210:	40010400 	.word	0x40010400

08004214 <TIM_OC2_SetConfig>:
 * @brief  Timer Output Compare 2 configuration
 * @param  TIMx to select the TIM peripheral
 * @param  OC_Config The output configuration structure
 * @retval None
 */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config) {
 8004214:	b480      	push	{r7}
 8004216:	b087      	sub	sp, #28
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
	uint32_t tmpccmrx;
	uint32_t tmpccer;
	uint32_t tmpcr2;

	/* Disable the Channel 2: Reset the CC2E Bit */
	TIMx->CCER &= ~TIM_CCER_CC2E;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	f023 0210 	bic.w	r2, r3, #16
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	621a      	str	r2, [r3, #32]

	/* Get the TIMx CCER register value */
	tmpccer = TIMx->CCER;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	617b      	str	r3, [r7, #20]
	/* Get the TIMx CR2 register value */
	tmpcr2 = TIMx->CR2;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	613b      	str	r3, [r7, #16]

	/* Get the TIMx CCMR1 register value */
	tmpccmrx = TIMx->CCMR1;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Compare mode and Capture/Compare selection Bits */
	tmpccmrx &= ~TIM_CCMR1_OC2M;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004242:	60fb      	str	r3, [r7, #12]
	tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800424a:	60fb      	str	r3, [r7, #12]

	/* Select the Output Compare Mode */
	tmpccmrx |= (OC_Config->OCMode << 8U);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	021b      	lsls	r3, r3, #8
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	4313      	orrs	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Polarity level */
	tmpccer &= ~TIM_CCER_CC2P;
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	f023 0320 	bic.w	r3, r3, #32
 800425e:	617b      	str	r3, [r7, #20]
	/* Set the Output Compare Polarity */
	tmpccer |= (OC_Config->OCPolarity << 4U);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	4313      	orrs	r3, r2
 800426a:	617b      	str	r3, [r7, #20]

	if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2)) {
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a22      	ldr	r2, [pc, #136]	; (80042f8 <TIM_OC2_SetConfig+0xe4>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d003      	beq.n	800427c <TIM_OC2_SetConfig+0x68>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a21      	ldr	r2, [pc, #132]	; (80042fc <TIM_OC2_SetConfig+0xe8>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d10d      	bne.n	8004298 <TIM_OC2_SetConfig+0x84>
		assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

		/* Reset the Output N Polarity level */
		tmpccer &= ~TIM_CCER_CC2NP;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004282:	617b      	str	r3, [r7, #20]
		/* Set the Output N Polarity */
		tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	4313      	orrs	r3, r2
 800428e:	617b      	str	r3, [r7, #20]
		/* Reset the Output N State */
		tmpccer &= ~TIM_CCER_CC2NE;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004296:	617b      	str	r3, [r7, #20]

	}

	if (IS_TIM_BREAK_INSTANCE(TIMx)) {
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a17      	ldr	r2, [pc, #92]	; (80042f8 <TIM_OC2_SetConfig+0xe4>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d003      	beq.n	80042a8 <TIM_OC2_SetConfig+0x94>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a16      	ldr	r2, [pc, #88]	; (80042fc <TIM_OC2_SetConfig+0xe8>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d113      	bne.n	80042d0 <TIM_OC2_SetConfig+0xbc>
		/* Check parameters */
		assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
		assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

		/* Reset the Output Compare and Output Compare N IDLE State */
		tmpcr2 &= ~TIM_CR2_OIS2;
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042ae:	613b      	str	r3, [r7, #16]
		tmpcr2 &= ~TIM_CR2_OIS2N;
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042b6:	613b      	str	r3, [r7, #16]
		/* Set the Output Idle state */
		tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	613b      	str	r3, [r7, #16]
		/* Set the Output N Idle state */
		tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	613b      	str	r3, [r7, #16]
	}

	/* Write to TIMx CR2 */
	TIMx->CR2 = tmpcr2;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	605a      	str	r2, [r3, #4]

	/* Write to TIMx CCMR1 */
	TIMx->CCMR1 = tmpccmrx;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	619a      	str	r2, [r3, #24]

	/* Set the Capture Compare Register value */
	TIMx->CCR2 = OC_Config->Pulse;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	639a      	str	r2, [r3, #56]	; 0x38

	/* Write to TIMx CCER */
	TIMx->CCER = tmpccer;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	621a      	str	r2, [r3, #32]
}
 80042ea:	bf00      	nop
 80042ec:	371c      	adds	r7, #28
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	40010000 	.word	0x40010000
 80042fc:	40010400 	.word	0x40010400

08004300 <TIM_OC3_SetConfig>:
 * @brief  Timer Output Compare 3 configuration
 * @param  TIMx to select the TIM peripheral
 * @param  OC_Config The output configuration structure
 * @retval None
 */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config) {
 8004300:	b480      	push	{r7}
 8004302:	b087      	sub	sp, #28
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
	uint32_t tmpccmrx;
	uint32_t tmpccer;
	uint32_t tmpcr2;

	/* Disable the Channel 3: Reset the CC2E Bit */
	TIMx->CCER &= ~TIM_CCER_CC3E;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	621a      	str	r2, [r3, #32]

	/* Get the TIMx CCER register value */
	tmpccer = TIMx->CCER;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	617b      	str	r3, [r7, #20]
	/* Get the TIMx CR2 register value */
	tmpcr2 = TIMx->CR2;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	613b      	str	r3, [r7, #16]

	/* Get the TIMx CCMR2 register value */
	tmpccmrx = TIMx->CCMR2;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Compare mode and Capture/Compare selection Bits */
	tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800432e:	60fb      	str	r3, [r7, #12]
	tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f023 0303 	bic.w	r3, r3, #3
 8004336:	60fb      	str	r3, [r7, #12]
	/* Select the Output Compare Mode */
	tmpccmrx |= OC_Config->OCMode;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	4313      	orrs	r3, r2
 8004340:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Polarity level */
	tmpccer &= ~TIM_CCER_CC3P;
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004348:	617b      	str	r3, [r7, #20]
	/* Set the Output Compare Polarity */
	tmpccer |= (OC_Config->OCPolarity << 8U);
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	021b      	lsls	r3, r3, #8
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	4313      	orrs	r3, r2
 8004354:	617b      	str	r3, [r7, #20]

	if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3)) {
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a21      	ldr	r2, [pc, #132]	; (80043e0 <TIM_OC3_SetConfig+0xe0>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d003      	beq.n	8004366 <TIM_OC3_SetConfig+0x66>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a20      	ldr	r2, [pc, #128]	; (80043e4 <TIM_OC3_SetConfig+0xe4>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d10d      	bne.n	8004382 <TIM_OC3_SetConfig+0x82>
		assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

		/* Reset the Output N Polarity level */
		tmpccer &= ~TIM_CCER_CC3NP;
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800436c:	617b      	str	r3, [r7, #20]
		/* Set the Output N Polarity */
		tmpccer |= (OC_Config->OCNPolarity << 8U);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	021b      	lsls	r3, r3, #8
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	4313      	orrs	r3, r2
 8004378:	617b      	str	r3, [r7, #20]
		/* Reset the Output N State */
		tmpccer &= ~TIM_CCER_CC3NE;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004380:	617b      	str	r3, [r7, #20]
	}

	if (IS_TIM_BREAK_INSTANCE(TIMx)) {
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a16      	ldr	r2, [pc, #88]	; (80043e0 <TIM_OC3_SetConfig+0xe0>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d003      	beq.n	8004392 <TIM_OC3_SetConfig+0x92>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a15      	ldr	r2, [pc, #84]	; (80043e4 <TIM_OC3_SetConfig+0xe4>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d113      	bne.n	80043ba <TIM_OC3_SetConfig+0xba>
		/* Check parameters */
		assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
		assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

		/* Reset the Output Compare and Output Compare N IDLE State */
		tmpcr2 &= ~TIM_CR2_OIS3;
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004398:	613b      	str	r3, [r7, #16]
		tmpcr2 &= ~TIM_CR2_OIS3N;
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043a0:	613b      	str	r3, [r7, #16]
		/* Set the Output Idle state */
		tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	011b      	lsls	r3, r3, #4
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	613b      	str	r3, [r7, #16]
		/* Set the Output N Idle state */
		tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	613b      	str	r3, [r7, #16]
	}

	/* Write to TIMx CR2 */
	TIMx->CR2 = tmpcr2;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	605a      	str	r2, [r3, #4]

	/* Write to TIMx CCMR2 */
	TIMx->CCMR2 = tmpccmrx;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	61da      	str	r2, [r3, #28]

	/* Set the Capture Compare Register value */
	TIMx->CCR3 = OC_Config->Pulse;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685a      	ldr	r2, [r3, #4]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	63da      	str	r2, [r3, #60]	; 0x3c

	/* Write to TIMx CCER */
	TIMx->CCER = tmpccer;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	621a      	str	r2, [r3, #32]
}
 80043d4:	bf00      	nop
 80043d6:	371c      	adds	r7, #28
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr
 80043e0:	40010000 	.word	0x40010000
 80043e4:	40010400 	.word	0x40010400

080043e8 <TIM_OC4_SetConfig>:
 * @brief  Timer Output Compare 4 configuration
 * @param  TIMx to select the TIM peripheral
 * @param  OC_Config The output configuration structure
 * @retval None
 */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config) {
 80043e8:	b480      	push	{r7}
 80043ea:	b087      	sub	sp, #28
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
	uint32_t tmpccmrx;
	uint32_t tmpccer;
	uint32_t tmpcr2;

	/* Disable the Channel 4: Reset the CC4E Bit */
	TIMx->CCER &= ~TIM_CCER_CC4E;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	621a      	str	r2, [r3, #32]

	/* Get the TIMx CCER register value */
	tmpccer = TIMx->CCER;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	613b      	str	r3, [r7, #16]
	/* Get the TIMx CR2 register value */
	tmpcr2 = TIMx->CR2;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	617b      	str	r3, [r7, #20]

	/* Get the TIMx CCMR2 register value */
	tmpccmrx = TIMx->CCMR2;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Compare mode and Capture/Compare selection Bits */
	tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004416:	60fb      	str	r3, [r7, #12]
	tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800441e:	60fb      	str	r3, [r7, #12]

	/* Select the Output Compare Mode */
	tmpccmrx |= (OC_Config->OCMode << 8U);
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	021b      	lsls	r3, r3, #8
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	4313      	orrs	r3, r2
 800442a:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Polarity level */
	tmpccer &= ~TIM_CCER_CC4P;
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004432:	613b      	str	r3, [r7, #16]
	/* Set the Output Compare Polarity */
	tmpccer |= (OC_Config->OCPolarity << 12U);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	031b      	lsls	r3, r3, #12
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	4313      	orrs	r3, r2
 800443e:	613b      	str	r3, [r7, #16]

	if (IS_TIM_BREAK_INSTANCE(TIMx)) {
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a12      	ldr	r2, [pc, #72]	; (800448c <TIM_OC4_SetConfig+0xa4>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d003      	beq.n	8004450 <TIM_OC4_SetConfig+0x68>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a11      	ldr	r2, [pc, #68]	; (8004490 <TIM_OC4_SetConfig+0xa8>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d109      	bne.n	8004464 <TIM_OC4_SetConfig+0x7c>
		/* Check parameters */
		assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

		/* Reset the Output Compare IDLE State */
		tmpcr2 &= ~TIM_CR2_OIS4;
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004456:	617b      	str	r3, [r7, #20]

		/* Set the Output Idle state */
		tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	019b      	lsls	r3, r3, #6
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	4313      	orrs	r3, r2
 8004462:	617b      	str	r3, [r7, #20]
	}

	/* Write to TIMx CR2 */
	TIMx->CR2 = tmpcr2;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	605a      	str	r2, [r3, #4]

	/* Write to TIMx CCMR2 */
	TIMx->CCMR2 = tmpccmrx;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	61da      	str	r2, [r3, #28]

	/* Set the Capture Compare Register value */
	TIMx->CCR4 = OC_Config->Pulse;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	641a      	str	r2, [r3, #64]	; 0x40

	/* Write to TIMx CCER */
	TIMx->CCER = tmpccer;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	621a      	str	r2, [r3, #32]
}
 800447e:	bf00      	nop
 8004480:	371c      	adds	r7, #28
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	40010000 	.word	0x40010000
 8004490:	40010400 	.word	0x40010400

08004494 <TIM_TI1_ConfigInputStage>:
 * @param  TIM_ICFilter Specifies the Input Capture Filter.
 *          This parameter must be a value between 0x00 and 0x0F.
 * @retval None
 */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity,
		uint32_t TIM_ICFilter) {
 8004494:	b480      	push	{r7}
 8004496:	b087      	sub	sp, #28
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
	uint32_t tmpccmr1;
	uint32_t tmpccer;

	/* Disable the Channel 1: Reset the CC1E Bit */
	tmpccer = TIMx->CCER;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	617b      	str	r3, [r7, #20]
	TIMx->CCER &= ~TIM_CCER_CC1E;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	f023 0201 	bic.w	r2, r3, #1
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	621a      	str	r2, [r3, #32]
	tmpccmr1 = TIMx->CCMR1;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	613b      	str	r3, [r7, #16]

	/* Set the filter */
	tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044be:	613b      	str	r3, [r7, #16]
	tmpccmr1 |= (TIM_ICFilter << 4U);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	011b      	lsls	r3, r3, #4
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	613b      	str	r3, [r7, #16]

	/* Select the Polarity and set the CC1E Bit */
	tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	f023 030a 	bic.w	r3, r3, #10
 80044d0:	617b      	str	r3, [r7, #20]
	tmpccer |= TIM_ICPolarity;
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	617b      	str	r3, [r7, #20]

	/* Write to TIMx CCMR1 and CCER registers */
	TIMx->CCMR1 = tmpccmr1;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	619a      	str	r2, [r3, #24]
	TIMx->CCER = tmpccer;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	621a      	str	r2, [r3, #32]
}
 80044e6:	bf00      	nop
 80044e8:	371c      	adds	r7, #28
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <TIM_TI2_ConfigInputStage>:
 * @param  TIM_ICFilter Specifies the Input Capture Filter.
 *          This parameter must be a value between 0x00 and 0x0F.
 * @retval None
 */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity,
		uint32_t TIM_ICFilter) {
 80044f2:	b480      	push	{r7}
 80044f4:	b087      	sub	sp, #28
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	60f8      	str	r0, [r7, #12]
 80044fa:	60b9      	str	r1, [r7, #8]
 80044fc:	607a      	str	r2, [r7, #4]
	uint32_t tmpccmr1;
	uint32_t tmpccer;

	/* Disable the Channel 2: Reset the CC2E Bit */
	TIMx->CCER &= ~TIM_CCER_CC2E;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	f023 0210 	bic.w	r2, r3, #16
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	621a      	str	r2, [r3, #32]
	tmpccmr1 = TIMx->CCMR1;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	617b      	str	r3, [r7, #20]
	tmpccer = TIMx->CCER;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	613b      	str	r3, [r7, #16]

	/* Set the filter */
	tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800451c:	617b      	str	r3, [r7, #20]
	tmpccmr1 |= (TIM_ICFilter << 12U);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	031b      	lsls	r3, r3, #12
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	4313      	orrs	r3, r2
 8004526:	617b      	str	r3, [r7, #20]

	/* Select the Polarity and set the CC2E Bit */
	tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800452e:	613b      	str	r3, [r7, #16]
	tmpccer |= (TIM_ICPolarity << 4U);
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	011b      	lsls	r3, r3, #4
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	4313      	orrs	r3, r2
 8004538:	613b      	str	r3, [r7, #16]

	/* Write to TIMx CCMR1 and CCER registers */
	TIMx->CCMR1 = tmpccmr1;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	619a      	str	r2, [r3, #24]
	TIMx->CCER = tmpccer;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	621a      	str	r2, [r3, #32]
}
 8004546:	bf00      	nop
 8004548:	371c      	adds	r7, #28
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr

08004552 <TIM_ITRx_SetConfig>:
 *            @arg TIM_TS_TI1FP1: Filtered Timer Input 1
 *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
 *            @arg TIM_TS_ETRF: External Trigger input
 * @retval None
 */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource) {
 8004552:	b480      	push	{r7}
 8004554:	b085      	sub	sp, #20
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
 800455a:	6039      	str	r1, [r7, #0]
	uint32_t tmpsmcr;

	/* Get the TIMx SMCR register value */
	tmpsmcr = TIMx->SMCR;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	60fb      	str	r3, [r7, #12]
	/* Reset the TS Bits */
	tmpsmcr &= ~TIM_SMCR_TS;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004568:	60fb      	str	r3, [r7, #12]
	/* Set the Input Trigger source and the slave mode*/
	tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4313      	orrs	r3, r2
 8004570:	f043 0307 	orr.w	r3, r3, #7
 8004574:	60fb      	str	r3, [r7, #12]
	/* Write to TIMx SMCR */
	TIMx->SMCR = tmpsmcr;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	609a      	str	r2, [r3, #8]
}
 800457c:	bf00      	nop
 800457e:	3714      	adds	r7, #20
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <TIM_ETR_SetConfig>:
 * @param  ExtTRGFilter External Trigger Filter.
 *          This parameter must be a value between 0x00 and 0x0F
 * @retval None
 */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
		uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter) {
 8004588:	b480      	push	{r7}
 800458a:	b087      	sub	sp, #28
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
 8004594:	603b      	str	r3, [r7, #0]
	uint32_t tmpsmcr;

	tmpsmcr = TIMx->SMCR;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	617b      	str	r3, [r7, #20]

	/* Reset the ETR Bits */
	tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045a2:	617b      	str	r3, [r7, #20]

	/* Set the Prescaler, the Filter value and the Polarity */
	tmpsmcr |= (uint32_t) (TIM_ExtTRGPrescaler
			| (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	021a      	lsls	r2, r3, #8
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	431a      	orrs	r2, r3
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	4313      	orrs	r3, r2
	tmpsmcr |= (uint32_t) (TIM_ExtTRGPrescaler
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	617b      	str	r3, [r7, #20]

	/* Write to TIMx SMCR */
	TIMx->SMCR = tmpsmcr;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	609a      	str	r2, [r3, #8]
}
 80045bc:	bf00      	nop
 80045be:	371c      	adds	r7, #28
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <TIM_CCxChannelCmd>:
 * @param  ChannelState specifies the TIM Channel CCxE bit new state.
 *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
 * @retval None
 */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel,
		uint32_t ChannelState) {
 80045c8:	b480      	push	{r7}
 80045ca:	b087      	sub	sp, #28
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]

	/* Check the parameters */
	assert_param(IS_TIM_CC1_INSTANCE(TIMx));
	assert_param(IS_TIM_CHANNELS(Channel));

	tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	f003 031f 	and.w	r3, r3, #31
 80045da:	2201      	movs	r2, #1
 80045dc:	fa02 f303 	lsl.w	r3, r2, r3
 80045e0:	617b      	str	r3, [r7, #20]

	/* Reset the CCxE Bit */
	TIMx->CCER &= ~tmp;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6a1a      	ldr	r2, [r3, #32]
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	43db      	mvns	r3, r3
 80045ea:	401a      	ands	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	621a      	str	r2, [r3, #32]

	/* Set or reset the CCxE Bit */
	TIMx->CCER |= (uint32_t) (ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6a1a      	ldr	r2, [r3, #32]
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	f003 031f 	and.w	r3, r3, #31
 80045fa:	6879      	ldr	r1, [r7, #4]
 80045fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004600:	431a      	orrs	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	621a      	str	r2, [r3, #32]
}
 8004606:	bf00      	nop
 8004608:	371c      	adds	r7, #28
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
	...

08004614 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004624:	2b01      	cmp	r3, #1
 8004626:	d101      	bne.n	800462c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004628:	2302      	movs	r3, #2
 800462a:	e05a      	b.n	80046e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2202      	movs	r2, #2
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004652:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	4313      	orrs	r3, r2
 800465c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a21      	ldr	r2, [pc, #132]	; (80046f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d022      	beq.n	80046b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004678:	d01d      	beq.n	80046b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a1d      	ldr	r2, [pc, #116]	; (80046f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d018      	beq.n	80046b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a1b      	ldr	r2, [pc, #108]	; (80046f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d013      	beq.n	80046b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a1a      	ldr	r2, [pc, #104]	; (80046fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d00e      	beq.n	80046b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a18      	ldr	r2, [pc, #96]	; (8004700 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d009      	beq.n	80046b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a17      	ldr	r2, [pc, #92]	; (8004704 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d004      	beq.n	80046b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a15      	ldr	r2, [pc, #84]	; (8004708 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d10c      	bne.n	80046d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3714      	adds	r7, #20
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	40010000 	.word	0x40010000
 80046f4:	40000400 	.word	0x40000400
 80046f8:	40000800 	.word	0x40000800
 80046fc:	40000c00 	.word	0x40000c00
 8004700:	40010400 	.word	0x40010400
 8004704:	40014000 	.word	0x40014000
 8004708:	40001800 	.word	0x40001800

0800470c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004716:	2300      	movs	r3, #0
 8004718:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004720:	2b01      	cmp	r3, #1
 8004722:	d101      	bne.n	8004728 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004724:	2302      	movs	r3, #2
 8004726:	e03d      	b.n	80047a4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	4313      	orrs	r3, r2
 800473c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	4313      	orrs	r3, r2
 800474a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	4313      	orrs	r3, r2
 8004758:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4313      	orrs	r3, r2
 8004766:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	4313      	orrs	r3, r2
 8004774:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	4313      	orrs	r3, r2
 8004782:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	4313      	orrs	r3, r2
 8004790:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_UART_Init>:
 *         the UART_InitTypeDef and create the associated handle.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart) {
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
	/* Check the UART handle allocation */
	if (huart == NULL) {
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_UART_Init+0x12>
		return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e03f      	b.n	800486a <HAL_UART_Init+0x92>
		assert_param(IS_UART_INSTANCE(huart->Instance));
	}
	assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
	assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

	if (huart->gState == HAL_UART_STATE_RESET) {
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d106      	bne.n	8004804 <HAL_UART_Init+0x2c>
		/* Allocate lock resource and initialize it */
		huart->Lock = HAL_UNLOCKED;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
		/* Init the low level hardware : GPIO, CLOCK */
		HAL_UART_MspInit(huart);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f001 fcda 	bl	80061b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
	}

	huart->gState = HAL_UART_STATE_BUSY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2224      	movs	r2, #36	; 0x24
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Disable the peripheral */
	__HAL_UART_DISABLE(huart);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68da      	ldr	r2, [r3, #12]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800481a:	60da      	str	r2, [r3, #12]

	/* Set the UART Communication parameters */
	UART_SetConfig(huart);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 f9a7 	bl	8004b70 <UART_SetConfig>

	/* In asynchronous mode, the following bits must be kept cleared:
	 - LINEN and CLKEN bits in the USART_CR2 register,
	 - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
	CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	691a      	ldr	r2, [r3, #16]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004830:	611a      	str	r2, [r3, #16]
	CLEAR_BIT(huart->Instance->CR3,
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	695a      	ldr	r2, [r3, #20]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004840:	615a      	str	r2, [r3, #20]
			(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));

	/* Enable the peripheral */
	__HAL_UART_ENABLE(huart);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68da      	ldr	r2, [r3, #12]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004850:	60da      	str	r2, [r3, #12]

	/* Initialize the UART state */
	huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	641a      	str	r2, [r3, #64]	; 0x40
	huart->gState = HAL_UART_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2220      	movs	r2, #32
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	huart->RxState = HAL_UART_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2220      	movs	r2, #32
 8004864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

	return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3708      	adds	r7, #8
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <HAL_UART_Transmit>:
 * @param  Size  Amount of data elements (u8 or u16) to be sent
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData,
		uint16_t Size, uint32_t Timeout) {
 8004872:	b580      	push	{r7, lr}
 8004874:	b08a      	sub	sp, #40	; 0x28
 8004876:	af02      	add	r7, sp, #8
 8004878:	60f8      	str	r0, [r7, #12]
 800487a:	60b9      	str	r1, [r7, #8]
 800487c:	603b      	str	r3, [r7, #0]
 800487e:	4613      	mov	r3, r2
 8004880:	80fb      	strh	r3, [r7, #6]
	uint8_t *pdata8bits;
	uint16_t *pdata16bits;
	uint32_t tickstart = 0U;
 8004882:	2300      	movs	r3, #0
 8004884:	617b      	str	r3, [r7, #20]

	/* Check that a Tx process is not already ongoing */
	if (huart->gState == HAL_UART_STATE_READY) {
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b20      	cmp	r3, #32
 8004890:	d17c      	bne.n	800498c <HAL_UART_Transmit+0x11a>
		if ((pData == NULL) || (Size == 0U)) {
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d002      	beq.n	800489e <HAL_UART_Transmit+0x2c>
 8004898:	88fb      	ldrh	r3, [r7, #6]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <HAL_UART_Transmit+0x30>
			return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e075      	b.n	800498e <HAL_UART_Transmit+0x11c>
		}

		/* Process Locked */
		__HAL_LOCK(huart);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d101      	bne.n	80048b0 <HAL_UART_Transmit+0x3e>
 80048ac:	2302      	movs	r3, #2
 80048ae:	e06e      	b.n	800498e <HAL_UART_Transmit+0x11c>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	641a      	str	r2, [r3, #64]	; 0x40
		huart->gState = HAL_UART_STATE_BUSY_TX;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2221      	movs	r2, #33	; 0x21
 80048c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

		/* Init tickstart for timeout management */
		tickstart = HAL_GetTick();
 80048c6:	f7fc fb91 	bl	8000fec <HAL_GetTick>
 80048ca:	6178      	str	r0, [r7, #20]

		huart->TxXferSize = Size;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	88fa      	ldrh	r2, [r7, #6]
 80048d0:	849a      	strh	r2, [r3, #36]	; 0x24
		huart->TxXferCount = Size;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	88fa      	ldrh	r2, [r7, #6]
 80048d6:	84da      	strh	r2, [r3, #38]	; 0x26

		/* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
		if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048e0:	d108      	bne.n	80048f4 <HAL_UART_Transmit+0x82>
				&& (huart->Init.Parity == UART_PARITY_NONE)) {
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d104      	bne.n	80048f4 <HAL_UART_Transmit+0x82>
			pdata8bits = NULL;
 80048ea:	2300      	movs	r3, #0
 80048ec:	61fb      	str	r3, [r7, #28]
			pdata16bits = (uint16_t*) pData;
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	61bb      	str	r3, [r7, #24]
 80048f2:	e003      	b.n	80048fc <HAL_UART_Transmit+0x8a>
		} else {
			pdata8bits = pData;
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	61fb      	str	r3, [r7, #28]
			pdata16bits = NULL;
 80048f8:	2300      	movs	r3, #0
 80048fa:	61bb      	str	r3, [r7, #24]
		}

		/* Process Unlocked */
		__HAL_UNLOCK(huart);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		while (huart->TxXferCount > 0U) {
 8004904:	e02a      	b.n	800495c <HAL_UART_Transmit+0xea>
			if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET,
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	2200      	movs	r2, #0
 800490e:	2180      	movs	r1, #128	; 0x80
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f000 f8e2 	bl	8004ada <UART_WaitOnFlagUntilTimeout>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d001      	beq.n	8004920 <HAL_UART_Transmit+0xae>
					tickstart, Timeout) != HAL_OK) {
				return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e036      	b.n	800498e <HAL_UART_Transmit+0x11c>
			}
			if (pdata8bits == NULL) {
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10b      	bne.n	800493e <HAL_UART_Transmit+0xcc>
				huart->Instance->DR = (uint16_t) (*pdata16bits & 0x01FFU);
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	881b      	ldrh	r3, [r3, #0]
 800492a:	461a      	mov	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004934:	605a      	str	r2, [r3, #4]
				pdata16bits++;
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	3302      	adds	r3, #2
 800493a:	61bb      	str	r3, [r7, #24]
 800493c:	e007      	b.n	800494e <HAL_UART_Transmit+0xdc>
			} else {
				huart->Instance->DR = (uint8_t) (*pdata8bits & 0xFFU);
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	781a      	ldrb	r2, [r3, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	605a      	str	r2, [r3, #4]
				pdata8bits++;
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	3301      	adds	r3, #1
 800494c:	61fb      	str	r3, [r7, #28]
			}
			huart->TxXferCount--;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004952:	b29b      	uxth	r3, r3
 8004954:	3b01      	subs	r3, #1
 8004956:	b29a      	uxth	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	84da      	strh	r2, [r3, #38]	; 0x26
		while (huart->TxXferCount > 0U) {
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004960:	b29b      	uxth	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1cf      	bne.n	8004906 <HAL_UART_Transmit+0x94>
		}

		if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart,
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2200      	movs	r2, #0
 800496e:	2140      	movs	r1, #64	; 0x40
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 f8b2 	bl	8004ada <UART_WaitOnFlagUntilTimeout>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <HAL_UART_Transmit+0x10e>
				Timeout) != HAL_OK) {
			return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e006      	b.n	800498e <HAL_UART_Transmit+0x11c>
		}

		/* At end of Tx process, restore huart->gState to Ready */
		huart->gState = HAL_UART_STATE_READY;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2220      	movs	r2, #32
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

		return HAL_OK;
 8004988:	2300      	movs	r3, #0
 800498a:	e000      	b.n	800498e <HAL_UART_Transmit+0x11c>
	} else {
		return HAL_BUSY;
 800498c:	2302      	movs	r3, #2
	}
}
 800498e:	4618      	mov	r0, r3
 8004990:	3720      	adds	r7, #32
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <HAL_UART_Receive>:
 * @param  Size  Amount of data elements (u8 or u16) to be received.
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData,
		uint16_t Size, uint32_t Timeout) {
 8004996:	b580      	push	{r7, lr}
 8004998:	b08a      	sub	sp, #40	; 0x28
 800499a:	af02      	add	r7, sp, #8
 800499c:	60f8      	str	r0, [r7, #12]
 800499e:	60b9      	str	r1, [r7, #8]
 80049a0:	603b      	str	r3, [r7, #0]
 80049a2:	4613      	mov	r3, r2
 80049a4:	80fb      	strh	r3, [r7, #6]
	uint8_t *pdata8bits;
	uint16_t *pdata16bits;
	uint32_t tickstart = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	617b      	str	r3, [r7, #20]

	/* Check that a Rx process is not already ongoing */
	if (huart->RxState == HAL_UART_STATE_READY) {
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b20      	cmp	r3, #32
 80049b4:	f040 808c 	bne.w	8004ad0 <HAL_UART_Receive+0x13a>
		if ((pData == NULL) || (Size == 0U)) {
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d002      	beq.n	80049c4 <HAL_UART_Receive+0x2e>
 80049be:	88fb      	ldrh	r3, [r7, #6]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d101      	bne.n	80049c8 <HAL_UART_Receive+0x32>
			return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e084      	b.n	8004ad2 <HAL_UART_Receive+0x13c>
		}

		/* Process Locked */
		__HAL_LOCK(huart);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d101      	bne.n	80049d6 <HAL_UART_Receive+0x40>
 80049d2:	2302      	movs	r3, #2
 80049d4:	e07d      	b.n	8004ad2 <HAL_UART_Receive+0x13c>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	641a      	str	r2, [r3, #64]	; 0x40
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2222      	movs	r2, #34	; 0x22
 80049e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	631a      	str	r2, [r3, #48]	; 0x30

		/* Init tickstart for timeout management */
		tickstart = HAL_GetTick();
 80049f2:	f7fc fafb 	bl	8000fec <HAL_GetTick>
 80049f6:	6178      	str	r0, [r7, #20]

		huart->RxXferSize = Size;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	88fa      	ldrh	r2, [r7, #6]
 80049fc:	859a      	strh	r2, [r3, #44]	; 0x2c
		huart->RxXferCount = Size;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	88fa      	ldrh	r2, [r7, #6]
 8004a02:	85da      	strh	r2, [r3, #46]	; 0x2e

		/* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
		if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a0c:	d108      	bne.n	8004a20 <HAL_UART_Receive+0x8a>
				&& (huart->Init.Parity == UART_PARITY_NONE)) {
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d104      	bne.n	8004a20 <HAL_UART_Receive+0x8a>
			pdata8bits = NULL;
 8004a16:	2300      	movs	r3, #0
 8004a18:	61fb      	str	r3, [r7, #28]
			pdata16bits = (uint16_t*) pData;
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	61bb      	str	r3, [r7, #24]
 8004a1e:	e003      	b.n	8004a28 <HAL_UART_Receive+0x92>
		} else {
			pdata8bits = pData;
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	61fb      	str	r3, [r7, #28]
			pdata16bits = NULL;
 8004a24:	2300      	movs	r3, #0
 8004a26:	61bb      	str	r3, [r7, #24]
		}

		/* Process Unlocked */
		__HAL_UNLOCK(huart);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		/* Check the remain data to be received */
		while (huart->RxXferCount > 0U) {
 8004a30:	e043      	b.n	8004aba <HAL_UART_Receive+0x124>
			if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET,
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	2120      	movs	r1, #32
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f000 f84c 	bl	8004ada <UART_WaitOnFlagUntilTimeout>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <HAL_UART_Receive+0xb6>
					tickstart, Timeout) != HAL_OK) {
				return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e042      	b.n	8004ad2 <HAL_UART_Receive+0x13c>
			}
			if (pdata8bits == NULL) {
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10c      	bne.n	8004a6c <HAL_UART_Receive+0xd6>
				*pdata16bits = (uint16_t) (huart->Instance->DR & 0x01FF);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	801a      	strh	r2, [r3, #0]
				pdata16bits++;
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	3302      	adds	r3, #2
 8004a68:	61bb      	str	r3, [r7, #24]
 8004a6a:	e01f      	b.n	8004aac <HAL_UART_Receive+0x116>
			} else {
				if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a74:	d007      	beq.n	8004a86 <HAL_UART_Receive+0xf0>
						|| ((huart->Init.WordLength == UART_WORDLENGTH_8B)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10a      	bne.n	8004a94 <HAL_UART_Receive+0xfe>
								&& (huart->Init.Parity == UART_PARITY_NONE))) {
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d106      	bne.n	8004a94 <HAL_UART_Receive+0xfe>
					*pdata8bits = (uint8_t) (huart->Instance->DR
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	b2da      	uxtb	r2, r3
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	701a      	strb	r2, [r3, #0]
 8004a92:	e008      	b.n	8004aa6 <HAL_UART_Receive+0x110>
							& (uint8_t) 0x00FF);
				} else {
					*pdata8bits = (uint8_t) (huart->Instance->DR
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004aa0:	b2da      	uxtb	r2, r3
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	701a      	strb	r2, [r3, #0]
							& (uint8_t) 0x007F);
				}
				pdata8bits++;
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	61fb      	str	r3, [r7, #28]
			}
			huart->RxXferCount--;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	85da      	strh	r2, [r3, #46]	; 0x2e
		while (huart->RxXferCount > 0U) {
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1b6      	bne.n	8004a32 <HAL_UART_Receive+0x9c>
		}

		/* At end of Rx process, restore huart->RxState to Ready */
		huart->RxState = HAL_UART_STATE_READY;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2220      	movs	r2, #32
 8004ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

		return HAL_OK;
 8004acc:	2300      	movs	r3, #0
 8004ace:	e000      	b.n	8004ad2 <HAL_UART_Receive+0x13c>
	} else {
		return HAL_BUSY;
 8004ad0:	2302      	movs	r3, #2
	}
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3720      	adds	r7, #32
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <UART_WaitOnFlagUntilTimeout>:
 * @param  Tickstart Tick start value
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart,
		uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout) {
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b084      	sub	sp, #16
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	60f8      	str	r0, [r7, #12]
 8004ae2:	60b9      	str	r1, [r7, #8]
 8004ae4:	603b      	str	r3, [r7, #0]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	71fb      	strb	r3, [r7, #7]
	/* Wait until flag is set */
	while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 8004aea:	e02c      	b.n	8004b46 <UART_WaitOnFlagUntilTimeout+0x6c>
		/* Check for the Timeout */
		if (Timeout != HAL_MAX_DELAY) {
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af2:	d028      	beq.n	8004b46 <UART_WaitOnFlagUntilTimeout+0x6c>
			if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d007      	beq.n	8004b0a <UART_WaitOnFlagUntilTimeout+0x30>
 8004afa:	f7fc fa77 	bl	8000fec <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d21d      	bcs.n	8004b46 <UART_WaitOnFlagUntilTimeout+0x6c>
				/* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
				CLEAR_BIT(huart->Instance->CR1,
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68da      	ldr	r2, [r3, #12]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b18:	60da      	str	r2, [r3, #12]
						(USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
				CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	695a      	ldr	r2, [r3, #20]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 0201 	bic.w	r2, r2, #1
 8004b28:	615a      	str	r2, [r3, #20]

				huart->gState = HAL_UART_STATE_READY;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
				huart->RxState = HAL_UART_STATE_READY;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2220      	movs	r2, #32
 8004b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

				/* Process Unlocked */
				__HAL_UNLOCK(huart);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

				return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e00f      	b.n	8004b66 <UART_WaitOnFlagUntilTimeout+0x8c>
	while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	4013      	ands	r3, r2
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	bf0c      	ite	eq
 8004b56:	2301      	moveq	r3, #1
 8004b58:	2300      	movne	r3, #0
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	79fb      	ldrb	r3, [r7, #7]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d0c3      	beq.n	8004aec <UART_WaitOnFlagUntilTimeout+0x12>
			}
		}
	}
	return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
	...

08004b70 <UART_SetConfig>:
 * @brief  Configures the UART peripheral.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
static void UART_SetConfig(UART_HandleTypeDef *huart) {
 8004b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b74:	b09f      	sub	sp, #124	; 0x7c
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	66f8      	str	r0, [r7, #108]	; 0x6c
	assert_param(IS_UART_MODE(huart->Init.Mode));

	/*-------------------------- USART CR2 Configuration -----------------------*/
	/* Configure the UART Stop Bits: Set STOP[13:12] bits
	 according to huart->Init.StopBits value */
	MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b86:	68d9      	ldr	r1, [r3, #12]
 8004b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	ea40 0301 	orr.w	r3, r0, r1
 8004b90:	6113      	str	r3, [r2, #16]
	 Set the M bits according to huart->Init.WordLength value
	 Set PCE and PS bits according to huart->Init.Parity value
	 Set TE and RE bits according to huart->Init.Mode value
	 Set OVER8 bit according to huart->Init.OverSampling value */

	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 8004b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b94:	689a      	ldr	r2, [r3, #8]
 8004b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	431a      	orrs	r2, r3
			| huart->Init.Mode | huart->Init.OverSampling;
 8004b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	431a      	orrs	r2, r3
 8004ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ba4:	69db      	ldr	r3, [r3, #28]
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	673b      	str	r3, [r7, #112]	; 0x70
	MODIFY_REG(huart->Instance->CR1,
 8004baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004bb4:	f021 010c 	bic.w	r1, r1, #12
 8004bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bbe:	430b      	orrs	r3, r1
 8004bc0:	60d3      	str	r3, [r2, #12]
			(uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
			tmpreg);

	/*-------------------------- USART CR3 Configuration -----------------------*/
	/* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
	MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE),
 8004bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bce:	6999      	ldr	r1, [r3, #24]
 8004bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	ea40 0301 	orr.w	r3, r0, r1
 8004bd8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
	if ((huart->Instance == USART1) || (huart->Instance == USART6)) {
 8004bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	4bc5      	ldr	r3, [pc, #788]	; (8004ef4 <UART_SetConfig+0x384>)
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d004      	beq.n	8004bee <UART_SetConfig+0x7e>
 8004be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	4bc3      	ldr	r3, [pc, #780]	; (8004ef8 <UART_SetConfig+0x388>)
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d103      	bne.n	8004bf6 <UART_SetConfig+0x86>
		pclk = HAL_RCC_GetPCLK2Freq();
 8004bee:	f7fd fc55 	bl	800249c <HAL_RCC_GetPCLK2Freq>
 8004bf2:	6778      	str	r0, [r7, #116]	; 0x74
 8004bf4:	e002      	b.n	8004bfc <UART_SetConfig+0x8c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
	else {
		pclk = HAL_RCC_GetPCLK1Freq();
 8004bf6:	f7fd fc3d 	bl	8002474 <HAL_RCC_GetPCLK1Freq>
 8004bfa:	6778      	str	r0, [r7, #116]	; 0x74
	}
	/*-------------------------- USART BRR Configuration ---------------------*/
	if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 8004bfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bfe:	69db      	ldr	r3, [r3, #28]
 8004c00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c04:	f040 80b6 	bne.w	8004d74 <UART_SetConfig+0x204>
		huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c0a:	461c      	mov	r4, r3
 8004c0c:	f04f 0500 	mov.w	r5, #0
 8004c10:	4622      	mov	r2, r4
 8004c12:	462b      	mov	r3, r5
 8004c14:	1891      	adds	r1, r2, r2
 8004c16:	6439      	str	r1, [r7, #64]	; 0x40
 8004c18:	415b      	adcs	r3, r3
 8004c1a:	647b      	str	r3, [r7, #68]	; 0x44
 8004c1c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c20:	1912      	adds	r2, r2, r4
 8004c22:	eb45 0303 	adc.w	r3, r5, r3
 8004c26:	f04f 0000 	mov.w	r0, #0
 8004c2a:	f04f 0100 	mov.w	r1, #0
 8004c2e:	00d9      	lsls	r1, r3, #3
 8004c30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c34:	00d0      	lsls	r0, r2, #3
 8004c36:	4602      	mov	r2, r0
 8004c38:	460b      	mov	r3, r1
 8004c3a:	1911      	adds	r1, r2, r4
 8004c3c:	6639      	str	r1, [r7, #96]	; 0x60
 8004c3e:	416b      	adcs	r3, r5
 8004c40:	667b      	str	r3, [r7, #100]	; 0x64
 8004c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	461a      	mov	r2, r3
 8004c48:	f04f 0300 	mov.w	r3, #0
 8004c4c:	1891      	adds	r1, r2, r2
 8004c4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c50:	415b      	adcs	r3, r3
 8004c52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c58:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004c5c:	f7fb ffe4 	bl	8000c28 <__aeabi_uldivmod>
 8004c60:	4602      	mov	r2, r0
 8004c62:	460b      	mov	r3, r1
 8004c64:	4ba5      	ldr	r3, [pc, #660]	; (8004efc <UART_SetConfig+0x38c>)
 8004c66:	fba3 2302 	umull	r2, r3, r3, r2
 8004c6a:	095b      	lsrs	r3, r3, #5
 8004c6c:	011e      	lsls	r6, r3, #4
 8004c6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c70:	461c      	mov	r4, r3
 8004c72:	f04f 0500 	mov.w	r5, #0
 8004c76:	4622      	mov	r2, r4
 8004c78:	462b      	mov	r3, r5
 8004c7a:	1891      	adds	r1, r2, r2
 8004c7c:	6339      	str	r1, [r7, #48]	; 0x30
 8004c7e:	415b      	adcs	r3, r3
 8004c80:	637b      	str	r3, [r7, #52]	; 0x34
 8004c82:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004c86:	1912      	adds	r2, r2, r4
 8004c88:	eb45 0303 	adc.w	r3, r5, r3
 8004c8c:	f04f 0000 	mov.w	r0, #0
 8004c90:	f04f 0100 	mov.w	r1, #0
 8004c94:	00d9      	lsls	r1, r3, #3
 8004c96:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c9a:	00d0      	lsls	r0, r2, #3
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	1911      	adds	r1, r2, r4
 8004ca2:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ca4:	416b      	adcs	r3, r5
 8004ca6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	461a      	mov	r2, r3
 8004cae:	f04f 0300 	mov.w	r3, #0
 8004cb2:	1891      	adds	r1, r2, r2
 8004cb4:	62b9      	str	r1, [r7, #40]	; 0x28
 8004cb6:	415b      	adcs	r3, r3
 8004cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cbe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004cc2:	f7fb ffb1 	bl	8000c28 <__aeabi_uldivmod>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	460b      	mov	r3, r1
 8004cca:	4b8c      	ldr	r3, [pc, #560]	; (8004efc <UART_SetConfig+0x38c>)
 8004ccc:	fba3 1302 	umull	r1, r3, r3, r2
 8004cd0:	095b      	lsrs	r3, r3, #5
 8004cd2:	2164      	movs	r1, #100	; 0x64
 8004cd4:	fb01 f303 	mul.w	r3, r1, r3
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	00db      	lsls	r3, r3, #3
 8004cdc:	3332      	adds	r3, #50	; 0x32
 8004cde:	4a87      	ldr	r2, [pc, #540]	; (8004efc <UART_SetConfig+0x38c>)
 8004ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce4:	095b      	lsrs	r3, r3, #5
 8004ce6:	005b      	lsls	r3, r3, #1
 8004ce8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004cec:	441e      	add	r6, r3
 8004cee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f04f 0100 	mov.w	r1, #0
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	1894      	adds	r4, r2, r2
 8004cfc:	623c      	str	r4, [r7, #32]
 8004cfe:	415b      	adcs	r3, r3
 8004d00:	627b      	str	r3, [r7, #36]	; 0x24
 8004d02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d06:	1812      	adds	r2, r2, r0
 8004d08:	eb41 0303 	adc.w	r3, r1, r3
 8004d0c:	f04f 0400 	mov.w	r4, #0
 8004d10:	f04f 0500 	mov.w	r5, #0
 8004d14:	00dd      	lsls	r5, r3, #3
 8004d16:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d1a:	00d4      	lsls	r4, r2, #3
 8004d1c:	4622      	mov	r2, r4
 8004d1e:	462b      	mov	r3, r5
 8004d20:	1814      	adds	r4, r2, r0
 8004d22:	653c      	str	r4, [r7, #80]	; 0x50
 8004d24:	414b      	adcs	r3, r1
 8004d26:	657b      	str	r3, [r7, #84]	; 0x54
 8004d28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	f04f 0300 	mov.w	r3, #0
 8004d32:	1891      	adds	r1, r2, r2
 8004d34:	61b9      	str	r1, [r7, #24]
 8004d36:	415b      	adcs	r3, r3
 8004d38:	61fb      	str	r3, [r7, #28]
 8004d3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d3e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004d42:	f7fb ff71 	bl	8000c28 <__aeabi_uldivmod>
 8004d46:	4602      	mov	r2, r0
 8004d48:	460b      	mov	r3, r1
 8004d4a:	4b6c      	ldr	r3, [pc, #432]	; (8004efc <UART_SetConfig+0x38c>)
 8004d4c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d50:	095b      	lsrs	r3, r3, #5
 8004d52:	2164      	movs	r1, #100	; 0x64
 8004d54:	fb01 f303 	mul.w	r3, r1, r3
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	3332      	adds	r3, #50	; 0x32
 8004d5e:	4a67      	ldr	r2, [pc, #412]	; (8004efc <UART_SetConfig+0x38c>)
 8004d60:	fba2 2303 	umull	r2, r3, r2, r3
 8004d64:	095b      	lsrs	r3, r3, #5
 8004d66:	f003 0207 	and.w	r2, r3, #7
 8004d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4432      	add	r2, r6
 8004d70:	609a      	str	r2, [r3, #8]
	} else {
		huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
	}
}
 8004d72:	e0b9      	b.n	8004ee8 <UART_SetConfig+0x378>
		huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d76:	461c      	mov	r4, r3
 8004d78:	f04f 0500 	mov.w	r5, #0
 8004d7c:	4622      	mov	r2, r4
 8004d7e:	462b      	mov	r3, r5
 8004d80:	1891      	adds	r1, r2, r2
 8004d82:	6139      	str	r1, [r7, #16]
 8004d84:	415b      	adcs	r3, r3
 8004d86:	617b      	str	r3, [r7, #20]
 8004d88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004d8c:	1912      	adds	r2, r2, r4
 8004d8e:	eb45 0303 	adc.w	r3, r5, r3
 8004d92:	f04f 0000 	mov.w	r0, #0
 8004d96:	f04f 0100 	mov.w	r1, #0
 8004d9a:	00d9      	lsls	r1, r3, #3
 8004d9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004da0:	00d0      	lsls	r0, r2, #3
 8004da2:	4602      	mov	r2, r0
 8004da4:	460b      	mov	r3, r1
 8004da6:	eb12 0804 	adds.w	r8, r2, r4
 8004daa:	eb43 0905 	adc.w	r9, r3, r5
 8004dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f04f 0100 	mov.w	r1, #0
 8004db8:	f04f 0200 	mov.w	r2, #0
 8004dbc:	f04f 0300 	mov.w	r3, #0
 8004dc0:	008b      	lsls	r3, r1, #2
 8004dc2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004dc6:	0082      	lsls	r2, r0, #2
 8004dc8:	4640      	mov	r0, r8
 8004dca:	4649      	mov	r1, r9
 8004dcc:	f7fb ff2c 	bl	8000c28 <__aeabi_uldivmod>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	4b49      	ldr	r3, [pc, #292]	; (8004efc <UART_SetConfig+0x38c>)
 8004dd6:	fba3 2302 	umull	r2, r3, r3, r2
 8004dda:	095b      	lsrs	r3, r3, #5
 8004ddc:	011e      	lsls	r6, r3, #4
 8004dde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004de0:	4618      	mov	r0, r3
 8004de2:	f04f 0100 	mov.w	r1, #0
 8004de6:	4602      	mov	r2, r0
 8004de8:	460b      	mov	r3, r1
 8004dea:	1894      	adds	r4, r2, r2
 8004dec:	60bc      	str	r4, [r7, #8]
 8004dee:	415b      	adcs	r3, r3
 8004df0:	60fb      	str	r3, [r7, #12]
 8004df2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004df6:	1812      	adds	r2, r2, r0
 8004df8:	eb41 0303 	adc.w	r3, r1, r3
 8004dfc:	f04f 0400 	mov.w	r4, #0
 8004e00:	f04f 0500 	mov.w	r5, #0
 8004e04:	00dd      	lsls	r5, r3, #3
 8004e06:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e0a:	00d4      	lsls	r4, r2, #3
 8004e0c:	4622      	mov	r2, r4
 8004e0e:	462b      	mov	r3, r5
 8004e10:	1814      	adds	r4, r2, r0
 8004e12:	64bc      	str	r4, [r7, #72]	; 0x48
 8004e14:	414b      	adcs	r3, r1
 8004e16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f04f 0100 	mov.w	r1, #0
 8004e22:	f04f 0200 	mov.w	r2, #0
 8004e26:	f04f 0300 	mov.w	r3, #0
 8004e2a:	008b      	lsls	r3, r1, #2
 8004e2c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004e30:	0082      	lsls	r2, r0, #2
 8004e32:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004e36:	f7fb fef7 	bl	8000c28 <__aeabi_uldivmod>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	4b2f      	ldr	r3, [pc, #188]	; (8004efc <UART_SetConfig+0x38c>)
 8004e40:	fba3 1302 	umull	r1, r3, r3, r2
 8004e44:	095b      	lsrs	r3, r3, #5
 8004e46:	2164      	movs	r1, #100	; 0x64
 8004e48:	fb01 f303 	mul.w	r3, r1, r3
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	011b      	lsls	r3, r3, #4
 8004e50:	3332      	adds	r3, #50	; 0x32
 8004e52:	4a2a      	ldr	r2, [pc, #168]	; (8004efc <UART_SetConfig+0x38c>)
 8004e54:	fba2 2303 	umull	r2, r3, r2, r3
 8004e58:	095b      	lsrs	r3, r3, #5
 8004e5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e5e:	441e      	add	r6, r3
 8004e60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e62:	4618      	mov	r0, r3
 8004e64:	f04f 0100 	mov.w	r1, #0
 8004e68:	4602      	mov	r2, r0
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	1894      	adds	r4, r2, r2
 8004e6e:	603c      	str	r4, [r7, #0]
 8004e70:	415b      	adcs	r3, r3
 8004e72:	607b      	str	r3, [r7, #4]
 8004e74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e78:	1812      	adds	r2, r2, r0
 8004e7a:	eb41 0303 	adc.w	r3, r1, r3
 8004e7e:	f04f 0400 	mov.w	r4, #0
 8004e82:	f04f 0500 	mov.w	r5, #0
 8004e86:	00dd      	lsls	r5, r3, #3
 8004e88:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e8c:	00d4      	lsls	r4, r2, #3
 8004e8e:	4622      	mov	r2, r4
 8004e90:	462b      	mov	r3, r5
 8004e92:	eb12 0a00 	adds.w	sl, r2, r0
 8004e96:	eb43 0b01 	adc.w	fp, r3, r1
 8004e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f04f 0100 	mov.w	r1, #0
 8004ea4:	f04f 0200 	mov.w	r2, #0
 8004ea8:	f04f 0300 	mov.w	r3, #0
 8004eac:	008b      	lsls	r3, r1, #2
 8004eae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004eb2:	0082      	lsls	r2, r0, #2
 8004eb4:	4650      	mov	r0, sl
 8004eb6:	4659      	mov	r1, fp
 8004eb8:	f7fb feb6 	bl	8000c28 <__aeabi_uldivmod>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	4b0e      	ldr	r3, [pc, #56]	; (8004efc <UART_SetConfig+0x38c>)
 8004ec2:	fba3 1302 	umull	r1, r3, r3, r2
 8004ec6:	095b      	lsrs	r3, r3, #5
 8004ec8:	2164      	movs	r1, #100	; 0x64
 8004eca:	fb01 f303 	mul.w	r3, r1, r3
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	011b      	lsls	r3, r3, #4
 8004ed2:	3332      	adds	r3, #50	; 0x32
 8004ed4:	4a09      	ldr	r2, [pc, #36]	; (8004efc <UART_SetConfig+0x38c>)
 8004ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eda:	095b      	lsrs	r3, r3, #5
 8004edc:	f003 020f 	and.w	r2, r3, #15
 8004ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4432      	add	r2, r6
 8004ee6:	609a      	str	r2, [r3, #8]
}
 8004ee8:	bf00      	nop
 8004eea:	377c      	adds	r7, #124	; 0x7c
 8004eec:	46bd      	mov	sp, r7
 8004eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ef2:	bf00      	nop
 8004ef4:	40011000 	.word	0x40011000
 8004ef8:	40011400 	.word	0x40011400
 8004efc:	51eb851f 	.word	0x51eb851f

08004f00 <makeNSteps>:
#define T_CLOCK 	64000000 //apb1 timer clock
#define RES			1600
#define MAX_SPEED	3600
#define INITIAL_PERIOD 4

void makeNSteps(StepperMotor *motor, int steps, GPIO_PinState direction) {
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	71fb      	strb	r3, [r7, #7]
	//exit if:
	// 1. Speed is zero.
	// 2. Zero number of steps.
	// 3. Direction is set wrong.
	if (steps == 0 || motor->speed == 0 || direction < 0 || direction > 1)
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f000 80a2 	beq.w	800505a <makeNSteps+0x15a>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	edd3 7a04 	vldr	s15, [r3, #16]
 8004f1c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f24:	f000 8099 	beq.w	800505a <makeNSteps+0x15a>
 8004f28:	79fb      	ldrb	r3, [r7, #7]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	f200 8095 	bhi.w	800505a <makeNSteps+0x15a>
		return;

	//if steps is negative, change direction and continue
	if (steps < 0) {
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	da0a      	bge.n	8004f4c <makeNSteps+0x4c>
		steps = steps * (-1);
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	425b      	negs	r3, r3
 8004f3a:	60bb      	str	r3, [r7, #8]
		if (direction == 1) {
 8004f3c:	79fb      	ldrb	r3, [r7, #7]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d102      	bne.n	8004f48 <makeNSteps+0x48>
			direction = 0;
 8004f42:	2300      	movs	r3, #0
 8004f44:	71fb      	strb	r3, [r7, #7]
 8004f46:	e001      	b.n	8004f4c <makeNSteps+0x4c>
		} else {
			direction = 1;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	71fb      	strb	r3, [r7, #7]
		}
	}

	// set given direction
	HAL_GPIO_WritePin(motor->dir_Port, motor->dir_Pin, direction);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6858      	ldr	r0, [r3, #4]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	881b      	ldrh	r3, [r3, #0]
 8004f54:	79fa      	ldrb	r2, [r7, #7]
 8004f56:	4619      	mov	r1, r3
 8004f58:	f7fd f980 	bl	800225c <HAL_GPIO_WritePin>

	while (steps > 256) {
 8004f5c:	e03d      	b.n	8004fda <makeNSteps+0xda>
		motor->htim->Instance->RCR = 255;			// set number of PWM signals
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	22ff      	movs	r2, #255	; 0xff
 8004f66:	631a      	str	r2, [r3, #48]	; 0x30
		motor->htim->Instance->EGR = TIM_EGR_UG;		// update timer settings
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	615a      	str	r2, [r3, #20]
		TIM_CHANNEL_STATE_SET_ALL(motor->htim, HAL_TIM_CHANNEL_STATE_READY);// set channel state to ready
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		motor->htim->Instance->SR &= 0xFFFE;// clear UIF - update interrupt flag
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6919      	ldr	r1, [r3, #16]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004fac:	400b      	ands	r3, r1
 8004fae:	6113      	str	r3, [r2, #16]
		HAL_TIM_PWM_Start(motor->htim, motor->stepChannel);	// generate PWM signals
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	68da      	ldr	r2, [r3, #12]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	4619      	mov	r1, r3
 8004fba:	4610      	mov	r0, r2
 8004fbc:	f7fe fc46 	bl	800384c <HAL_TIM_PWM_Start>
		steps -= 256;
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004fc6:	60bb      	str	r3, [r7, #8]

		while ((motor->htim->Instance->SR & 0x01) == 0) {
 8004fc8:	bf00      	nop
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d0f7      	beq.n	8004fca <makeNSteps+0xca>
	while (steps > 256) {
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fe0:	dcbd      	bgt.n	8004f5e <makeNSteps+0x5e>
			//wait until 256 pulses are generated.
		}
	}

	motor->htim->Instance->RCR = steps - 1;			// set number of PWM signals
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	1e5a      	subs	r2, r3, #1
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	631a      	str	r2, [r3, #48]	; 0x30
	motor->htim->Instance->EGR = TIM_EGR_UG;			// update timer settings
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	615a      	str	r2, [r3, #20]
	TIM_CHANNEL_STATE_SET_ALL(motor->htim, HAL_TIM_CHANNEL_STATE_READY);// set channel state to ready
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	2201      	movs	r2, #1
 8005012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	motor->htim->Instance->SR &= 0xFFFE;	// clear UIF - update interrupt flag
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	6919      	ldr	r1, [r3, #16]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005032:	400b      	ands	r3, r1
 8005034:	6113      	str	r3, [r2, #16]
	HAL_TIM_PWM_Start(motor->htim, motor->stepChannel);	// generate PWM signals
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	68da      	ldr	r2, [r3, #12]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	4619      	mov	r1, r3
 8005040:	4610      	mov	r0, r2
 8005042:	f7fe fc03 	bl	800384c <HAL_TIM_PWM_Start>
	while ((motor->htim->Instance->SR & 0x01) == 0) {
 8005046:	bf00      	nop
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	2b00      	cmp	r3, #0
 8005056:	d0f7      	beq.n	8005048 <makeNSteps+0x148>
 8005058:	e000      	b.n	800505c <makeNSteps+0x15c>
		return;
 800505a:	bf00      	nop
		//wait until pulses are generated.
	}

}
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
	...

08005064 <rotate>:

float rotate(StepperMotor *motor, float rotationAngle, GPIO_PinState direction) {
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	ed87 0a02 	vstr	s0, [r7, #8]
 8005070:	460b      	mov	r3, r1
 8005072:	71fb      	strb	r3, [r7, #7]
	float stepAngle = (float) 360 / RES;		// rotation angle of each step
 8005074:	4b22      	ldr	r3, [pc, #136]	; (8005100 <rotate+0x9c>)
 8005076:	617b      	str	r3, [r7, #20]

	int steps = round(rotationAngle * 30 * 2 / stepAngle);// whole number of steps for given rotation angle
 8005078:	edd7 7a02 	vldr	s15, [r7, #8]
 800507c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8005080:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005084:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005088:	edd7 7a05 	vldr	s15, [r7, #20]
 800508c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005090:	ee16 0a90 	vmov	r0, s13
 8005094:	f7fb fa78 	bl	8000588 <__aeabi_f2d>
 8005098:	4602      	mov	r2, r0
 800509a:	460b      	mov	r3, r1
 800509c:	ec43 2b10 	vmov	d0, r2, r3
 80050a0:	f003 fff8 	bl	8009094 <round>
 80050a4:	ec53 2b10 	vmov	r2, r3, d0
 80050a8:	4610      	mov	r0, r2
 80050aa:	4619      	mov	r1, r3
 80050ac:	f7fb fd74 	bl	8000b98 <__aeabi_d2iz>
 80050b0:	4603      	mov	r3, r0
 80050b2:	613b      	str	r3, [r7, #16]

	//if rotation angle is less than one step angle, return rotationAngle
	if (steps == 0 || motor->speed == 0) {
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d007      	beq.n	80050ca <rotate+0x66>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	edd3 7a04 	vldr	s15, [r3, #16]
 80050c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80050c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050c8:	d102      	bne.n	80050d0 <rotate+0x6c>
		return rotationAngle;
 80050ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80050ce:	e012      	b.n	80050f6 <rotate+0x92>
	} else {
		//else make calculated whole number of steps
		makeNSteps(motor, steps, direction);
 80050d0:	79fb      	ldrb	r3, [r7, #7]
 80050d2:	461a      	mov	r2, r3
 80050d4:	6939      	ldr	r1, [r7, #16]
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f7ff ff12 	bl	8004f00 <makeNSteps>
	}
	//return remaminder of the rotation angle
	return rotationAngle - steps * stepAngle;
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	ee07 3a90 	vmov	s15, r3
 80050e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80050ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ee:	ed97 7a02 	vldr	s14, [r7, #8]
 80050f2:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 80050f6:	eeb0 0a67 	vmov.f32	s0, s15
 80050fa:	3718      	adds	r7, #24
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	3e666666 	.word	0x3e666666
 8005104:	00000000 	.word	0x00000000

08005108 <setSpeed>:

void setSpeed(StepperMotor *motor, float speed) {
 8005108:	b580      	push	{r7, lr}
 800510a:	b08a      	sub	sp, #40	; 0x28
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	ed87 0a00 	vstr	s0, [r7]
	float pulseFreq;								// frequency of single pulse
	int period = 0;
 8005114:	2300      	movs	r3, #0
 8005116:	627b      	str	r3, [r7, #36]	; 0x24
	int tmpPeriod = INITIAL_PERIOD;					// temporary period
 8005118:	2304      	movs	r3, #4
 800511a:	623b      	str	r3, [r7, #32]
	int prescalar;
	int tmpPrescalar;								// temporary prescalar 
	float tmpDeviation;								// temporary deviation
	float deviation = speed;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	61bb      	str	r3, [r7, #24]
	uint8_t flag = 1;
 8005120:	2301      	movs	r3, #1
 8005122:	75fb      	strb	r3, [r7, #23]

	// exit if speed is negative
	if (speed < 0)
 8005124:	edd7 7a00 	vldr	s15, [r7]
 8005128:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800512c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005130:	f100 80a6 	bmi.w	8005280 <setSpeed+0x178>
		return;
	//if speed is zero, assign speed and exit
	if (speed == 0) {
 8005134:	edd7 7a00 	vldr	s15, [r7]
 8005138:	eef5 7a40 	vcmp.f32	s15, #0.0
 800513c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005140:	d104      	bne.n	800514c <setSpeed+0x44>
		motor->speed = 0;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f04f 0200 	mov.w	r2, #0
 8005148:	611a      	str	r2, [r3, #16]
		return;
 800514a:	e09a      	b.n	8005282 <setSpeed+0x17a>
	}
	// if speed is greater than MAX_SPEED, decrease speed value to MAX_SPEED
	if (speed > MAX_SPEED) {
 800514c:	edd7 7a00 	vldr	s15, [r7]
 8005150:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8005290 <setSpeed+0x188>
 8005154:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800515c:	dd01      	ble.n	8005162 <setSpeed+0x5a>
		speed = MAX_SPEED;
 800515e:	4b4d      	ldr	r3, [pc, #308]	; (8005294 <setSpeed+0x18c>)
 8005160:	603b      	str	r3, [r7, #0]
	}
	//frequency of pwm signal
	pulseFreq = (float) speed * RES / 60;
 8005162:	edd7 7a00 	vldr	s15, [r7]
 8005166:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8005298 <setSpeed+0x190>
 800516a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800516e:	eddf 6a4b 	vldr	s13, [pc, #300]	; 800529c <setSpeed+0x194>
 8005172:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005176:	edc7 7a04 	vstr	s15, [r7, #16]

	//searching suitable value of period and prescalar with less deviation.
	while (tmpPeriod < 65535 && flag) {
 800517a:	e060      	b.n	800523e <setSpeed+0x136>
		tmpPrescalar = round(T_CLOCK / (pulseFreq * tmpPeriod));//calculating temporary Prescalar
 800517c:	6a3b      	ldr	r3, [r7, #32]
 800517e:	ee07 3a90 	vmov	s15, r3
 8005182:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005186:	edd7 7a04 	vldr	s15, [r7, #16]
 800518a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800518e:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80052a0 <setSpeed+0x198>
 8005192:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005196:	ee16 0a90 	vmov	r0, s13
 800519a:	f7fb f9f5 	bl	8000588 <__aeabi_f2d>
 800519e:	4602      	mov	r2, r0
 80051a0:	460b      	mov	r3, r1
 80051a2:	ec43 2b10 	vmov	d0, r2, r3
 80051a6:	f003 ff75 	bl	8009094 <round>
 80051aa:	ec53 2b10 	vmov	r2, r3, d0
 80051ae:	4610      	mov	r0, r2
 80051b0:	4619      	mov	r1, r3
 80051b2:	f7fb fcf1 	bl	8000b98 <__aeabi_d2iz>
 80051b6:	4603      	mov	r3, r0
 80051b8:	60fb      	str	r3, [r7, #12]
		tmpDeviation =
				abs(
						(int) (pulseFreq
								- (float) T_CLOCK / (tmpPeriod * tmpPrescalar)));//calculating deviation from desired speed
 80051ba:	6a3b      	ldr	r3, [r7, #32]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	fb02 f303 	mul.w	r3, r2, r3
 80051c2:	ee07 3a90 	vmov	s15, r3
 80051c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051ca:	eddf 6a35 	vldr	s13, [pc, #212]	; 80052a0 <setSpeed+0x198>
 80051ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051d2:	ed97 7a04 	vldr	s14, [r7, #16]
 80051d6:	ee77 7a67 	vsub.f32	s15, s14, s15
						(int) (pulseFreq
 80051da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051de:	ee17 3a90 	vmov	r3, s15
				abs(
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	bfb8      	it	lt
 80051e6:	425b      	neglt	r3, r3
		tmpDeviation =
 80051e8:	ee07 3a90 	vmov	s15, r3
 80051ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051f0:	edc7 7a02 	vstr	s15, [r7, #8]

		//if calculated deviation is less than previous deviation, save prescalar and period
		if (tmpDeviation < deviation && tmpPrescalar < 65535) {
 80051f4:	ed97 7a02 	vldr	s14, [r7, #8]
 80051f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80051fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005204:	d50a      	bpl.n	800521c <setSpeed+0x114>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800520c:	4293      	cmp	r3, r2
 800520e:	dc05      	bgt.n	800521c <setSpeed+0x114>
			deviation = tmpDeviation;
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	61bb      	str	r3, [r7, #24]
			prescalar = tmpPrescalar;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	61fb      	str	r3, [r7, #28]
			period = tmpPeriod;
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	627b      	str	r3, [r7, #36]	; 0x24
		}

		//exit from while loop if speed value deviation is zero.
		if (deviation >= 0.0001) {
 800521c:	69b8      	ldr	r0, [r7, #24]
 800521e:	f7fb f9b3 	bl	8000588 <__aeabi_f2d>
 8005222:	a319      	add	r3, pc, #100	; (adr r3, 8005288 <setSpeed+0x180>)
 8005224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005228:	f7fb fc8c 	bl	8000b44 <__aeabi_dcmpge>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d003      	beq.n	800523a <setSpeed+0x132>
			tmpPeriod++;
 8005232:	6a3b      	ldr	r3, [r7, #32]
 8005234:	3301      	adds	r3, #1
 8005236:	623b      	str	r3, [r7, #32]
 8005238:	e001      	b.n	800523e <setSpeed+0x136>
		} else {
			flag = 0;
 800523a:	2300      	movs	r3, #0
 800523c:	75fb      	strb	r3, [r7, #23]
	while (tmpPeriod < 65535 && flag) {
 800523e:	6a3b      	ldr	r3, [r7, #32]
 8005240:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005244:	4293      	cmp	r3, r2
 8005246:	dc02      	bgt.n	800524e <setSpeed+0x146>
 8005248:	7dfb      	ldrb	r3, [r7, #23]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d196      	bne.n	800517c <setSpeed+0x74>
		}
	}

	//set calculated timer settings
	motor->htim->Instance->PSC = prescalar - 1;
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	1e5a      	subs	r2, r3, #1
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	629a      	str	r2, [r3, #40]	; 0x28
	motor->htim->Instance->ARR = period - 1;
 800525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525c:	1e5a      	subs	r2, r3, #1
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	62da      	str	r2, [r3, #44]	; 0x2c
	motor->htim->Instance->CCR1 = period / 2;
 8005266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005268:	0fda      	lsrs	r2, r3, #31
 800526a:	4413      	add	r3, r2
 800526c:	105b      	asrs	r3, r3, #1
 800526e:	461a      	mov	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	635a      	str	r2, [r3, #52]	; 0x34
	motor->speed = speed;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	683a      	ldr	r2, [r7, #0]
 800527c:	611a      	str	r2, [r3, #16]
 800527e:	e000      	b.n	8005282 <setSpeed+0x17a>
		return;
 8005280:	bf00      	nop
}
 8005282:	3728      	adds	r7, #40	; 0x28
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	eb1c432d 	.word	0xeb1c432d
 800528c:	3f1a36e2 	.word	0x3f1a36e2
 8005290:	45610000 	.word	0x45610000
 8005294:	45610000 	.word	0x45610000
 8005298:	44c80000 	.word	0x44c80000
 800529c:	42700000 	.word	0x42700000
 80052a0:	4c742400 	.word	0x4c742400

080052a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80052a8:	f7fb fe3a 	bl	8000f20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80052ac:	f000 f8c2 	bl	8005434 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80052b0:	f000 fb26 	bl	8005900 <MX_GPIO_Init>
  MX_CAN1_Init();
 80052b4:	f000 f92c 	bl	8005510 <MX_CAN1_Init>
  MX_SPI1_Init();
 80052b8:	f000 f960 	bl	800557c <MX_SPI1_Init>
  MX_TIM1_Init();
 80052bc:	f000 f994 	bl	80055e8 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80052c0:	f000 faf4 	bl	80058ac <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80052c4:	f000 f9cc 	bl	8005660 <MX_TIM2_Init>
  MX_TIM3_Init();
 80052c8:	f000 fa16 	bl	80056f8 <MX_TIM3_Init>
  MX_TIM8_Init();
 80052cc:	f000 fa62 	bl	8005794 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 80052d0:	4844      	ldr	r0, [pc, #272]	; (80053e4 <main+0x140>)
 80052d2:	f000 fd1b 	bl	8005d0c <RetargetInit>

    HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 80052d6:	2201      	movs	r2, #1
 80052d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80052dc:	4842      	ldr	r0, [pc, #264]	; (80053e8 <main+0x144>)
 80052de:	f7fc ffbd 	bl	800225c <HAL_GPIO_WritePin>

    printf("Stepper Board \n");
 80052e2:	4842      	ldr	r0, [pc, #264]	; (80053ec <main+0x148>)
 80052e4:	f001 fda0 	bl	8006e28 <puts>


     HAL_TIM_Base_Start(&htim8);
 80052e8:	4841      	ldr	r0, [pc, #260]	; (80053f0 <main+0x14c>)
 80052ea:	f7fe f9f7 	bl	80036dc <HAL_TIM_Base_Start>

    // HAL_TIMEx_OC_Start(&htim8, TIM_CHANNEL_1);
     printf("CAN Register Configuring... \n");
 80052ee:	4841      	ldr	r0, [pc, #260]	; (80053f4 <main+0x150>)
 80052f0:	f001 fd9a 	bl	8006e28 <puts>

       CanRxFilterConfig();
 80052f4:	f000 fc58 	bl	8005ba8 <CanRxFilterConfig>
       TxHeader_Config();
 80052f8:	f000 fc3c 	bl	8005b74 <TxHeader_Config>
         // teoricamente già fatto di default

       HAL_CAN_Start(& hcan1);
 80052fc:	483e      	ldr	r0, [pc, #248]	; (80053f8 <main+0x154>)
 80052fe:	f7fc f881 	bl	8001404 <HAL_CAN_Start>

       if ( (HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING) == HAL_OK)) {
 8005302:	2102      	movs	r1, #2
 8005304:	483c      	ldr	r0, [pc, #240]	; (80053f8 <main+0x154>)
 8005306:	f7fc faae 	bl	8001866 <HAL_CAN_ActivateNotification>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d103      	bne.n	8005318 <main+0x74>
                   printf("CAN Configuring: DONE !\n");
 8005310:	483a      	ldr	r0, [pc, #232]	; (80053fc <main+0x158>)
 8005312:	f001 fd89 	bl	8006e28 <puts>
 8005316:	e002      	b.n	800531e <main+0x7a>
       }

       else printf("CAN Error !\n");
 8005318:	4839      	ldr	r0, [pc, #228]	; (8005400 <main+0x15c>)
 800531a:	f001 fd85 	bl	8006e28 <puts>

     HAL_Delay(1000);
 800531e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005322:	f7fb fe6f 	bl	8001004 <HAL_Delay>

     motor.dir_Pin=DIR_Pin;
 8005326:	4b37      	ldr	r3, [pc, #220]	; (8005404 <main+0x160>)
 8005328:	2280      	movs	r2, #128	; 0x80
 800532a:	801a      	strh	r2, [r3, #0]
     motor.dir_Port=DIR_GPIO_Port;
 800532c:	4b35      	ldr	r3, [pc, #212]	; (8005404 <main+0x160>)
 800532e:	4a36      	ldr	r2, [pc, #216]	; (8005408 <main+0x164>)
 8005330:	605a      	str	r2, [r3, #4]
     motor.htim=&htim8;
 8005332:	4b34      	ldr	r3, [pc, #208]	; (8005404 <main+0x160>)
 8005334:	4a2e      	ldr	r2, [pc, #184]	; (80053f0 <main+0x14c>)
 8005336:	60da      	str	r2, [r3, #12]
     motor.speed=300;
 8005338:	4b32      	ldr	r3, [pc, #200]	; (8005404 <main+0x160>)
 800533a:	4a34      	ldr	r2, [pc, #208]	; (800540c <main+0x168>)
 800533c:	611a      	str	r2, [r3, #16]
     motor.stepChannel=TIM_CHANNEL_1;
 800533e:	4b31      	ldr	r3, [pc, #196]	; (8005404 <main+0x160>)
 8005340:	2200      	movs	r2, #0
 8005342:	609a      	str	r2, [r3, #8]
     setSpeed(&motor, 100);
 8005344:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8005410 <main+0x16c>
 8005348:	482e      	ldr	r0, [pc, #184]	; (8005404 <main+0x160>)
 800534a:	f7ff fedd 	bl	8005108 <setSpeed>


     amt222_readPos (); // dummy read
 800534e:	f000 fb5b 	bl	8005a08 <amt222_readPos>
	 currentPosition = (amt222_readPos ()/4096.0)*360.0;
 8005352:	f000 fb59 	bl	8005a08 <amt222_readPos>
 8005356:	4603      	mov	r3, r0
 8005358:	4618      	mov	r0, r3
 800535a:	f7fb f903 	bl	8000564 <__aeabi_i2d>
 800535e:	f04f 0200 	mov.w	r2, #0
 8005362:	4b2c      	ldr	r3, [pc, #176]	; (8005414 <main+0x170>)
 8005364:	f7fb fa92 	bl	800088c <__aeabi_ddiv>
 8005368:	4602      	mov	r2, r0
 800536a:	460b      	mov	r3, r1
 800536c:	4610      	mov	r0, r2
 800536e:	4619      	mov	r1, r3
 8005370:	f04f 0200 	mov.w	r2, #0
 8005374:	4b28      	ldr	r3, [pc, #160]	; (8005418 <main+0x174>)
 8005376:	f7fb f95f 	bl	8000638 <__aeabi_dmul>
 800537a:	4602      	mov	r2, r0
 800537c:	460b      	mov	r3, r1
 800537e:	4610      	mov	r0, r2
 8005380:	4619      	mov	r1, r3
 8005382:	f7fb fc31 	bl	8000be8 <__aeabi_d2uiz>
 8005386:	4603      	mov	r3, r0
 8005388:	b29a      	uxth	r2, r3
 800538a:	4b24      	ldr	r3, [pc, #144]	; (800541c <main+0x178>)
 800538c:	801a      	strh	r2, [r3, #0]
  {

// steer control system
  	  // simulate can input with target constant

pTxHeader.ExtId = 0x00000154;
 800538e:	4b24      	ldr	r3, [pc, #144]	; (8005420 <main+0x17c>)
 8005390:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8005394:	605a      	str	r2, [r3, #4]

	  r[0] = 1;
 8005396:	4b23      	ldr	r3, [pc, #140]	; (8005424 <main+0x180>)
 8005398:	2201      	movs	r2, #1
 800539a:	701a      	strb	r2, [r3, #0]
      r[1] = 2;
 800539c:	4b21      	ldr	r3, [pc, #132]	; (8005424 <main+0x180>)
 800539e:	2202      	movs	r2, #2
 80053a0:	705a      	strb	r2, [r3, #1]
	  r[2] = 3;
 80053a2:	4b20      	ldr	r3, [pc, #128]	; (8005424 <main+0x180>)
 80053a4:	2203      	movs	r2, #3
 80053a6:	709a      	strb	r2, [r3, #2]
      r[3] = 4;
 80053a8:	4b1e      	ldr	r3, [pc, #120]	; (8005424 <main+0x180>)
 80053aa:	2204      	movs	r2, #4
 80053ac:	70da      	strb	r2, [r3, #3]


  HAL_CAN_AddTxMessage(&hcan1, &pTxHeader, r, &TxMailbox);
 80053ae:	4b1e      	ldr	r3, [pc, #120]	; (8005428 <main+0x184>)
 80053b0:	4a1c      	ldr	r2, [pc, #112]	; (8005424 <main+0x180>)
 80053b2:	491b      	ldr	r1, [pc, #108]	; (8005420 <main+0x17c>)
 80053b4:	4810      	ldr	r0, [pc, #64]	; (80053f8 <main+0x154>)
 80053b6:	f7fc f869 	bl	800148c <HAL_CAN_AddTxMessage>

if(target != prev_target) {
 80053ba:	4b1c      	ldr	r3, [pc, #112]	; (800542c <main+0x188>)
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	4b1c      	ldr	r3, [pc, #112]	; (8005430 <main+0x18c>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d008      	beq.n	80053d8 <main+0x134>
	steer_control((int)target);
 80053c6:	4b19      	ldr	r3, [pc, #100]	; (800542c <main+0x188>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 fc14 	bl	8005bf8 <steer_control>
	prev_target = target;
 80053d0:	4b16      	ldr	r3, [pc, #88]	; (800542c <main+0x188>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a16      	ldr	r2, [pc, #88]	; (8005430 <main+0x18c>)
 80053d6:	6013      	str	r3, [r2, #0]
}

HAL_Delay(1000);
 80053d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80053dc:	f7fb fe12 	bl	8001004 <HAL_Delay>
pTxHeader.ExtId = 0x00000154;
 80053e0:	e7d5      	b.n	800538e <main+0xea>
 80053e2:	bf00      	nop
 80053e4:	20000444 	.word	0x20000444
 80053e8:	40020400 	.word	0x40020400
 80053ec:	08009160 	.word	0x08009160
 80053f0:	2000023c 	.word	0x2000023c
 80053f4:	08009170 	.word	0x08009170
 80053f8:	20000488 	.word	0x20000488
 80053fc:	08009190 	.word	0x08009190
 8005400:	080091a8 	.word	0x080091a8
 8005404:	20000414 	.word	0x20000414
 8005408:	40020800 	.word	0x40020800
 800540c:	43960000 	.word	0x43960000
 8005410:	42c80000 	.word	0x42c80000
 8005414:	40b00000 	.word	0x40b00000
 8005418:	40768000 	.word	0x40768000
 800541c:	2000031e 	.word	0x2000031e
 8005420:	20000288 	.word	0x20000288
 8005424:	200002e8 	.word	0x200002e8
 8005428:	20000370 	.word	0x20000370
 800542c:	200001fc 	.word	0x200001fc
 8005430:	20000200 	.word	0x20000200

08005434 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b094      	sub	sp, #80	; 0x50
 8005438:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800543a:	f107 031c 	add.w	r3, r7, #28
 800543e:	2234      	movs	r2, #52	; 0x34
 8005440:	2100      	movs	r1, #0
 8005442:	4618      	mov	r0, r3
 8005444:	f000 fff8 	bl	8006438 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005448:	f107 0308 	add.w	r3, r7, #8
 800544c:	2200      	movs	r2, #0
 800544e:	601a      	str	r2, [r3, #0]
 8005450:	605a      	str	r2, [r3, #4]
 8005452:	609a      	str	r2, [r3, #8]
 8005454:	60da      	str	r2, [r3, #12]
 8005456:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005458:	2300      	movs	r3, #0
 800545a:	607b      	str	r3, [r7, #4]
 800545c:	4b2a      	ldr	r3, [pc, #168]	; (8005508 <SystemClock_Config+0xd4>)
 800545e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005460:	4a29      	ldr	r2, [pc, #164]	; (8005508 <SystemClock_Config+0xd4>)
 8005462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005466:	6413      	str	r3, [r2, #64]	; 0x40
 8005468:	4b27      	ldr	r3, [pc, #156]	; (8005508 <SystemClock_Config+0xd4>)
 800546a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005470:	607b      	str	r3, [r7, #4]
 8005472:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8005474:	2300      	movs	r3, #0
 8005476:	603b      	str	r3, [r7, #0]
 8005478:	4b24      	ldr	r3, [pc, #144]	; (800550c <SystemClock_Config+0xd8>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005480:	4a22      	ldr	r2, [pc, #136]	; (800550c <SystemClock_Config+0xd8>)
 8005482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005486:	6013      	str	r3, [r2, #0]
 8005488:	4b20      	ldr	r3, [pc, #128]	; (800550c <SystemClock_Config+0xd8>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005490:	603b      	str	r3, [r7, #0]
 8005492:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005494:	2301      	movs	r3, #1
 8005496:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005498:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800549c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800549e:	2302      	movs	r3, #2
 80054a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80054a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80054a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80054a8:	2304      	movs	r3, #4
 80054aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 128;
 80054ac:	2380      	movs	r3, #128	; 0x80
 80054ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80054b0:	2302      	movs	r3, #2
 80054b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80054b4:	2302      	movs	r3, #2
 80054b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80054b8:	2302      	movs	r3, #2
 80054ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80054bc:	f107 031c 	add.w	r3, r7, #28
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7fd f9b1 	bl	8002828 <HAL_RCC_OscConfig>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d001      	beq.n	80054d0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80054cc:	f000 fc14 	bl	8005cf8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80054d0:	230f      	movs	r3, #15
 80054d2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80054d4:	2302      	movs	r3, #2
 80054d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80054d8:	2300      	movs	r3, #0
 80054da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80054dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80054e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80054e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054e6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80054e8:	f107 0308 	add.w	r3, r7, #8
 80054ec:	2104      	movs	r1, #4
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7fc fece 	bl	8002290 <HAL_RCC_ClockConfig>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d001      	beq.n	80054fe <SystemClock_Config+0xca>
  {
    Error_Handler();
 80054fa:	f000 fbfd 	bl	8005cf8 <Error_Handler>
  }
}
 80054fe:	bf00      	nop
 8005500:	3750      	adds	r7, #80	; 0x50
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	40023800 	.word	0x40023800
 800550c:	40007000 	.word	0x40007000

08005510 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8005514:	4b17      	ldr	r3, [pc, #92]	; (8005574 <MX_CAN1_Init+0x64>)
 8005516:	4a18      	ldr	r2, [pc, #96]	; (8005578 <MX_CAN1_Init+0x68>)
 8005518:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800551a:	4b16      	ldr	r3, [pc, #88]	; (8005574 <MX_CAN1_Init+0x64>)
 800551c:	2210      	movs	r2, #16
 800551e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8005520:	4b14      	ldr	r3, [pc, #80]	; (8005574 <MX_CAN1_Init+0x64>)
 8005522:	2200      	movs	r2, #0
 8005524:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8005526:	4b13      	ldr	r3, [pc, #76]	; (8005574 <MX_CAN1_Init+0x64>)
 8005528:	2200      	movs	r2, #0
 800552a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800552c:	4b11      	ldr	r3, [pc, #68]	; (8005574 <MX_CAN1_Init+0x64>)
 800552e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8005532:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8005534:	4b0f      	ldr	r3, [pc, #60]	; (8005574 <MX_CAN1_Init+0x64>)
 8005536:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800553a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800553c:	4b0d      	ldr	r3, [pc, #52]	; (8005574 <MX_CAN1_Init+0x64>)
 800553e:	2200      	movs	r2, #0
 8005540:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8005542:	4b0c      	ldr	r3, [pc, #48]	; (8005574 <MX_CAN1_Init+0x64>)
 8005544:	2200      	movs	r2, #0
 8005546:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8005548:	4b0a      	ldr	r3, [pc, #40]	; (8005574 <MX_CAN1_Init+0x64>)
 800554a:	2200      	movs	r2, #0
 800554c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 800554e:	4b09      	ldr	r3, [pc, #36]	; (8005574 <MX_CAN1_Init+0x64>)
 8005550:	2201      	movs	r2, #1
 8005552:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8005554:	4b07      	ldr	r3, [pc, #28]	; (8005574 <MX_CAN1_Init+0x64>)
 8005556:	2200      	movs	r2, #0
 8005558:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800555a:	4b06      	ldr	r3, [pc, #24]	; (8005574 <MX_CAN1_Init+0x64>)
 800555c:	2200      	movs	r2, #0
 800555e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8005560:	4804      	ldr	r0, [pc, #16]	; (8005574 <MX_CAN1_Init+0x64>)
 8005562:	f7fb fd73 	bl	800104c <HAL_CAN_Init>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800556c:	f000 fbc4 	bl	8005cf8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8005570:	bf00      	nop
 8005572:	bd80      	pop	{r7, pc}
 8005574:	20000488 	.word	0x20000488
 8005578:	40006400 	.word	0x40006400

0800557c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005580:	4b17      	ldr	r3, [pc, #92]	; (80055e0 <MX_SPI1_Init+0x64>)
 8005582:	4a18      	ldr	r2, [pc, #96]	; (80055e4 <MX_SPI1_Init+0x68>)
 8005584:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005586:	4b16      	ldr	r3, [pc, #88]	; (80055e0 <MX_SPI1_Init+0x64>)
 8005588:	f44f 7282 	mov.w	r2, #260	; 0x104
 800558c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800558e:	4b14      	ldr	r3, [pc, #80]	; (80055e0 <MX_SPI1_Init+0x64>)
 8005590:	2200      	movs	r2, #0
 8005592:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005594:	4b12      	ldr	r3, [pc, #72]	; (80055e0 <MX_SPI1_Init+0x64>)
 8005596:	2200      	movs	r2, #0
 8005598:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800559a:	4b11      	ldr	r3, [pc, #68]	; (80055e0 <MX_SPI1_Init+0x64>)
 800559c:	2200      	movs	r2, #0
 800559e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80055a0:	4b0f      	ldr	r3, [pc, #60]	; (80055e0 <MX_SPI1_Init+0x64>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80055a6:	4b0e      	ldr	r3, [pc, #56]	; (80055e0 <MX_SPI1_Init+0x64>)
 80055a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80055ae:	4b0c      	ldr	r3, [pc, #48]	; (80055e0 <MX_SPI1_Init+0x64>)
 80055b0:	2230      	movs	r2, #48	; 0x30
 80055b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80055b4:	4b0a      	ldr	r3, [pc, #40]	; (80055e0 <MX_SPI1_Init+0x64>)
 80055b6:	2200      	movs	r2, #0
 80055b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80055ba:	4b09      	ldr	r3, [pc, #36]	; (80055e0 <MX_SPI1_Init+0x64>)
 80055bc:	2200      	movs	r2, #0
 80055be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055c0:	4b07      	ldr	r3, [pc, #28]	; (80055e0 <MX_SPI1_Init+0x64>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80055c6:	4b06      	ldr	r3, [pc, #24]	; (80055e0 <MX_SPI1_Init+0x64>)
 80055c8:	220a      	movs	r2, #10
 80055ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80055cc:	4804      	ldr	r0, [pc, #16]	; (80055e0 <MX_SPI1_Init+0x64>)
 80055ce:	f7fd fbc9 	bl	8002d64 <HAL_SPI_Init>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d001      	beq.n	80055dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80055d8:	f000 fb8e 	bl	8005cf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80055dc:	bf00      	nop
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	20000374 	.word	0x20000374
 80055e4:	40013000 	.word	0x40013000

080055e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80055ee:	463b      	mov	r3, r7
 80055f0:	2200      	movs	r2, #0
 80055f2:	601a      	str	r2, [r3, #0]
 80055f4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80055f6:	4b18      	ldr	r3, [pc, #96]	; (8005658 <MX_TIM1_Init+0x70>)
 80055f8:	4a18      	ldr	r2, [pc, #96]	; (800565c <MX_TIM1_Init+0x74>)
 80055fa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32000-1;
 80055fc:	4b16      	ldr	r3, [pc, #88]	; (8005658 <MX_TIM1_Init+0x70>)
 80055fe:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8005602:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005604:	4b14      	ldr	r3, [pc, #80]	; (8005658 <MX_TIM1_Init+0x70>)
 8005606:	2200      	movs	r2, #0
 8005608:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 250-1;
 800560a:	4b13      	ldr	r3, [pc, #76]	; (8005658 <MX_TIM1_Init+0x70>)
 800560c:	22f9      	movs	r2, #249	; 0xf9
 800560e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005610:	4b11      	ldr	r3, [pc, #68]	; (8005658 <MX_TIM1_Init+0x70>)
 8005612:	2200      	movs	r2, #0
 8005614:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 10;
 8005616:	4b10      	ldr	r3, [pc, #64]	; (8005658 <MX_TIM1_Init+0x70>)
 8005618:	220a      	movs	r2, #10
 800561a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800561c:	4b0e      	ldr	r3, [pc, #56]	; (8005658 <MX_TIM1_Init+0x70>)
 800561e:	2280      	movs	r2, #128	; 0x80
 8005620:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8005622:	2108      	movs	r1, #8
 8005624:	480c      	ldr	r0, [pc, #48]	; (8005658 <MX_TIM1_Init+0x70>)
 8005626:	f7fe f9d9 	bl	80039dc <HAL_TIM_OnePulse_Init>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d001      	beq.n	8005634 <MX_TIM1_Init+0x4c>
  {
    Error_Handler();
 8005630:	f000 fb62 	bl	8005cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005634:	2320      	movs	r3, #32
 8005636:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005638:	2300      	movs	r3, #0
 800563a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800563c:	463b      	mov	r3, r7
 800563e:	4619      	mov	r1, r3
 8005640:	4805      	ldr	r0, [pc, #20]	; (8005658 <MX_TIM1_Init+0x70>)
 8005642:	f7fe ffe7 	bl	8004614 <HAL_TIMEx_MasterConfigSynchronization>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d001      	beq.n	8005650 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 800564c:	f000 fb54 	bl	8005cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8005650:	bf00      	nop
 8005652:	3708      	adds	r7, #8
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	20000328 	.word	0x20000328
 800565c:	40010000 	.word	0x40010000

08005660 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005666:	f107 0308 	add.w	r3, r7, #8
 800566a:	2200      	movs	r2, #0
 800566c:	601a      	str	r2, [r3, #0]
 800566e:	605a      	str	r2, [r3, #4]
 8005670:	609a      	str	r2, [r3, #8]
 8005672:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005674:	463b      	mov	r3, r7
 8005676:	2200      	movs	r2, #0
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800567c:	4b1d      	ldr	r3, [pc, #116]	; (80056f4 <MX_TIM2_Init+0x94>)
 800567e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005682:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005684:	4b1b      	ldr	r3, [pc, #108]	; (80056f4 <MX_TIM2_Init+0x94>)
 8005686:	2200      	movs	r2, #0
 8005688:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800568a:	4b1a      	ldr	r3, [pc, #104]	; (80056f4 <MX_TIM2_Init+0x94>)
 800568c:	2200      	movs	r2, #0
 800568e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8005690:	4b18      	ldr	r3, [pc, #96]	; (80056f4 <MX_TIM2_Init+0x94>)
 8005692:	f04f 32ff 	mov.w	r2, #4294967295
 8005696:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005698:	4b16      	ldr	r3, [pc, #88]	; (80056f4 <MX_TIM2_Init+0x94>)
 800569a:	2200      	movs	r2, #0
 800569c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800569e:	4b15      	ldr	r3, [pc, #84]	; (80056f4 <MX_TIM2_Init+0x94>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80056a4:	4813      	ldr	r0, [pc, #76]	; (80056f4 <MX_TIM2_Init+0x94>)
 80056a6:	f7fd ffc9 	bl	800363c <HAL_TIM_Base_Init>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d001      	beq.n	80056b4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80056b0:	f000 fb22 	bl	8005cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80056b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80056ba:	f107 0308 	add.w	r3, r7, #8
 80056be:	4619      	mov	r1, r3
 80056c0:	480c      	ldr	r0, [pc, #48]	; (80056f4 <MX_TIM2_Init+0x94>)
 80056c2:	f7fe fba1 	bl	8003e08 <HAL_TIM_ConfigClockSource>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d001      	beq.n	80056d0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80056cc:	f000 fb14 	bl	8005cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056d0:	2300      	movs	r3, #0
 80056d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056d4:	2300      	movs	r3, #0
 80056d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80056d8:	463b      	mov	r3, r7
 80056da:	4619      	mov	r1, r3
 80056dc:	4805      	ldr	r0, [pc, #20]	; (80056f4 <MX_TIM2_Init+0x94>)
 80056de:	f7fe ff99 	bl	8004614 <HAL_TIMEx_MasterConfigSynchronization>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d001      	beq.n	80056ec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80056e8:	f000 fb06 	bl	8005cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80056ec:	bf00      	nop
 80056ee:	3718      	adds	r7, #24
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	200003cc 	.word	0x200003cc

080056f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80056fe:	f107 0308 	add.w	r3, r7, #8
 8005702:	2200      	movs	r2, #0
 8005704:	601a      	str	r2, [r3, #0]
 8005706:	605a      	str	r2, [r3, #4]
 8005708:	609a      	str	r2, [r3, #8]
 800570a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800570c:	463b      	mov	r3, r7
 800570e:	2200      	movs	r2, #0
 8005710:	601a      	str	r2, [r3, #0]
 8005712:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005714:	4b1d      	ldr	r3, [pc, #116]	; (800578c <MX_TIM3_Init+0x94>)
 8005716:	4a1e      	ldr	r2, [pc, #120]	; (8005790 <MX_TIM3_Init+0x98>)
 8005718:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800571a:	4b1c      	ldr	r3, [pc, #112]	; (800578c <MX_TIM3_Init+0x94>)
 800571c:	2200      	movs	r2, #0
 800571e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005720:	4b1a      	ldr	r3, [pc, #104]	; (800578c <MX_TIM3_Init+0x94>)
 8005722:	2200      	movs	r2, #0
 8005724:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005726:	4b19      	ldr	r3, [pc, #100]	; (800578c <MX_TIM3_Init+0x94>)
 8005728:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800572c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800572e:	4b17      	ldr	r3, [pc, #92]	; (800578c <MX_TIM3_Init+0x94>)
 8005730:	2200      	movs	r2, #0
 8005732:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005734:	4b15      	ldr	r3, [pc, #84]	; (800578c <MX_TIM3_Init+0x94>)
 8005736:	2200      	movs	r2, #0
 8005738:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800573a:	4814      	ldr	r0, [pc, #80]	; (800578c <MX_TIM3_Init+0x94>)
 800573c:	f7fd ff7e 	bl	800363c <HAL_TIM_Base_Init>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8005746:	f000 fad7 	bl	8005cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800574a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800574e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005750:	f107 0308 	add.w	r3, r7, #8
 8005754:	4619      	mov	r1, r3
 8005756:	480d      	ldr	r0, [pc, #52]	; (800578c <MX_TIM3_Init+0x94>)
 8005758:	f7fe fb56 	bl	8003e08 <HAL_TIM_ConfigClockSource>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d001      	beq.n	8005766 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8005762:	f000 fac9 	bl	8005cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005766:	2300      	movs	r3, #0
 8005768:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800576a:	2300      	movs	r3, #0
 800576c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800576e:	463b      	mov	r3, r7
 8005770:	4619      	mov	r1, r3
 8005772:	4806      	ldr	r0, [pc, #24]	; (800578c <MX_TIM3_Init+0x94>)
 8005774:	f7fe ff4e 	bl	8004614 <HAL_TIMEx_MasterConfigSynchronization>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800577e:	f000 fabb 	bl	8005cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005782:	bf00      	nop
 8005784:	3718      	adds	r7, #24
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	200002a0 	.word	0x200002a0
 8005790:	40000400 	.word	0x40000400

08005794 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b092      	sub	sp, #72	; 0x48
 8005798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800579a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800579e:	2200      	movs	r2, #0
 80057a0:	601a      	str	r2, [r3, #0]
 80057a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80057a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057a8:	2200      	movs	r2, #0
 80057aa:	601a      	str	r2, [r3, #0]
 80057ac:	605a      	str	r2, [r3, #4]
 80057ae:	609a      	str	r2, [r3, #8]
 80057b0:	60da      	str	r2, [r3, #12]
 80057b2:	611a      	str	r2, [r3, #16]
 80057b4:	615a      	str	r2, [r3, #20]
 80057b6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80057b8:	1d3b      	adds	r3, r7, #4
 80057ba:	2220      	movs	r2, #32
 80057bc:	2100      	movs	r1, #0
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 fe3a 	bl	8006438 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80057c4:	4b37      	ldr	r3, [pc, #220]	; (80058a4 <MX_TIM8_Init+0x110>)
 80057c6:	4a38      	ldr	r2, [pc, #224]	; (80058a8 <MX_TIM8_Init+0x114>)
 80057c8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 32000-1;
 80057ca:	4b36      	ldr	r3, [pc, #216]	; (80058a4 <MX_TIM8_Init+0x110>)
 80057cc:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80057d0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057d2:	4b34      	ldr	r3, [pc, #208]	; (80058a4 <MX_TIM8_Init+0x110>)
 80057d4:	2200      	movs	r2, #0
 80057d6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 250-1;
 80057d8:	4b32      	ldr	r3, [pc, #200]	; (80058a4 <MX_TIM8_Init+0x110>)
 80057da:	22f9      	movs	r2, #249	; 0xf9
 80057dc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057de:	4b31      	ldr	r3, [pc, #196]	; (80058a4 <MX_TIM8_Init+0x110>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 10;
 80057e4:	4b2f      	ldr	r3, [pc, #188]	; (80058a4 <MX_TIM8_Init+0x110>)
 80057e6:	220a      	movs	r2, #10
 80057e8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80057ea:	4b2e      	ldr	r3, [pc, #184]	; (80058a4 <MX_TIM8_Init+0x110>)
 80057ec:	2280      	movs	r2, #128	; 0x80
 80057ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80057f0:	482c      	ldr	r0, [pc, #176]	; (80058a4 <MX_TIM8_Init+0x110>)
 80057f2:	f7fd ffdb 	bl	80037ac <HAL_TIM_PWM_Init>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d001      	beq.n	8005800 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80057fc:	f000 fa7c 	bl	8005cf8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 8005800:	2108      	movs	r1, #8
 8005802:	4828      	ldr	r0, [pc, #160]	; (80058a4 <MX_TIM8_Init+0x110>)
 8005804:	f7fe f8ea 	bl	80039dc <HAL_TIM_OnePulse_Init>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 800580e:	f000 fa73 	bl	8005cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005812:	2320      	movs	r3, #32
 8005814:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005816:	2300      	movs	r3, #0
 8005818:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800581a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800581e:	4619      	mov	r1, r3
 8005820:	4820      	ldr	r0, [pc, #128]	; (80058a4 <MX_TIM8_Init+0x110>)
 8005822:	f7fe fef7 	bl	8004614 <HAL_TIMEx_MasterConfigSynchronization>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d001      	beq.n	8005830 <MX_TIM8_Init+0x9c>
  {
    Error_Handler();
 800582c:	f000 fa64 	bl	8005cf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005830:	2360      	movs	r3, #96	; 0x60
 8005832:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8005834:	2300      	movs	r3, #0
 8005836:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005838:	2300      	movs	r3, #0
 800583a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800583c:	2300      	movs	r3, #0
 800583e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005840:	2300      	movs	r3, #0
 8005842:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005844:	2300      	movs	r3, #0
 8005846:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005848:	2300      	movs	r3, #0
 800584a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800584c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005850:	2200      	movs	r2, #0
 8005852:	4619      	mov	r1, r3
 8005854:	4813      	ldr	r0, [pc, #76]	; (80058a4 <MX_TIM8_Init+0x110>)
 8005856:	f7fe fa19 	bl	8003c8c <HAL_TIM_PWM_ConfigChannel>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d001      	beq.n	8005864 <MX_TIM8_Init+0xd0>
  {
    Error_Handler();
 8005860:	f000 fa4a 	bl	8005cf8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005864:	2300      	movs	r3, #0
 8005866:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005868:	2300      	movs	r3, #0
 800586a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800586c:	2300      	movs	r3, #0
 800586e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005870:	2300      	movs	r3, #0
 8005872:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005874:	2300      	movs	r3, #0
 8005876:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005878:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800587c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800587e:	2300      	movs	r3, #0
 8005880:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8005882:	1d3b      	adds	r3, r7, #4
 8005884:	4619      	mov	r1, r3
 8005886:	4807      	ldr	r0, [pc, #28]	; (80058a4 <MX_TIM8_Init+0x110>)
 8005888:	f7fe ff40 	bl	800470c <HAL_TIMEx_ConfigBreakDeadTime>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d001      	beq.n	8005896 <MX_TIM8_Init+0x102>
  {
    Error_Handler();
 8005892:	f000 fa31 	bl	8005cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8005896:	4803      	ldr	r0, [pc, #12]	; (80058a4 <MX_TIM8_Init+0x110>)
 8005898:	f000 fc54 	bl	8006144 <HAL_TIM_MspPostInit>

}
 800589c:	bf00      	nop
 800589e:	3748      	adds	r7, #72	; 0x48
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	2000023c 	.word	0x2000023c
 80058a8:	40010400 	.word	0x40010400

080058ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80058b0:	4b11      	ldr	r3, [pc, #68]	; (80058f8 <MX_USART2_UART_Init+0x4c>)
 80058b2:	4a12      	ldr	r2, [pc, #72]	; (80058fc <MX_USART2_UART_Init+0x50>)
 80058b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80058b6:	4b10      	ldr	r3, [pc, #64]	; (80058f8 <MX_USART2_UART_Init+0x4c>)
 80058b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80058bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80058be:	4b0e      	ldr	r3, [pc, #56]	; (80058f8 <MX_USART2_UART_Init+0x4c>)
 80058c0:	2200      	movs	r2, #0
 80058c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80058c4:	4b0c      	ldr	r3, [pc, #48]	; (80058f8 <MX_USART2_UART_Init+0x4c>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80058ca:	4b0b      	ldr	r3, [pc, #44]	; (80058f8 <MX_USART2_UART_Init+0x4c>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80058d0:	4b09      	ldr	r3, [pc, #36]	; (80058f8 <MX_USART2_UART_Init+0x4c>)
 80058d2:	220c      	movs	r2, #12
 80058d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80058d6:	4b08      	ldr	r3, [pc, #32]	; (80058f8 <MX_USART2_UART_Init+0x4c>)
 80058d8:	2200      	movs	r2, #0
 80058da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80058dc:	4b06      	ldr	r3, [pc, #24]	; (80058f8 <MX_USART2_UART_Init+0x4c>)
 80058de:	2200      	movs	r2, #0
 80058e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80058e2:	4805      	ldr	r0, [pc, #20]	; (80058f8 <MX_USART2_UART_Init+0x4c>)
 80058e4:	f7fe ff78 	bl	80047d8 <HAL_UART_Init>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d001      	beq.n	80058f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80058ee:	f000 fa03 	bl	8005cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80058f2:	bf00      	nop
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	20000444 	.word	0x20000444
 80058fc:	40004400 	.word	0x40004400

08005900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b08a      	sub	sp, #40	; 0x28
 8005904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005906:	f107 0314 	add.w	r3, r7, #20
 800590a:	2200      	movs	r2, #0
 800590c:	601a      	str	r2, [r3, #0]
 800590e:	605a      	str	r2, [r3, #4]
 8005910:	609a      	str	r2, [r3, #8]
 8005912:	60da      	str	r2, [r3, #12]
 8005914:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005916:	2300      	movs	r3, #0
 8005918:	613b      	str	r3, [r7, #16]
 800591a:	4b37      	ldr	r3, [pc, #220]	; (80059f8 <MX_GPIO_Init+0xf8>)
 800591c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591e:	4a36      	ldr	r2, [pc, #216]	; (80059f8 <MX_GPIO_Init+0xf8>)
 8005920:	f043 0304 	orr.w	r3, r3, #4
 8005924:	6313      	str	r3, [r2, #48]	; 0x30
 8005926:	4b34      	ldr	r3, [pc, #208]	; (80059f8 <MX_GPIO_Init+0xf8>)
 8005928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592a:	f003 0304 	and.w	r3, r3, #4
 800592e:	613b      	str	r3, [r7, #16]
 8005930:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005932:	2300      	movs	r3, #0
 8005934:	60fb      	str	r3, [r7, #12]
 8005936:	4b30      	ldr	r3, [pc, #192]	; (80059f8 <MX_GPIO_Init+0xf8>)
 8005938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593a:	4a2f      	ldr	r2, [pc, #188]	; (80059f8 <MX_GPIO_Init+0xf8>)
 800593c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005940:	6313      	str	r3, [r2, #48]	; 0x30
 8005942:	4b2d      	ldr	r3, [pc, #180]	; (80059f8 <MX_GPIO_Init+0xf8>)
 8005944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800594a:	60fb      	str	r3, [r7, #12]
 800594c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800594e:	2300      	movs	r3, #0
 8005950:	60bb      	str	r3, [r7, #8]
 8005952:	4b29      	ldr	r3, [pc, #164]	; (80059f8 <MX_GPIO_Init+0xf8>)
 8005954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005956:	4a28      	ldr	r2, [pc, #160]	; (80059f8 <MX_GPIO_Init+0xf8>)
 8005958:	f043 0301 	orr.w	r3, r3, #1
 800595c:	6313      	str	r3, [r2, #48]	; 0x30
 800595e:	4b26      	ldr	r3, [pc, #152]	; (80059f8 <MX_GPIO_Init+0xf8>)
 8005960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	60bb      	str	r3, [r7, #8]
 8005968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800596a:	2300      	movs	r3, #0
 800596c:	607b      	str	r3, [r7, #4]
 800596e:	4b22      	ldr	r3, [pc, #136]	; (80059f8 <MX_GPIO_Init+0xf8>)
 8005970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005972:	4a21      	ldr	r2, [pc, #132]	; (80059f8 <MX_GPIO_Init+0xf8>)
 8005974:	f043 0302 	orr.w	r3, r3, #2
 8005978:	6313      	str	r3, [r2, #48]	; 0x30
 800597a:	4b1f      	ldr	r3, [pc, #124]	; (80059f8 <MX_GPIO_Init+0xf8>)
 800597c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597e:	f003 0302 	and.w	r3, r3, #2
 8005982:	607b      	str	r3, [r7, #4]
 8005984:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_CS_Pin|DIR_Pin, GPIO_PIN_RESET);
 8005986:	2200      	movs	r2, #0
 8005988:	2190      	movs	r1, #144	; 0x90
 800598a:	481c      	ldr	r0, [pc, #112]	; (80059fc <MX_GPIO_Init+0xfc>)
 800598c:	f7fc fc66 	bl	800225c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TEMP_SENSOR_PIN_Pin|EN_Pin, GPIO_PIN_RESET);
 8005990:	2200      	movs	r2, #0
 8005992:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8005996:	481a      	ldr	r0, [pc, #104]	; (8005a00 <MX_GPIO_Init+0x100>)
 8005998:	f7fc fc60 	bl	800225c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800599c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80059a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80059a2:	4b18      	ldr	r3, [pc, #96]	; (8005a04 <MX_GPIO_Init+0x104>)
 80059a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059a6:	2300      	movs	r3, #0
 80059a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80059aa:	f107 0314 	add.w	r3, r7, #20
 80059ae:	4619      	mov	r1, r3
 80059b0:	4812      	ldr	r0, [pc, #72]	; (80059fc <MX_GPIO_Init+0xfc>)
 80059b2:	f7fc fabf 	bl	8001f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS_Pin DIR_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|DIR_Pin;
 80059b6:	2390      	movs	r3, #144	; 0x90
 80059b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80059ba:	2301      	movs	r3, #1
 80059bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059be:	2300      	movs	r3, #0
 80059c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059c2:	2300      	movs	r3, #0
 80059c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80059c6:	f107 0314 	add.w	r3, r7, #20
 80059ca:	4619      	mov	r1, r3
 80059cc:	480b      	ldr	r0, [pc, #44]	; (80059fc <MX_GPIO_Init+0xfc>)
 80059ce:	f7fc fab1 	bl	8001f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : TEMP_SENSOR_PIN_Pin EN_Pin */
  GPIO_InitStruct.Pin = TEMP_SENSOR_PIN_Pin|EN_Pin;
 80059d2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80059d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80059d8:	2301      	movs	r3, #1
 80059da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059dc:	2300      	movs	r3, #0
 80059de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059e0:	2300      	movs	r3, #0
 80059e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059e4:	f107 0314 	add.w	r3, r7, #20
 80059e8:	4619      	mov	r1, r3
 80059ea:	4805      	ldr	r0, [pc, #20]	; (8005a00 <MX_GPIO_Init+0x100>)
 80059ec:	f7fc faa2 	bl	8001f34 <HAL_GPIO_Init>

}
 80059f0:	bf00      	nop
 80059f2:	3728      	adds	r7, #40	; 0x28
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	40023800 	.word	0x40023800
 80059fc:	40020800 	.word	0x40020800
 8005a00:	40020400 	.word	0x40020400
 8005a04:	10210000 	.word	0x10210000

08005a08 <amt222_readPos>:

/* USER CODE BEGIN 4 */
uint16_t amt222_readPos ()
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b088      	sub	sp, #32
 8005a0c:	af00      	add	r7, sp, #0

	uint8_t buff1 = 0x00;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	75fb      	strb	r3, [r7, #23]
	uint8_t buff2 = 0x00;
 8005a12:	2300      	movs	r3, #0
 8005a14:	75bb      	strb	r3, [r7, #22]

	uint16_t currPos;

	uint8_t binaryArray[16];

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET); // pull cs low
 8005a16:	2200      	movs	r2, #0
 8005a18:	2110      	movs	r1, #16
 8005a1a:	4840      	ldr	r0, [pc, #256]	; (8005b1c <amt222_readPos+0x114>)
 8005a1c:	f7fc fc1e 	bl	800225c <HAL_GPIO_WritePin>

	//delay_us(10);
	HAL_Delay(0.1);
 8005a20:	2000      	movs	r0, #0
 8005a22:	f7fb faef 	bl	8001004 <HAL_Delay>

	//HAL_SPI_Transmit (&hspi2, &address, 1, 100);  // send address

  //delay_us(5);

	HAL_SPI_Receive (&hspi1, &buff1, 1, 100);  // receive 1 bytes data
 8005a26:	f107 0117 	add.w	r1, r7, #23
 8005a2a:	2364      	movs	r3, #100	; 0x64
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	483c      	ldr	r0, [pc, #240]	; (8005b20 <amt222_readPos+0x118>)
 8005a30:	f7fd fa21 	bl	8002e76 <HAL_SPI_Receive>

//	 delay_us(10);
	HAL_Delay(0.1);
 8005a34:	2000      	movs	r0, #0
 8005a36:	f7fb fae5 	bl	8001004 <HAL_Delay>

	HAL_SPI_Receive (&hspi1, &buff2, 1, 100);  // receive 1 bytes data
 8005a3a:	f107 0116 	add.w	r1, r7, #22
 8005a3e:	2364      	movs	r3, #100	; 0x64
 8005a40:	2201      	movs	r2, #1
 8005a42:	4837      	ldr	r0, [pc, #220]	; (8005b20 <amt222_readPos+0x118>)
 8005a44:	f7fd fa17 	bl	8002e76 <HAL_SPI_Receive>

	 //delay_us(10);
	HAL_Delay(0.1);
 8005a48:	2000      	movs	r0, #0
 8005a4a:	f7fb fadb 	bl	8001004 <HAL_Delay>

HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET); // pull cs high
 8005a4e:	2201      	movs	r2, #1
 8005a50:	2110      	movs	r1, #16
 8005a52:	4832      	ldr	r0, [pc, #200]	; (8005b1c <amt222_readPos+0x114>)
 8005a54:	f7fc fc02 	bl	800225c <HAL_GPIO_WritePin>

 currPos = ((uint16_t)buff1 << 8 ) | ((uint16_t)buff2);
 8005a58:	7dfb      	ldrb	r3, [r7, #23]
 8005a5a:	021b      	lsls	r3, r3, #8
 8005a5c:	b21a      	sxth	r2, r3
 8005a5e:	7dbb      	ldrb	r3, [r7, #22]
 8005a60:	b21b      	sxth	r3, r3
 8005a62:	4313      	orrs	r3, r2
 8005a64:	b21b      	sxth	r3, r3
 8005a66:	83fb      	strh	r3, [r7, #30]

 //// CRC ////

 for(int i = 0; i < 16; i++) binaryArray[i] = (0x01) & (currPos >> (i));
 8005a68:	2300      	movs	r3, #0
 8005a6a:	61bb      	str	r3, [r7, #24]
 8005a6c:	e00f      	b.n	8005a8e <amt222_readPos+0x86>
 8005a6e:	8bfa      	ldrh	r2, [r7, #30]
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	fa42 f303 	asr.w	r3, r2, r3
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	b2d9      	uxtb	r1, r3
 8005a7e:	1d3a      	adds	r2, r7, #4
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	4413      	add	r3, r2
 8005a84:	460a      	mov	r2, r1
 8005a86:	701a      	strb	r2, [r3, #0]
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	61bb      	str	r3, [r7, #24]
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	2b0f      	cmp	r3, #15
 8005a92:	ddec      	ble.n	8005a6e <amt222_readPos+0x66>

     //using the equation on the datasheet we can calculate the checksums and then make sure they match what the encoder sent
  if ((binaryArray[15] == !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9] ^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3] ^ binaryArray[1]))
 8005a94:	7cfb      	ldrb	r3, [r7, #19]
 8005a96:	4619      	mov	r1, r3
 8005a98:	7c7a      	ldrb	r2, [r7, #17]
 8005a9a:	7bfb      	ldrb	r3, [r7, #15]
 8005a9c:	4053      	eors	r3, r2
 8005a9e:	b2da      	uxtb	r2, r3
 8005aa0:	7b7b      	ldrb	r3, [r7, #13]
 8005aa2:	4053      	eors	r3, r2
 8005aa4:	b2da      	uxtb	r2, r3
 8005aa6:	7afb      	ldrb	r3, [r7, #11]
 8005aa8:	4053      	eors	r3, r2
 8005aaa:	b2da      	uxtb	r2, r3
 8005aac:	7a7b      	ldrb	r3, [r7, #9]
 8005aae:	4053      	eors	r3, r2
 8005ab0:	b2da      	uxtb	r2, r3
 8005ab2:	79fb      	ldrb	r3, [r7, #7]
 8005ab4:	4053      	eors	r3, r2
 8005ab6:	b2da      	uxtb	r2, r3
 8005ab8:	797b      	ldrb	r3, [r7, #5]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	bf0c      	ite	eq
 8005abe:	2301      	moveq	r3, #1
 8005ac0:	2300      	movne	r3, #0
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	4299      	cmp	r1, r3
 8005ac6:	d121      	bne.n	8005b0c <amt222_readPos+0x104>
          && (binaryArray[14] == !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8] ^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2] ^ binaryArray[0])))
 8005ac8:	7cbb      	ldrb	r3, [r7, #18]
 8005aca:	4619      	mov	r1, r3
 8005acc:	7c3a      	ldrb	r2, [r7, #16]
 8005ace:	7bbb      	ldrb	r3, [r7, #14]
 8005ad0:	4053      	eors	r3, r2
 8005ad2:	b2da      	uxtb	r2, r3
 8005ad4:	7b3b      	ldrb	r3, [r7, #12]
 8005ad6:	4053      	eors	r3, r2
 8005ad8:	b2da      	uxtb	r2, r3
 8005ada:	7abb      	ldrb	r3, [r7, #10]
 8005adc:	4053      	eors	r3, r2
 8005ade:	b2da      	uxtb	r2, r3
 8005ae0:	7a3b      	ldrb	r3, [r7, #8]
 8005ae2:	4053      	eors	r3, r2
 8005ae4:	b2da      	uxtb	r2, r3
 8005ae6:	79bb      	ldrb	r3, [r7, #6]
 8005ae8:	4053      	eors	r3, r2
 8005aea:	b2da      	uxtb	r2, r3
 8005aec:	793b      	ldrb	r3, [r7, #4]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	bf0c      	ite	eq
 8005af2:	2301      	moveq	r3, #1
 8005af4:	2300      	movne	r3, #0
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	4299      	cmp	r1, r3
 8005afa:	d107      	bne.n	8005b0c <amt222_readPos+0x104>

    {
      //we got back a good position, so just mask away the checkbits
      currPos &= 0x3FFF;
 8005afc:	8bfb      	ldrh	r3, [r7, #30]
 8005afe:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005b02:	83fb      	strh	r3, [r7, #30]
			// 12 bit resosution sensor, shift 2 bit needed
	  currPos = currPos >> 2;
 8005b04:	8bfb      	ldrh	r3, [r7, #30]
 8005b06:	089b      	lsrs	r3, r3, #2
 8005b08:	83fb      	strh	r3, [r7, #30]
 8005b0a:	e002      	b.n	8005b12 <amt222_readPos+0x10a>
    }
  else
  {
    currPos = 0xFFFF; //bad position
 8005b0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b10:	83fb      	strh	r3, [r7, #30]
  }


 return currPos;
 8005b12:	8bfb      	ldrh	r3, [r7, #30]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3720      	adds	r7, #32
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	40020800 	.word	0x40020800
 8005b20:	20000374 	.word	0x20000374

08005b24 <HAL_CAN_RxFifo0MsgPendingCallback>:



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]

// callback quando ricevo un messaggio sul can

	 if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &pRxHeader, r) == HAL_OK)
 8005b2c:	4b0d      	ldr	r3, [pc, #52]	; (8005b64 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8005b2e:	4a0e      	ldr	r2, [pc, #56]	; (8005b68 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8005b30:	2100      	movs	r1, #0
 8005b32:	480e      	ldr	r0, [pc, #56]	; (8005b6c <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8005b34:	f7fb fd85 	bl	8001642 <HAL_CAN_GetRxMessage>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10d      	bne.n	8005b5a <HAL_CAN_RxFifo0MsgPendingCallback+0x36>


// DECODE STEER POSITION FEEDBACK REQUEST
		 	if ( (pRxHeader.StdId == 0x140)  && (pRxHeader.IDE == CAN_ID_STD))
 8005b3e:	4b0a      	ldr	r3, [pc, #40]	; (8005b68 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005b46:	d108      	bne.n	8005b5a <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
 8005b48:	4b07      	ldr	r3, [pc, #28]	; (8005b68 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d104      	bne.n	8005b5a <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
 8005b50:	4b04      	ldr	r3, [pc, #16]	; (8005b64 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	461a      	mov	r2, r3
		 			 	 	  {
		 	                    // red message data and execute the reqeusted operation
                                // sent position value via CAN

				 memcpy(&target, &r, sizeof(target));
 8005b56:	4b06      	ldr	r3, [pc, #24]	; (8005b70 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8005b58:	601a      	str	r2, [r3, #0]

		 			 	 	  }

}
 8005b5a:	bf00      	nop
 8005b5c:	3708      	adds	r7, #8
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	200002e8 	.word	0x200002e8
 8005b68:	20000428 	.word	0x20000428
 8005b6c:	20000488 	.word	0x20000488
 8005b70:	200001fc 	.word	0x200001fc

08005b74 <TxHeader_Config>:


void TxHeader_Config(void)
{
 8005b74:	b480      	push	{r7}
 8005b76:	af00      	add	r7, sp, #0
	pTxHeader.DLC = 4;
 8005b78:	4b0a      	ldr	r3, [pc, #40]	; (8005ba4 <TxHeader_Config+0x30>)
 8005b7a:	2204      	movs	r2, #4
 8005b7c:	611a      	str	r2, [r3, #16]
	pTxHeader.IDE = CAN_ID_EXT;
 8005b7e:	4b09      	ldr	r3, [pc, #36]	; (8005ba4 <TxHeader_Config+0x30>)
 8005b80:	2204      	movs	r2, #4
 8005b82:	609a      	str	r2, [r3, #8]
	pTxHeader.RTR = CAN_RTR_DATA;
 8005b84:	4b07      	ldr	r3, [pc, #28]	; (8005ba4 <TxHeader_Config+0x30>)
 8005b86:	2200      	movs	r2, #0
 8005b88:	60da      	str	r2, [r3, #12]
	pTxHeader.ExtId = 0x00000154;
 8005b8a:	4b06      	ldr	r3, [pc, #24]	; (8005ba4 <TxHeader_Config+0x30>)
 8005b8c:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8005b90:	605a      	str	r2, [r3, #4]
	pTxHeader.TransmitGlobalTime = DISABLE;
 8005b92:	4b04      	ldr	r3, [pc, #16]	; (8005ba4 <TxHeader_Config+0x30>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	751a      	strb	r2, [r3, #20]
}
 8005b98:	bf00      	nop
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	20000288 	.word	0x20000288

08005ba8 <CanRxFilterConfig>:



void CanRxFilterConfig(void)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	af00      	add	r7, sp, #0
	 // mask =

	sFilterConfig.FilterBank = 0;
 8005bac:	4b10      	ldr	r3, [pc, #64]	; (8005bf0 <CanRxFilterConfig+0x48>)
 8005bae:	2200      	movs	r2, #0
 8005bb0:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8005bb2:	4b0f      	ldr	r3, [pc, #60]	; (8005bf0 <CanRxFilterConfig+0x48>)
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8005bb8:	4b0d      	ldr	r3, [pc, #52]	; (8005bf0 <CanRxFilterConfig+0x48>)
 8005bba:	2201      	movs	r2, #1
 8005bbc:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8005bbe:	4b0c      	ldr	r3, [pc, #48]	; (8005bf0 <CanRxFilterConfig+0x48>)
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterIdHigh = 0x0000;
 8005bc4:	4b0a      	ldr	r3, [pc, #40]	; (8005bf0 <CanRxFilterConfig+0x48>)
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8005bca:	4b09      	ldr	r3, [pc, #36]	; (8005bf0 <CanRxFilterConfig+0x48>)
 8005bcc:	2200      	movs	r2, #0
 8005bce:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8005bd0:	4b07      	ldr	r3, [pc, #28]	; (8005bf0 <CanRxFilterConfig+0x48>)
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8005bd6:	4b06      	ldr	r3, [pc, #24]	; (8005bf0 <CanRxFilterConfig+0x48>)
 8005bd8:	2200      	movs	r2, #0
 8005bda:	60da      	str	r2, [r3, #12]


	sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8005bdc:	4b04      	ldr	r3, [pc, #16]	; (8005bf0 <CanRxFilterConfig+0x48>)
 8005bde:	2201      	movs	r2, #1
 8005be0:	621a      	str	r2, [r3, #32]

	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8005be2:	4903      	ldr	r1, [pc, #12]	; (8005bf0 <CanRxFilterConfig+0x48>)
 8005be4:	4803      	ldr	r0, [pc, #12]	; (8005bf4 <CanRxFilterConfig+0x4c>)
 8005be6:	f7fb fb2d 	bl	8001244 <HAL_CAN_ConfigFilter>

}
 8005bea:	bf00      	nop
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	20000214 	.word	0x20000214
 8005bf4:	20000488 	.word	0x20000488

08005bf8 <steer_control>:

void steer_control(int target) {
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	f107 0318 	add.w	r3, r7, #24
 8005c04:	60fb      	str	r3, [r7, #12]

	 currentPosition = (amt222_readPos ()/4096.0)*360.0;
 8005c06:	f7ff feff 	bl	8005a08 <amt222_readPos>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7fa fca9 	bl	8000564 <__aeabi_i2d>
 8005c12:	f04f 0200 	mov.w	r2, #0
 8005c16:	4b31      	ldr	r3, [pc, #196]	; (8005cdc <steer_control+0xe4>)
 8005c18:	f7fa fe38 	bl	800088c <__aeabi_ddiv>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	460b      	mov	r3, r1
 8005c20:	4610      	mov	r0, r2
 8005c22:	4619      	mov	r1, r3
 8005c24:	f04f 0200 	mov.w	r2, #0
 8005c28:	4b2d      	ldr	r3, [pc, #180]	; (8005ce0 <steer_control+0xe8>)
 8005c2a:	f7fa fd05 	bl	8000638 <__aeabi_dmul>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	460b      	mov	r3, r1
 8005c32:	4610      	mov	r0, r2
 8005c34:	4619      	mov	r1, r3
 8005c36:	f7fa ffd7 	bl	8000be8 <__aeabi_d2uiz>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	4b29      	ldr	r3, [pc, #164]	; (8005ce4 <steer_control+0xec>)
 8005c40:	801a      	strh	r2, [r3, #0]


		  	  // computer error from reference
		  	 error = target - currentPosition;
 8005c42:	4b28      	ldr	r3, [pc, #160]	; (8005ce4 <steer_control+0xec>)
 8005c44:	881b      	ldrh	r3, [r3, #0]
 8005c46:	461a      	mov	r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	1a9b      	subs	r3, r3, r2
 8005c4c:	4a26      	ldr	r2, [pc, #152]	; (8005ce8 <steer_control+0xf0>)
 8005c4e:	6013      	str	r3, [r2, #0]

		  	  printf("Target: %d - Current: %d - Error: %d  \n",target,currentPosition,error);
 8005c50:	4b24      	ldr	r3, [pc, #144]	; (8005ce4 <steer_control+0xec>)
 8005c52:	881b      	ldrh	r3, [r3, #0]
 8005c54:	461a      	mov	r2, r3
 8005c56:	4b24      	ldr	r3, [pc, #144]	; (8005ce8 <steer_control+0xf0>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	6879      	ldr	r1, [r7, #4]
 8005c5c:	4823      	ldr	r0, [pc, #140]	; (8005cec <steer_control+0xf4>)
 8005c5e:	f001 f85d 	bl	8006d1c <iprintf>


		  	 if(error > 0) {
 8005c62:	4b21      	ldr	r3, [pc, #132]	; (8005ce8 <steer_control+0xf0>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	dd17      	ble.n	8005c9a <steer_control+0xa2>
		  		 // enable stepper driver
		  		  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c70:	481f      	ldr	r0, [pc, #124]	; (8005cf0 <steer_control+0xf8>)
 8005c72:	f7fc faf3 	bl	800225c <HAL_GPIO_WritePin>

		  		 // rotate the motor in the clockwise direction
		  		 	  rotate(&motor,error,0);
 8005c76:	4b1c      	ldr	r3, [pc, #112]	; (8005ce8 <steer_control+0xf0>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	ee07 3a90 	vmov	s15, r3
 8005c7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c82:	2100      	movs	r1, #0
 8005c84:	eeb0 0a67 	vmov.f32	s0, s15
 8005c88:	481a      	ldr	r0, [pc, #104]	; (8005cf4 <steer_control+0xfc>)
 8005c8a:	f7ff f9eb 	bl	8005064 <rotate>
		  		//disable stepper driver
		  			  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c94:	4816      	ldr	r0, [pc, #88]	; (8005cf0 <steer_control+0xf8>)
 8005c96:	f7fc fae1 	bl	800225c <HAL_GPIO_WritePin>

		  	 }
		  	 if(error < 0 ) {
 8005c9a:	4b13      	ldr	r3, [pc, #76]	; (8005ce8 <steer_control+0xf0>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	da18      	bge.n	8005cd4 <steer_control+0xdc>
		  		  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ca8:	4811      	ldr	r0, [pc, #68]	; (8005cf0 <steer_control+0xf8>)
 8005caa:	f7fc fad7 	bl	800225c <HAL_GPIO_WritePin>

		  	 rotate(&motor,-error,1);
 8005cae:	4b0e      	ldr	r3, [pc, #56]	; (8005ce8 <steer_control+0xf0>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	425b      	negs	r3, r3
 8005cb4:	ee07 3a90 	vmov	s15, r3
 8005cb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cbc:	2101      	movs	r1, #1
 8005cbe:	eeb0 0a67 	vmov.f32	s0, s15
 8005cc2:	480c      	ldr	r0, [pc, #48]	; (8005cf4 <steer_control+0xfc>)
 8005cc4:	f7ff f9ce 	bl	8005064 <rotate>

		  	  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005cce:	4808      	ldr	r0, [pc, #32]	; (8005cf0 <steer_control+0xf8>)
 8005cd0:	f7fc fac4 	bl	800225c <HAL_GPIO_WritePin>
		  	void Float_32ToBytes(float val, uint8_t* out_8b_vect)
		  	{
		  		*(float*)out_8b_vect = val;
		  	}

}
 8005cd4:	bf00      	nop
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	40b00000 	.word	0x40b00000
 8005ce0:	40768000 	.word	0x40768000
 8005ce4:	2000031e 	.word	0x2000031e
 8005ce8:	200001f8 	.word	0x200001f8
 8005cec:	080091b4 	.word	0x080091b4
 8005cf0:	40020400 	.word	0x40020400
 8005cf4:	20000414 	.word	0x20000414

08005cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  printf("Error Handler Triggered\n");
 8005cfc:	4802      	ldr	r0, [pc, #8]	; (8005d08 <Error_Handler+0x10>)
 8005cfe:	f001 f893 	bl	8006e28 <puts>
  /* USER CODE END Error_Handler_Debug */
}
 8005d02:	bf00      	nop
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	080091dc 	.word	0x080091dc

08005d0c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
	gHuart = huart;
 8005d14:	4a07      	ldr	r2, [pc, #28]	; (8005d34 <RetargetInit+0x28>)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6013      	str	r3, [r2, #0]

	/* Disable I/O buffering for STDOUT stream, so that
	 * chars are sent out as soon as they are printed. */
	setvbuf(stdout, NULL, _IONBF, 0);
 8005d1a:	4b07      	ldr	r3, [pc, #28]	; (8005d38 <RetargetInit+0x2c>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6898      	ldr	r0, [r3, #8]
 8005d20:	2300      	movs	r3, #0
 8005d22:	2202      	movs	r2, #2
 8005d24:	2100      	movs	r1, #0
 8005d26:	f001 f887 	bl	8006e38 <setvbuf>
}
 8005d2a:	bf00      	nop
 8005d2c:	3708      	adds	r7, #8
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	200004b4 	.word	0x200004b4
 8005d38:	2000000c 	.word	0x2000000c

08005d3c <_isatty>:

int _isatty(int fd) {
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
	if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	db04      	blt.n	8005d54 <_isatty+0x18>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	dc01      	bgt.n	8005d54 <_isatty+0x18>
		return 1;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e005      	b.n	8005d60 <_isatty+0x24>

	errno = EBADF;
 8005d54:	f000 fb46 	bl	80063e4 <__errno>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2209      	movs	r2, #9
 8005d5c:	601a      	str	r2, [r3, #0]
	return 0;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3708      	adds	r7, #8
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <_write>:

int _write(int fd, char *ptr, int len) {
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b086      	sub	sp, #24
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef hstatus;

	if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d002      	beq.n	8005d80 <_write+0x18>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d111      	bne.n	8005da4 <_write+0x3c>
		hstatus = HAL_UART_Transmit(gHuart, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8005d80:	4b0e      	ldr	r3, [pc, #56]	; (8005dbc <_write+0x54>)
 8005d82:	6818      	ldr	r0, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	f04f 33ff 	mov.w	r3, #4294967295
 8005d8c:	68b9      	ldr	r1, [r7, #8]
 8005d8e:	f7fe fd70 	bl	8004872 <HAL_UART_Transmit>
 8005d92:	4603      	mov	r3, r0
 8005d94:	75fb      	strb	r3, [r7, #23]
		if (hstatus == HAL_OK)
 8005d96:	7dfb      	ldrb	r3, [r7, #23]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d101      	bne.n	8005da0 <_write+0x38>
			return len;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	e008      	b.n	8005db2 <_write+0x4a>
		else
			return EIO;
 8005da0:	2305      	movs	r3, #5
 8005da2:	e006      	b.n	8005db2 <_write+0x4a>
	}
	errno = EBADF;
 8005da4:	f000 fb1e 	bl	80063e4 <__errno>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2209      	movs	r2, #9
 8005dac:	601a      	str	r2, [r3, #0]
	return -1;
 8005dae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3718      	adds	r7, #24
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	200004b4 	.word	0x200004b4

08005dc0 <_close>:

int _close(int fd) {
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
	if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	db04      	blt.n	8005dd8 <_close+0x18>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	dc01      	bgt.n	8005dd8 <_close+0x18>
		return 0;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	e006      	b.n	8005de6 <_close+0x26>

	errno = EBADF;
 8005dd8:	f000 fb04 	bl	80063e4 <__errno>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2209      	movs	r2, #9
 8005de0:	601a      	str	r2, [r3, #0]
	return -1;
 8005de2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3708      	adds	r7, #8
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b084      	sub	sp, #16
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	60f8      	str	r0, [r7, #12]
 8005df6:	60b9      	str	r1, [r7, #8]
 8005df8:	607a      	str	r2, [r7, #4]
	(void) fd;
	(void) ptr;
	(void) dir;

	errno = EBADF;
 8005dfa:	f000 faf3 	bl	80063e4 <__errno>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2209      	movs	r2, #9
 8005e02:	601a      	str	r2, [r3, #0]
	return -1;
 8005e04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3710      	adds	r7, #16
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <_read>:

int _read(int fd, char *ptr, int len) {
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef hstatus;

	if (fd == STDIN_FILENO) {
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d110      	bne.n	8005e44 <_read+0x34>
		hstatus = HAL_UART_Receive(gHuart, (uint8_t*) ptr, 1, HAL_MAX_DELAY);
 8005e22:	4b0e      	ldr	r3, [pc, #56]	; (8005e5c <_read+0x4c>)
 8005e24:	6818      	ldr	r0, [r3, #0]
 8005e26:	f04f 33ff 	mov.w	r3, #4294967295
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	68b9      	ldr	r1, [r7, #8]
 8005e2e:	f7fe fdb2 	bl	8004996 <HAL_UART_Receive>
 8005e32:	4603      	mov	r3, r0
 8005e34:	75fb      	strb	r3, [r7, #23]
		if (hstatus == HAL_OK)
 8005e36:	7dfb      	ldrb	r3, [r7, #23]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d101      	bne.n	8005e40 <_read+0x30>
			return 1;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e008      	b.n	8005e52 <_read+0x42>
		else
			return EIO;
 8005e40:	2305      	movs	r3, #5
 8005e42:	e006      	b.n	8005e52 <_read+0x42>
	}
	errno = EBADF;
 8005e44:	f000 face 	bl	80063e4 <__errno>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2209      	movs	r2, #9
 8005e4c:	601a      	str	r2, [r3, #0]
	return -1;
 8005e4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3718      	adds	r7, #24
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	200004b4 	.word	0x200004b4

08005e60 <_fstat>:

int _fstat(int fd, struct stat *st) {
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
	if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	db08      	blt.n	8005e82 <_fstat+0x22>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	dc05      	bgt.n	8005e82 <_fstat+0x22>
		st->st_mode = S_IFCHR;
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005e7c:	605a      	str	r2, [r3, #4]
		return 0;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	e005      	b.n	8005e8e <_fstat+0x2e>
	}

	errno = EBADF;
 8005e82:	f000 faaf 	bl	80063e4 <__errno>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2209      	movs	r2, #9
 8005e8a:	601a      	str	r2, [r3, #0]
	return 0;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3708      	adds	r7, #8
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
	...

08005e98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	607b      	str	r3, [r7, #4]
 8005ea2:	4b10      	ldr	r3, [pc, #64]	; (8005ee4 <HAL_MspInit+0x4c>)
 8005ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea6:	4a0f      	ldr	r2, [pc, #60]	; (8005ee4 <HAL_MspInit+0x4c>)
 8005ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005eac:	6453      	str	r3, [r2, #68]	; 0x44
 8005eae:	4b0d      	ldr	r3, [pc, #52]	; (8005ee4 <HAL_MspInit+0x4c>)
 8005eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005eb6:	607b      	str	r3, [r7, #4]
 8005eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005eba:	2300      	movs	r3, #0
 8005ebc:	603b      	str	r3, [r7, #0]
 8005ebe:	4b09      	ldr	r3, [pc, #36]	; (8005ee4 <HAL_MspInit+0x4c>)
 8005ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec2:	4a08      	ldr	r2, [pc, #32]	; (8005ee4 <HAL_MspInit+0x4c>)
 8005ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8005eca:	4b06      	ldr	r3, [pc, #24]	; (8005ee4 <HAL_MspInit+0x4c>)
 8005ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ed2:	603b      	str	r3, [r7, #0]
 8005ed4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8005ed6:	2007      	movs	r0, #7
 8005ed8:	f7fb ffea 	bl	8001eb0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005edc:	bf00      	nop
 8005ede:	3708      	adds	r7, #8
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	40023800 	.word	0x40023800

08005ee8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b08a      	sub	sp, #40	; 0x28
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ef0:	f107 0314 	add.w	r3, r7, #20
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	601a      	str	r2, [r3, #0]
 8005ef8:	605a      	str	r2, [r3, #4]
 8005efa:	609a      	str	r2, [r3, #8]
 8005efc:	60da      	str	r2, [r3, #12]
 8005efe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a1d      	ldr	r2, [pc, #116]	; (8005f7c <HAL_CAN_MspInit+0x94>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d134      	bne.n	8005f74 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	613b      	str	r3, [r7, #16]
 8005f0e:	4b1c      	ldr	r3, [pc, #112]	; (8005f80 <HAL_CAN_MspInit+0x98>)
 8005f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f12:	4a1b      	ldr	r2, [pc, #108]	; (8005f80 <HAL_CAN_MspInit+0x98>)
 8005f14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005f18:	6413      	str	r3, [r2, #64]	; 0x40
 8005f1a:	4b19      	ldr	r3, [pc, #100]	; (8005f80 <HAL_CAN_MspInit+0x98>)
 8005f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f22:	613b      	str	r3, [r7, #16]
 8005f24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f26:	2300      	movs	r3, #0
 8005f28:	60fb      	str	r3, [r7, #12]
 8005f2a:	4b15      	ldr	r3, [pc, #84]	; (8005f80 <HAL_CAN_MspInit+0x98>)
 8005f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2e:	4a14      	ldr	r2, [pc, #80]	; (8005f80 <HAL_CAN_MspInit+0x98>)
 8005f30:	f043 0301 	orr.w	r3, r3, #1
 8005f34:	6313      	str	r3, [r2, #48]	; 0x30
 8005f36:	4b12      	ldr	r3, [pc, #72]	; (8005f80 <HAL_CAN_MspInit+0x98>)
 8005f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3a:	f003 0301 	and.w	r3, r3, #1
 8005f3e:	60fb      	str	r3, [r7, #12]
 8005f40:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005f42:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f48:	2302      	movs	r3, #2
 8005f4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f50:	2303      	movs	r3, #3
 8005f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8005f54:	2309      	movs	r3, #9
 8005f56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f58:	f107 0314 	add.w	r3, r7, #20
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	4809      	ldr	r0, [pc, #36]	; (8005f84 <HAL_CAN_MspInit+0x9c>)
 8005f60:	f7fb ffe8 	bl	8001f34 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8005f64:	2200      	movs	r2, #0
 8005f66:	2100      	movs	r1, #0
 8005f68:	2014      	movs	r0, #20
 8005f6a:	f7fb ffac 	bl	8001ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8005f6e:	2014      	movs	r0, #20
 8005f70:	f7fb ffc5 	bl	8001efe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8005f74:	bf00      	nop
 8005f76:	3728      	adds	r7, #40	; 0x28
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	40006400 	.word	0x40006400
 8005f80:	40023800 	.word	0x40023800
 8005f84:	40020000 	.word	0x40020000

08005f88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b08a      	sub	sp, #40	; 0x28
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f90:	f107 0314 	add.w	r3, r7, #20
 8005f94:	2200      	movs	r2, #0
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	605a      	str	r2, [r3, #4]
 8005f9a:	609a      	str	r2, [r3, #8]
 8005f9c:	60da      	str	r2, [r3, #12]
 8005f9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a19      	ldr	r2, [pc, #100]	; (800600c <HAL_SPI_MspInit+0x84>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d12b      	bne.n	8006002 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005faa:	2300      	movs	r3, #0
 8005fac:	613b      	str	r3, [r7, #16]
 8005fae:	4b18      	ldr	r3, [pc, #96]	; (8006010 <HAL_SPI_MspInit+0x88>)
 8005fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb2:	4a17      	ldr	r2, [pc, #92]	; (8006010 <HAL_SPI_MspInit+0x88>)
 8005fb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8005fba:	4b15      	ldr	r3, [pc, #84]	; (8006010 <HAL_SPI_MspInit+0x88>)
 8005fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fc2:	613b      	str	r3, [r7, #16]
 8005fc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	60fb      	str	r3, [r7, #12]
 8005fca:	4b11      	ldr	r3, [pc, #68]	; (8006010 <HAL_SPI_MspInit+0x88>)
 8005fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fce:	4a10      	ldr	r2, [pc, #64]	; (8006010 <HAL_SPI_MspInit+0x88>)
 8005fd0:	f043 0301 	orr.w	r3, r3, #1
 8005fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8005fd6:	4b0e      	ldr	r3, [pc, #56]	; (8006010 <HAL_SPI_MspInit+0x88>)
 8005fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	60fb      	str	r3, [r7, #12]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005fe2:	23e0      	movs	r3, #224	; 0xe0
 8005fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fe6:	2302      	movs	r3, #2
 8005fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fea:	2300      	movs	r3, #0
 8005fec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005ff2:	2305      	movs	r3, #5
 8005ff4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ff6:	f107 0314 	add.w	r3, r7, #20
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	4805      	ldr	r0, [pc, #20]	; (8006014 <HAL_SPI_MspInit+0x8c>)
 8005ffe:	f7fb ff99 	bl	8001f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8006002:	bf00      	nop
 8006004:	3728      	adds	r7, #40	; 0x28
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	40013000 	.word	0x40013000
 8006010:	40023800 	.word	0x40023800
 8006014:	40020000 	.word	0x40020000

08006018 <HAL_TIM_OnePulse_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_onepulse: TIM_OnePulse handle pointer
* @retval None
*/
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  if(htim_onepulse->Instance==TIM1)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a12      	ldr	r2, [pc, #72]	; (8006070 <HAL_TIM_OnePulse_MspInit+0x58>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d11d      	bne.n	8006066 <HAL_TIM_OnePulse_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800602a:	2300      	movs	r3, #0
 800602c:	60fb      	str	r3, [r7, #12]
 800602e:	4b11      	ldr	r3, [pc, #68]	; (8006074 <HAL_TIM_OnePulse_MspInit+0x5c>)
 8006030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006032:	4a10      	ldr	r2, [pc, #64]	; (8006074 <HAL_TIM_OnePulse_MspInit+0x5c>)
 8006034:	f043 0301 	orr.w	r3, r3, #1
 8006038:	6453      	str	r3, [r2, #68]	; 0x44
 800603a:	4b0e      	ldr	r3, [pc, #56]	; (8006074 <HAL_TIM_OnePulse_MspInit+0x5c>)
 800603c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800603e:	f003 0301 	and.w	r3, r3, #1
 8006042:	60fb      	str	r3, [r7, #12]
 8006044:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8006046:	2200      	movs	r2, #0
 8006048:	2100      	movs	r1, #0
 800604a:	2019      	movs	r0, #25
 800604c:	f7fb ff3b 	bl	8001ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006050:	2019      	movs	r0, #25
 8006052:	f7fb ff54 	bl	8001efe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8006056:	2200      	movs	r2, #0
 8006058:	2100      	movs	r1, #0
 800605a:	201b      	movs	r0, #27
 800605c:	f7fb ff33 	bl	8001ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8006060:	201b      	movs	r0, #27
 8006062:	f7fb ff4c 	bl	8001efe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8006066:	bf00      	nop
 8006068:	3710      	adds	r7, #16
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	40010000 	.word	0x40010000
 8006074:	40023800 	.word	0x40023800

08006078 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006088:	d116      	bne.n	80060b8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800608a:	2300      	movs	r3, #0
 800608c:	60fb      	str	r3, [r7, #12]
 800608e:	4b1a      	ldr	r3, [pc, #104]	; (80060f8 <HAL_TIM_Base_MspInit+0x80>)
 8006090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006092:	4a19      	ldr	r2, [pc, #100]	; (80060f8 <HAL_TIM_Base_MspInit+0x80>)
 8006094:	f043 0301 	orr.w	r3, r3, #1
 8006098:	6413      	str	r3, [r2, #64]	; 0x40
 800609a:	4b17      	ldr	r3, [pc, #92]	; (80060f8 <HAL_TIM_Base_MspInit+0x80>)
 800609c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	60fb      	str	r3, [r7, #12]
 80060a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80060a6:	2200      	movs	r2, #0
 80060a8:	2100      	movs	r1, #0
 80060aa:	201c      	movs	r0, #28
 80060ac:	f7fb ff0b 	bl	8001ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80060b0:	201c      	movs	r0, #28
 80060b2:	f7fb ff24 	bl	8001efe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80060b6:	e01a      	b.n	80060ee <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a0f      	ldr	r2, [pc, #60]	; (80060fc <HAL_TIM_Base_MspInit+0x84>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d115      	bne.n	80060ee <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80060c2:	2300      	movs	r3, #0
 80060c4:	60bb      	str	r3, [r7, #8]
 80060c6:	4b0c      	ldr	r3, [pc, #48]	; (80060f8 <HAL_TIM_Base_MspInit+0x80>)
 80060c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ca:	4a0b      	ldr	r2, [pc, #44]	; (80060f8 <HAL_TIM_Base_MspInit+0x80>)
 80060cc:	f043 0302 	orr.w	r3, r3, #2
 80060d0:	6413      	str	r3, [r2, #64]	; 0x40
 80060d2:	4b09      	ldr	r3, [pc, #36]	; (80060f8 <HAL_TIM_Base_MspInit+0x80>)
 80060d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	60bb      	str	r3, [r7, #8]
 80060dc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80060de:	2200      	movs	r2, #0
 80060e0:	2100      	movs	r1, #0
 80060e2:	201d      	movs	r0, #29
 80060e4:	f7fb feef 	bl	8001ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80060e8:	201d      	movs	r0, #29
 80060ea:	f7fb ff08 	bl	8001efe <HAL_NVIC_EnableIRQ>
}
 80060ee:	bf00      	nop
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	40023800 	.word	0x40023800
 80060fc:	40000400 	.word	0x40000400

08006100 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a0b      	ldr	r2, [pc, #44]	; (800613c <HAL_TIM_PWM_MspInit+0x3c>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d10d      	bne.n	800612e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006112:	2300      	movs	r3, #0
 8006114:	60fb      	str	r3, [r7, #12]
 8006116:	4b0a      	ldr	r3, [pc, #40]	; (8006140 <HAL_TIM_PWM_MspInit+0x40>)
 8006118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800611a:	4a09      	ldr	r2, [pc, #36]	; (8006140 <HAL_TIM_PWM_MspInit+0x40>)
 800611c:	f043 0302 	orr.w	r3, r3, #2
 8006120:	6453      	str	r3, [r2, #68]	; 0x44
 8006122:	4b07      	ldr	r3, [pc, #28]	; (8006140 <HAL_TIM_PWM_MspInit+0x40>)
 8006124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006126:	f003 0302 	and.w	r3, r3, #2
 800612a:	60fb      	str	r3, [r7, #12]
 800612c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800612e:	bf00      	nop
 8006130:	3714      	adds	r7, #20
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	40010400 	.word	0x40010400
 8006140:	40023800 	.word	0x40023800

08006144 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b088      	sub	sp, #32
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800614c:	f107 030c 	add.w	r3, r7, #12
 8006150:	2200      	movs	r2, #0
 8006152:	601a      	str	r2, [r3, #0]
 8006154:	605a      	str	r2, [r3, #4]
 8006156:	609a      	str	r2, [r3, #8]
 8006158:	60da      	str	r2, [r3, #12]
 800615a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a12      	ldr	r2, [pc, #72]	; (80061ac <HAL_TIM_MspPostInit+0x68>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d11d      	bne.n	80061a2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006166:	2300      	movs	r3, #0
 8006168:	60bb      	str	r3, [r7, #8]
 800616a:	4b11      	ldr	r3, [pc, #68]	; (80061b0 <HAL_TIM_MspPostInit+0x6c>)
 800616c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800616e:	4a10      	ldr	r2, [pc, #64]	; (80061b0 <HAL_TIM_MspPostInit+0x6c>)
 8006170:	f043 0304 	orr.w	r3, r3, #4
 8006174:	6313      	str	r3, [r2, #48]	; 0x30
 8006176:	4b0e      	ldr	r3, [pc, #56]	; (80061b0 <HAL_TIM_MspPostInit+0x6c>)
 8006178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617a:	f003 0304 	and.w	r3, r3, #4
 800617e:	60bb      	str	r3, [r7, #8]
 8006180:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006182:	2340      	movs	r3, #64	; 0x40
 8006184:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006186:	2302      	movs	r3, #2
 8006188:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800618a:	2300      	movs	r3, #0
 800618c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800618e:	2300      	movs	r3, #0
 8006190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006192:	2303      	movs	r3, #3
 8006194:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006196:	f107 030c 	add.w	r3, r7, #12
 800619a:	4619      	mov	r1, r3
 800619c:	4805      	ldr	r0, [pc, #20]	; (80061b4 <HAL_TIM_MspPostInit+0x70>)
 800619e:	f7fb fec9 	bl	8001f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80061a2:	bf00      	nop
 80061a4:	3720      	adds	r7, #32
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	40010400 	.word	0x40010400
 80061b0:	40023800 	.word	0x40023800
 80061b4:	40020800 	.word	0x40020800

080061b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b08a      	sub	sp, #40	; 0x28
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061c0:	f107 0314 	add.w	r3, r7, #20
 80061c4:	2200      	movs	r2, #0
 80061c6:	601a      	str	r2, [r3, #0]
 80061c8:	605a      	str	r2, [r3, #4]
 80061ca:	609a      	str	r2, [r3, #8]
 80061cc:	60da      	str	r2, [r3, #12]
 80061ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a19      	ldr	r2, [pc, #100]	; (800623c <HAL_UART_MspInit+0x84>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d12b      	bne.n	8006232 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80061da:	2300      	movs	r3, #0
 80061dc:	613b      	str	r3, [r7, #16]
 80061de:	4b18      	ldr	r3, [pc, #96]	; (8006240 <HAL_UART_MspInit+0x88>)
 80061e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e2:	4a17      	ldr	r2, [pc, #92]	; (8006240 <HAL_UART_MspInit+0x88>)
 80061e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061e8:	6413      	str	r3, [r2, #64]	; 0x40
 80061ea:	4b15      	ldr	r3, [pc, #84]	; (8006240 <HAL_UART_MspInit+0x88>)
 80061ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061f2:	613b      	str	r3, [r7, #16]
 80061f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061f6:	2300      	movs	r3, #0
 80061f8:	60fb      	str	r3, [r7, #12]
 80061fa:	4b11      	ldr	r3, [pc, #68]	; (8006240 <HAL_UART_MspInit+0x88>)
 80061fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fe:	4a10      	ldr	r2, [pc, #64]	; (8006240 <HAL_UART_MspInit+0x88>)
 8006200:	f043 0301 	orr.w	r3, r3, #1
 8006204:	6313      	str	r3, [r2, #48]	; 0x30
 8006206:	4b0e      	ldr	r3, [pc, #56]	; (8006240 <HAL_UART_MspInit+0x88>)
 8006208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620a:	f003 0301 	and.w	r3, r3, #1
 800620e:	60fb      	str	r3, [r7, #12]
 8006210:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8006212:	230c      	movs	r3, #12
 8006214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006216:	2302      	movs	r3, #2
 8006218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800621a:	2300      	movs	r3, #0
 800621c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800621e:	2303      	movs	r3, #3
 8006220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006222:	2307      	movs	r3, #7
 8006224:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006226:	f107 0314 	add.w	r3, r7, #20
 800622a:	4619      	mov	r1, r3
 800622c:	4805      	ldr	r0, [pc, #20]	; (8006244 <HAL_UART_MspInit+0x8c>)
 800622e:	f7fb fe81 	bl	8001f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006232:	bf00      	nop
 8006234:	3728      	adds	r7, #40	; 0x28
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	40004400 	.word	0x40004400
 8006240:	40023800 	.word	0x40023800
 8006244:	40020000 	.word	0x40020000

08006248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006248:	b480      	push	{r7}
 800624a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800624c:	e7fe      	b.n	800624c <NMI_Handler+0x4>

0800624e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800624e:	b480      	push	{r7}
 8006250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006252:	e7fe      	b.n	8006252 <HardFault_Handler+0x4>

08006254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006254:	b480      	push	{r7}
 8006256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006258:	e7fe      	b.n	8006258 <MemManage_Handler+0x4>

0800625a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800625a:	b480      	push	{r7}
 800625c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800625e:	e7fe      	b.n	800625e <BusFault_Handler+0x4>

08006260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006260:	b480      	push	{r7}
 8006262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006264:	e7fe      	b.n	8006264 <UsageFault_Handler+0x4>

08006266 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006266:	b480      	push	{r7}
 8006268:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800626a:	bf00      	nop
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006274:	b480      	push	{r7}
 8006276:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006278:	bf00      	nop
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006282:	b480      	push	{r7}
 8006284:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006286:	bf00      	nop
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006294:	f7fa fe96 	bl	8000fc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006298:	bf00      	nop
 800629a:	bd80      	pop	{r7, pc}

0800629c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80062a0:	4802      	ldr	r0, [pc, #8]	; (80062ac <CAN1_RX0_IRQHandler+0x10>)
 80062a2:	f7fb fb06 	bl	80018b2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80062a6:	bf00      	nop
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	20000488 	.word	0x20000488

080062b0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80062b4:	4802      	ldr	r0, [pc, #8]	; (80062c0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80062b6:	f7fd fbe1 	bl	8003a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80062ba:	bf00      	nop
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	20000328 	.word	0x20000328

080062c4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80062c8:	4802      	ldr	r0, [pc, #8]	; (80062d4 <TIM1_CC_IRQHandler+0x10>)
 80062ca:	f7fd fbd7 	bl	8003a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80062ce:	bf00      	nop
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	20000328 	.word	0x20000328

080062d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80062dc:	4802      	ldr	r0, [pc, #8]	; (80062e8 <TIM2_IRQHandler+0x10>)
 80062de:	f7fd fbcd 	bl	8003a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80062e2:	bf00      	nop
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	200003cc 	.word	0x200003cc

080062ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80062f0:	4802      	ldr	r0, [pc, #8]	; (80062fc <TIM3_IRQHandler+0x10>)
 80062f2:	f7fd fbc3 	bl	8003a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80062f6:	bf00      	nop
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	200002a0 	.word	0x200002a0

08006300 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8006308:	4a14      	ldr	r2, [pc, #80]	; (800635c <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800630a:	4b15      	ldr	r3, [pc, #84]	; (8006360 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8006314:	4b13      	ldr	r3, [pc, #76]	; (8006364 <_sbrk+0x64>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d102      	bne.n	8006322 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 800631c:	4b11      	ldr	r3, [pc, #68]	; (8006364 <_sbrk+0x64>)
 800631e:	4a12      	ldr	r2, [pc, #72]	; (8006368 <_sbrk+0x68>)
 8006320:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8006322:	4b10      	ldr	r3, [pc, #64]	; (8006364 <_sbrk+0x64>)
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4413      	add	r3, r2
 800632a:	693a      	ldr	r2, [r7, #16]
 800632c:	429a      	cmp	r2, r3
 800632e:	d207      	bcs.n	8006340 <_sbrk+0x40>
		errno = ENOMEM;
 8006330:	f000 f858 	bl	80063e4 <__errno>
 8006334:	4603      	mov	r3, r0
 8006336:	220c      	movs	r2, #12
 8006338:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800633a:	f04f 33ff 	mov.w	r3, #4294967295
 800633e:	e009      	b.n	8006354 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8006340:	4b08      	ldr	r3, [pc, #32]	; (8006364 <_sbrk+0x64>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8006346:	4b07      	ldr	r3, [pc, #28]	; (8006364 <_sbrk+0x64>)
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4413      	add	r3, r2
 800634e:	4a05      	ldr	r2, [pc, #20]	; (8006364 <_sbrk+0x64>)
 8006350:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8006352:	68fb      	ldr	r3, [r7, #12]
}
 8006354:	4618      	mov	r0, r3
 8006356:	3718      	adds	r7, #24
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	20020000 	.word	0x20020000
 8006360:	00000400 	.word	0x00000400
 8006364:	20000204 	.word	0x20000204
 8006368:	200004c8 	.word	0x200004c8

0800636c <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory 
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 800636c:	b480      	push	{r7}
 800636e:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8006370:	4b06      	ldr	r3, [pc, #24]	; (800638c <SystemInit+0x20>)
 8006372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006376:	4a05      	ldr	r2, [pc, #20]	; (800638c <SystemInit+0x20>)
 8006378:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800637c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006380:	bf00      	nop
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	e000ed00 	.word	0xe000ed00

08006390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006390:	f8df d034 	ldr.w	sp, [pc, #52]	; 80063c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006394:	480d      	ldr	r0, [pc, #52]	; (80063cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006396:	490e      	ldr	r1, [pc, #56]	; (80063d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006398:	4a0e      	ldr	r2, [pc, #56]	; (80063d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800639a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800639c:	e002      	b.n	80063a4 <LoopCopyDataInit>

0800639e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800639e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80063a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80063a2:	3304      	adds	r3, #4

080063a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80063a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80063a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80063a8:	d3f9      	bcc.n	800639e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80063aa:	4a0b      	ldr	r2, [pc, #44]	; (80063d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80063ac:	4c0b      	ldr	r4, [pc, #44]	; (80063dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80063ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80063b0:	e001      	b.n	80063b6 <LoopFillZerobss>

080063b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80063b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80063b4:	3204      	adds	r2, #4

080063b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80063b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80063b8:	d3fb      	bcc.n	80063b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80063ba:	f7ff ffd7 	bl	800636c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80063be:	f000 f817 	bl	80063f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80063c2:	f7fe ff6f 	bl	80052a4 <main>
  bx  lr    
 80063c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80063c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80063cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80063d0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80063d4:	080095fc 	.word	0x080095fc
  ldr r2, =_sbss
 80063d8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80063dc:	200004c8 	.word	0x200004c8

080063e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80063e0:	e7fe      	b.n	80063e0 <ADC_IRQHandler>
	...

080063e4 <__errno>:
 80063e4:	4b01      	ldr	r3, [pc, #4]	; (80063ec <__errno+0x8>)
 80063e6:	6818      	ldr	r0, [r3, #0]
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	2000000c 	.word	0x2000000c

080063f0 <__libc_init_array>:
 80063f0:	b570      	push	{r4, r5, r6, lr}
 80063f2:	4d0d      	ldr	r5, [pc, #52]	; (8006428 <__libc_init_array+0x38>)
 80063f4:	4c0d      	ldr	r4, [pc, #52]	; (800642c <__libc_init_array+0x3c>)
 80063f6:	1b64      	subs	r4, r4, r5
 80063f8:	10a4      	asrs	r4, r4, #2
 80063fa:	2600      	movs	r6, #0
 80063fc:	42a6      	cmp	r6, r4
 80063fe:	d109      	bne.n	8006414 <__libc_init_array+0x24>
 8006400:	4d0b      	ldr	r5, [pc, #44]	; (8006430 <__libc_init_array+0x40>)
 8006402:	4c0c      	ldr	r4, [pc, #48]	; (8006434 <__libc_init_array+0x44>)
 8006404:	f002 fe9e 	bl	8009144 <_init>
 8006408:	1b64      	subs	r4, r4, r5
 800640a:	10a4      	asrs	r4, r4, #2
 800640c:	2600      	movs	r6, #0
 800640e:	42a6      	cmp	r6, r4
 8006410:	d105      	bne.n	800641e <__libc_init_array+0x2e>
 8006412:	bd70      	pop	{r4, r5, r6, pc}
 8006414:	f855 3b04 	ldr.w	r3, [r5], #4
 8006418:	4798      	blx	r3
 800641a:	3601      	adds	r6, #1
 800641c:	e7ee      	b.n	80063fc <__libc_init_array+0xc>
 800641e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006422:	4798      	blx	r3
 8006424:	3601      	adds	r6, #1
 8006426:	e7f2      	b.n	800640e <__libc_init_array+0x1e>
 8006428:	080095f4 	.word	0x080095f4
 800642c:	080095f4 	.word	0x080095f4
 8006430:	080095f4 	.word	0x080095f4
 8006434:	080095f8 	.word	0x080095f8

08006438 <memset>:
 8006438:	4402      	add	r2, r0
 800643a:	4603      	mov	r3, r0
 800643c:	4293      	cmp	r3, r2
 800643e:	d100      	bne.n	8006442 <memset+0xa>
 8006440:	4770      	bx	lr
 8006442:	f803 1b01 	strb.w	r1, [r3], #1
 8006446:	e7f9      	b.n	800643c <memset+0x4>

08006448 <__cvt>:
 8006448:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800644c:	ec55 4b10 	vmov	r4, r5, d0
 8006450:	2d00      	cmp	r5, #0
 8006452:	460e      	mov	r6, r1
 8006454:	4619      	mov	r1, r3
 8006456:	462b      	mov	r3, r5
 8006458:	bfbb      	ittet	lt
 800645a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800645e:	461d      	movlt	r5, r3
 8006460:	2300      	movge	r3, #0
 8006462:	232d      	movlt	r3, #45	; 0x2d
 8006464:	700b      	strb	r3, [r1, #0]
 8006466:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006468:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800646c:	4691      	mov	r9, r2
 800646e:	f023 0820 	bic.w	r8, r3, #32
 8006472:	bfbc      	itt	lt
 8006474:	4622      	movlt	r2, r4
 8006476:	4614      	movlt	r4, r2
 8006478:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800647c:	d005      	beq.n	800648a <__cvt+0x42>
 800647e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006482:	d100      	bne.n	8006486 <__cvt+0x3e>
 8006484:	3601      	adds	r6, #1
 8006486:	2102      	movs	r1, #2
 8006488:	e000      	b.n	800648c <__cvt+0x44>
 800648a:	2103      	movs	r1, #3
 800648c:	ab03      	add	r3, sp, #12
 800648e:	9301      	str	r3, [sp, #4]
 8006490:	ab02      	add	r3, sp, #8
 8006492:	9300      	str	r3, [sp, #0]
 8006494:	ec45 4b10 	vmov	d0, r4, r5
 8006498:	4653      	mov	r3, sl
 800649a:	4632      	mov	r2, r6
 800649c:	f000 fee0 	bl	8007260 <_dtoa_r>
 80064a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80064a4:	4607      	mov	r7, r0
 80064a6:	d102      	bne.n	80064ae <__cvt+0x66>
 80064a8:	f019 0f01 	tst.w	r9, #1
 80064ac:	d022      	beq.n	80064f4 <__cvt+0xac>
 80064ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80064b2:	eb07 0906 	add.w	r9, r7, r6
 80064b6:	d110      	bne.n	80064da <__cvt+0x92>
 80064b8:	783b      	ldrb	r3, [r7, #0]
 80064ba:	2b30      	cmp	r3, #48	; 0x30
 80064bc:	d10a      	bne.n	80064d4 <__cvt+0x8c>
 80064be:	2200      	movs	r2, #0
 80064c0:	2300      	movs	r3, #0
 80064c2:	4620      	mov	r0, r4
 80064c4:	4629      	mov	r1, r5
 80064c6:	f7fa fb1f 	bl	8000b08 <__aeabi_dcmpeq>
 80064ca:	b918      	cbnz	r0, 80064d4 <__cvt+0x8c>
 80064cc:	f1c6 0601 	rsb	r6, r6, #1
 80064d0:	f8ca 6000 	str.w	r6, [sl]
 80064d4:	f8da 3000 	ldr.w	r3, [sl]
 80064d8:	4499      	add	r9, r3
 80064da:	2200      	movs	r2, #0
 80064dc:	2300      	movs	r3, #0
 80064de:	4620      	mov	r0, r4
 80064e0:	4629      	mov	r1, r5
 80064e2:	f7fa fb11 	bl	8000b08 <__aeabi_dcmpeq>
 80064e6:	b108      	cbz	r0, 80064ec <__cvt+0xa4>
 80064e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80064ec:	2230      	movs	r2, #48	; 0x30
 80064ee:	9b03      	ldr	r3, [sp, #12]
 80064f0:	454b      	cmp	r3, r9
 80064f2:	d307      	bcc.n	8006504 <__cvt+0xbc>
 80064f4:	9b03      	ldr	r3, [sp, #12]
 80064f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064f8:	1bdb      	subs	r3, r3, r7
 80064fa:	4638      	mov	r0, r7
 80064fc:	6013      	str	r3, [r2, #0]
 80064fe:	b004      	add	sp, #16
 8006500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006504:	1c59      	adds	r1, r3, #1
 8006506:	9103      	str	r1, [sp, #12]
 8006508:	701a      	strb	r2, [r3, #0]
 800650a:	e7f0      	b.n	80064ee <__cvt+0xa6>

0800650c <__exponent>:
 800650c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800650e:	4603      	mov	r3, r0
 8006510:	2900      	cmp	r1, #0
 8006512:	bfb8      	it	lt
 8006514:	4249      	neglt	r1, r1
 8006516:	f803 2b02 	strb.w	r2, [r3], #2
 800651a:	bfb4      	ite	lt
 800651c:	222d      	movlt	r2, #45	; 0x2d
 800651e:	222b      	movge	r2, #43	; 0x2b
 8006520:	2909      	cmp	r1, #9
 8006522:	7042      	strb	r2, [r0, #1]
 8006524:	dd2a      	ble.n	800657c <__exponent+0x70>
 8006526:	f10d 0407 	add.w	r4, sp, #7
 800652a:	46a4      	mov	ip, r4
 800652c:	270a      	movs	r7, #10
 800652e:	46a6      	mov	lr, r4
 8006530:	460a      	mov	r2, r1
 8006532:	fb91 f6f7 	sdiv	r6, r1, r7
 8006536:	fb07 1516 	mls	r5, r7, r6, r1
 800653a:	3530      	adds	r5, #48	; 0x30
 800653c:	2a63      	cmp	r2, #99	; 0x63
 800653e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006542:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006546:	4631      	mov	r1, r6
 8006548:	dcf1      	bgt.n	800652e <__exponent+0x22>
 800654a:	3130      	adds	r1, #48	; 0x30
 800654c:	f1ae 0502 	sub.w	r5, lr, #2
 8006550:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006554:	1c44      	adds	r4, r0, #1
 8006556:	4629      	mov	r1, r5
 8006558:	4561      	cmp	r1, ip
 800655a:	d30a      	bcc.n	8006572 <__exponent+0x66>
 800655c:	f10d 0209 	add.w	r2, sp, #9
 8006560:	eba2 020e 	sub.w	r2, r2, lr
 8006564:	4565      	cmp	r5, ip
 8006566:	bf88      	it	hi
 8006568:	2200      	movhi	r2, #0
 800656a:	4413      	add	r3, r2
 800656c:	1a18      	subs	r0, r3, r0
 800656e:	b003      	add	sp, #12
 8006570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006572:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006576:	f804 2f01 	strb.w	r2, [r4, #1]!
 800657a:	e7ed      	b.n	8006558 <__exponent+0x4c>
 800657c:	2330      	movs	r3, #48	; 0x30
 800657e:	3130      	adds	r1, #48	; 0x30
 8006580:	7083      	strb	r3, [r0, #2]
 8006582:	70c1      	strb	r1, [r0, #3]
 8006584:	1d03      	adds	r3, r0, #4
 8006586:	e7f1      	b.n	800656c <__exponent+0x60>

08006588 <_printf_float>:
 8006588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800658c:	ed2d 8b02 	vpush	{d8}
 8006590:	b08d      	sub	sp, #52	; 0x34
 8006592:	460c      	mov	r4, r1
 8006594:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006598:	4616      	mov	r6, r2
 800659a:	461f      	mov	r7, r3
 800659c:	4605      	mov	r5, r0
 800659e:	f001 fe03 	bl	80081a8 <_localeconv_r>
 80065a2:	f8d0 a000 	ldr.w	sl, [r0]
 80065a6:	4650      	mov	r0, sl
 80065a8:	f7f9 fe32 	bl	8000210 <strlen>
 80065ac:	2300      	movs	r3, #0
 80065ae:	930a      	str	r3, [sp, #40]	; 0x28
 80065b0:	6823      	ldr	r3, [r4, #0]
 80065b2:	9305      	str	r3, [sp, #20]
 80065b4:	f8d8 3000 	ldr.w	r3, [r8]
 80065b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80065bc:	3307      	adds	r3, #7
 80065be:	f023 0307 	bic.w	r3, r3, #7
 80065c2:	f103 0208 	add.w	r2, r3, #8
 80065c6:	f8c8 2000 	str.w	r2, [r8]
 80065ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80065d2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80065d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80065da:	9307      	str	r3, [sp, #28]
 80065dc:	f8cd 8018 	str.w	r8, [sp, #24]
 80065e0:	ee08 0a10 	vmov	s16, r0
 80065e4:	4b9f      	ldr	r3, [pc, #636]	; (8006864 <_printf_float+0x2dc>)
 80065e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065ea:	f04f 32ff 	mov.w	r2, #4294967295
 80065ee:	f7fa fabd 	bl	8000b6c <__aeabi_dcmpun>
 80065f2:	bb88      	cbnz	r0, 8006658 <_printf_float+0xd0>
 80065f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065f8:	4b9a      	ldr	r3, [pc, #616]	; (8006864 <_printf_float+0x2dc>)
 80065fa:	f04f 32ff 	mov.w	r2, #4294967295
 80065fe:	f7fa fa97 	bl	8000b30 <__aeabi_dcmple>
 8006602:	bb48      	cbnz	r0, 8006658 <_printf_float+0xd0>
 8006604:	2200      	movs	r2, #0
 8006606:	2300      	movs	r3, #0
 8006608:	4640      	mov	r0, r8
 800660a:	4649      	mov	r1, r9
 800660c:	f7fa fa86 	bl	8000b1c <__aeabi_dcmplt>
 8006610:	b110      	cbz	r0, 8006618 <_printf_float+0x90>
 8006612:	232d      	movs	r3, #45	; 0x2d
 8006614:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006618:	4b93      	ldr	r3, [pc, #588]	; (8006868 <_printf_float+0x2e0>)
 800661a:	4894      	ldr	r0, [pc, #592]	; (800686c <_printf_float+0x2e4>)
 800661c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006620:	bf94      	ite	ls
 8006622:	4698      	movls	r8, r3
 8006624:	4680      	movhi	r8, r0
 8006626:	2303      	movs	r3, #3
 8006628:	6123      	str	r3, [r4, #16]
 800662a:	9b05      	ldr	r3, [sp, #20]
 800662c:	f023 0204 	bic.w	r2, r3, #4
 8006630:	6022      	str	r2, [r4, #0]
 8006632:	f04f 0900 	mov.w	r9, #0
 8006636:	9700      	str	r7, [sp, #0]
 8006638:	4633      	mov	r3, r6
 800663a:	aa0b      	add	r2, sp, #44	; 0x2c
 800663c:	4621      	mov	r1, r4
 800663e:	4628      	mov	r0, r5
 8006640:	f000 f9d8 	bl	80069f4 <_printf_common>
 8006644:	3001      	adds	r0, #1
 8006646:	f040 8090 	bne.w	800676a <_printf_float+0x1e2>
 800664a:	f04f 30ff 	mov.w	r0, #4294967295
 800664e:	b00d      	add	sp, #52	; 0x34
 8006650:	ecbd 8b02 	vpop	{d8}
 8006654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006658:	4642      	mov	r2, r8
 800665a:	464b      	mov	r3, r9
 800665c:	4640      	mov	r0, r8
 800665e:	4649      	mov	r1, r9
 8006660:	f7fa fa84 	bl	8000b6c <__aeabi_dcmpun>
 8006664:	b140      	cbz	r0, 8006678 <_printf_float+0xf0>
 8006666:	464b      	mov	r3, r9
 8006668:	2b00      	cmp	r3, #0
 800666a:	bfbc      	itt	lt
 800666c:	232d      	movlt	r3, #45	; 0x2d
 800666e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006672:	487f      	ldr	r0, [pc, #508]	; (8006870 <_printf_float+0x2e8>)
 8006674:	4b7f      	ldr	r3, [pc, #508]	; (8006874 <_printf_float+0x2ec>)
 8006676:	e7d1      	b.n	800661c <_printf_float+0x94>
 8006678:	6863      	ldr	r3, [r4, #4]
 800667a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800667e:	9206      	str	r2, [sp, #24]
 8006680:	1c5a      	adds	r2, r3, #1
 8006682:	d13f      	bne.n	8006704 <_printf_float+0x17c>
 8006684:	2306      	movs	r3, #6
 8006686:	6063      	str	r3, [r4, #4]
 8006688:	9b05      	ldr	r3, [sp, #20]
 800668a:	6861      	ldr	r1, [r4, #4]
 800668c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006690:	2300      	movs	r3, #0
 8006692:	9303      	str	r3, [sp, #12]
 8006694:	ab0a      	add	r3, sp, #40	; 0x28
 8006696:	e9cd b301 	strd	fp, r3, [sp, #4]
 800669a:	ab09      	add	r3, sp, #36	; 0x24
 800669c:	ec49 8b10 	vmov	d0, r8, r9
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	6022      	str	r2, [r4, #0]
 80066a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80066a8:	4628      	mov	r0, r5
 80066aa:	f7ff fecd 	bl	8006448 <__cvt>
 80066ae:	9b06      	ldr	r3, [sp, #24]
 80066b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066b2:	2b47      	cmp	r3, #71	; 0x47
 80066b4:	4680      	mov	r8, r0
 80066b6:	d108      	bne.n	80066ca <_printf_float+0x142>
 80066b8:	1cc8      	adds	r0, r1, #3
 80066ba:	db02      	blt.n	80066c2 <_printf_float+0x13a>
 80066bc:	6863      	ldr	r3, [r4, #4]
 80066be:	4299      	cmp	r1, r3
 80066c0:	dd41      	ble.n	8006746 <_printf_float+0x1be>
 80066c2:	f1ab 0b02 	sub.w	fp, fp, #2
 80066c6:	fa5f fb8b 	uxtb.w	fp, fp
 80066ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80066ce:	d820      	bhi.n	8006712 <_printf_float+0x18a>
 80066d0:	3901      	subs	r1, #1
 80066d2:	465a      	mov	r2, fp
 80066d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80066d8:	9109      	str	r1, [sp, #36]	; 0x24
 80066da:	f7ff ff17 	bl	800650c <__exponent>
 80066de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066e0:	1813      	adds	r3, r2, r0
 80066e2:	2a01      	cmp	r2, #1
 80066e4:	4681      	mov	r9, r0
 80066e6:	6123      	str	r3, [r4, #16]
 80066e8:	dc02      	bgt.n	80066f0 <_printf_float+0x168>
 80066ea:	6822      	ldr	r2, [r4, #0]
 80066ec:	07d2      	lsls	r2, r2, #31
 80066ee:	d501      	bpl.n	80066f4 <_printf_float+0x16c>
 80066f0:	3301      	adds	r3, #1
 80066f2:	6123      	str	r3, [r4, #16]
 80066f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d09c      	beq.n	8006636 <_printf_float+0xae>
 80066fc:	232d      	movs	r3, #45	; 0x2d
 80066fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006702:	e798      	b.n	8006636 <_printf_float+0xae>
 8006704:	9a06      	ldr	r2, [sp, #24]
 8006706:	2a47      	cmp	r2, #71	; 0x47
 8006708:	d1be      	bne.n	8006688 <_printf_float+0x100>
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1bc      	bne.n	8006688 <_printf_float+0x100>
 800670e:	2301      	movs	r3, #1
 8006710:	e7b9      	b.n	8006686 <_printf_float+0xfe>
 8006712:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006716:	d118      	bne.n	800674a <_printf_float+0x1c2>
 8006718:	2900      	cmp	r1, #0
 800671a:	6863      	ldr	r3, [r4, #4]
 800671c:	dd0b      	ble.n	8006736 <_printf_float+0x1ae>
 800671e:	6121      	str	r1, [r4, #16]
 8006720:	b913      	cbnz	r3, 8006728 <_printf_float+0x1a0>
 8006722:	6822      	ldr	r2, [r4, #0]
 8006724:	07d0      	lsls	r0, r2, #31
 8006726:	d502      	bpl.n	800672e <_printf_float+0x1a6>
 8006728:	3301      	adds	r3, #1
 800672a:	440b      	add	r3, r1
 800672c:	6123      	str	r3, [r4, #16]
 800672e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006730:	f04f 0900 	mov.w	r9, #0
 8006734:	e7de      	b.n	80066f4 <_printf_float+0x16c>
 8006736:	b913      	cbnz	r3, 800673e <_printf_float+0x1b6>
 8006738:	6822      	ldr	r2, [r4, #0]
 800673a:	07d2      	lsls	r2, r2, #31
 800673c:	d501      	bpl.n	8006742 <_printf_float+0x1ba>
 800673e:	3302      	adds	r3, #2
 8006740:	e7f4      	b.n	800672c <_printf_float+0x1a4>
 8006742:	2301      	movs	r3, #1
 8006744:	e7f2      	b.n	800672c <_printf_float+0x1a4>
 8006746:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800674a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800674c:	4299      	cmp	r1, r3
 800674e:	db05      	blt.n	800675c <_printf_float+0x1d4>
 8006750:	6823      	ldr	r3, [r4, #0]
 8006752:	6121      	str	r1, [r4, #16]
 8006754:	07d8      	lsls	r0, r3, #31
 8006756:	d5ea      	bpl.n	800672e <_printf_float+0x1a6>
 8006758:	1c4b      	adds	r3, r1, #1
 800675a:	e7e7      	b.n	800672c <_printf_float+0x1a4>
 800675c:	2900      	cmp	r1, #0
 800675e:	bfd4      	ite	le
 8006760:	f1c1 0202 	rsble	r2, r1, #2
 8006764:	2201      	movgt	r2, #1
 8006766:	4413      	add	r3, r2
 8006768:	e7e0      	b.n	800672c <_printf_float+0x1a4>
 800676a:	6823      	ldr	r3, [r4, #0]
 800676c:	055a      	lsls	r2, r3, #21
 800676e:	d407      	bmi.n	8006780 <_printf_float+0x1f8>
 8006770:	6923      	ldr	r3, [r4, #16]
 8006772:	4642      	mov	r2, r8
 8006774:	4631      	mov	r1, r6
 8006776:	4628      	mov	r0, r5
 8006778:	47b8      	blx	r7
 800677a:	3001      	adds	r0, #1
 800677c:	d12c      	bne.n	80067d8 <_printf_float+0x250>
 800677e:	e764      	b.n	800664a <_printf_float+0xc2>
 8006780:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006784:	f240 80e0 	bls.w	8006948 <_printf_float+0x3c0>
 8006788:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800678c:	2200      	movs	r2, #0
 800678e:	2300      	movs	r3, #0
 8006790:	f7fa f9ba 	bl	8000b08 <__aeabi_dcmpeq>
 8006794:	2800      	cmp	r0, #0
 8006796:	d034      	beq.n	8006802 <_printf_float+0x27a>
 8006798:	4a37      	ldr	r2, [pc, #220]	; (8006878 <_printf_float+0x2f0>)
 800679a:	2301      	movs	r3, #1
 800679c:	4631      	mov	r1, r6
 800679e:	4628      	mov	r0, r5
 80067a0:	47b8      	blx	r7
 80067a2:	3001      	adds	r0, #1
 80067a4:	f43f af51 	beq.w	800664a <_printf_float+0xc2>
 80067a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067ac:	429a      	cmp	r2, r3
 80067ae:	db02      	blt.n	80067b6 <_printf_float+0x22e>
 80067b0:	6823      	ldr	r3, [r4, #0]
 80067b2:	07d8      	lsls	r0, r3, #31
 80067b4:	d510      	bpl.n	80067d8 <_printf_float+0x250>
 80067b6:	ee18 3a10 	vmov	r3, s16
 80067ba:	4652      	mov	r2, sl
 80067bc:	4631      	mov	r1, r6
 80067be:	4628      	mov	r0, r5
 80067c0:	47b8      	blx	r7
 80067c2:	3001      	adds	r0, #1
 80067c4:	f43f af41 	beq.w	800664a <_printf_float+0xc2>
 80067c8:	f04f 0800 	mov.w	r8, #0
 80067cc:	f104 091a 	add.w	r9, r4, #26
 80067d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067d2:	3b01      	subs	r3, #1
 80067d4:	4543      	cmp	r3, r8
 80067d6:	dc09      	bgt.n	80067ec <_printf_float+0x264>
 80067d8:	6823      	ldr	r3, [r4, #0]
 80067da:	079b      	lsls	r3, r3, #30
 80067dc:	f100 8105 	bmi.w	80069ea <_printf_float+0x462>
 80067e0:	68e0      	ldr	r0, [r4, #12]
 80067e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067e4:	4298      	cmp	r0, r3
 80067e6:	bfb8      	it	lt
 80067e8:	4618      	movlt	r0, r3
 80067ea:	e730      	b.n	800664e <_printf_float+0xc6>
 80067ec:	2301      	movs	r3, #1
 80067ee:	464a      	mov	r2, r9
 80067f0:	4631      	mov	r1, r6
 80067f2:	4628      	mov	r0, r5
 80067f4:	47b8      	blx	r7
 80067f6:	3001      	adds	r0, #1
 80067f8:	f43f af27 	beq.w	800664a <_printf_float+0xc2>
 80067fc:	f108 0801 	add.w	r8, r8, #1
 8006800:	e7e6      	b.n	80067d0 <_printf_float+0x248>
 8006802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006804:	2b00      	cmp	r3, #0
 8006806:	dc39      	bgt.n	800687c <_printf_float+0x2f4>
 8006808:	4a1b      	ldr	r2, [pc, #108]	; (8006878 <_printf_float+0x2f0>)
 800680a:	2301      	movs	r3, #1
 800680c:	4631      	mov	r1, r6
 800680e:	4628      	mov	r0, r5
 8006810:	47b8      	blx	r7
 8006812:	3001      	adds	r0, #1
 8006814:	f43f af19 	beq.w	800664a <_printf_float+0xc2>
 8006818:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800681c:	4313      	orrs	r3, r2
 800681e:	d102      	bne.n	8006826 <_printf_float+0x29e>
 8006820:	6823      	ldr	r3, [r4, #0]
 8006822:	07d9      	lsls	r1, r3, #31
 8006824:	d5d8      	bpl.n	80067d8 <_printf_float+0x250>
 8006826:	ee18 3a10 	vmov	r3, s16
 800682a:	4652      	mov	r2, sl
 800682c:	4631      	mov	r1, r6
 800682e:	4628      	mov	r0, r5
 8006830:	47b8      	blx	r7
 8006832:	3001      	adds	r0, #1
 8006834:	f43f af09 	beq.w	800664a <_printf_float+0xc2>
 8006838:	f04f 0900 	mov.w	r9, #0
 800683c:	f104 0a1a 	add.w	sl, r4, #26
 8006840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006842:	425b      	negs	r3, r3
 8006844:	454b      	cmp	r3, r9
 8006846:	dc01      	bgt.n	800684c <_printf_float+0x2c4>
 8006848:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800684a:	e792      	b.n	8006772 <_printf_float+0x1ea>
 800684c:	2301      	movs	r3, #1
 800684e:	4652      	mov	r2, sl
 8006850:	4631      	mov	r1, r6
 8006852:	4628      	mov	r0, r5
 8006854:	47b8      	blx	r7
 8006856:	3001      	adds	r0, #1
 8006858:	f43f aef7 	beq.w	800664a <_printf_float+0xc2>
 800685c:	f109 0901 	add.w	r9, r9, #1
 8006860:	e7ee      	b.n	8006840 <_printf_float+0x2b8>
 8006862:	bf00      	nop
 8006864:	7fefffff 	.word	0x7fefffff
 8006868:	08009210 	.word	0x08009210
 800686c:	08009214 	.word	0x08009214
 8006870:	0800921c 	.word	0x0800921c
 8006874:	08009218 	.word	0x08009218
 8006878:	08009220 	.word	0x08009220
 800687c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800687e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006880:	429a      	cmp	r2, r3
 8006882:	bfa8      	it	ge
 8006884:	461a      	movge	r2, r3
 8006886:	2a00      	cmp	r2, #0
 8006888:	4691      	mov	r9, r2
 800688a:	dc37      	bgt.n	80068fc <_printf_float+0x374>
 800688c:	f04f 0b00 	mov.w	fp, #0
 8006890:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006894:	f104 021a 	add.w	r2, r4, #26
 8006898:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800689a:	9305      	str	r3, [sp, #20]
 800689c:	eba3 0309 	sub.w	r3, r3, r9
 80068a0:	455b      	cmp	r3, fp
 80068a2:	dc33      	bgt.n	800690c <_printf_float+0x384>
 80068a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068a8:	429a      	cmp	r2, r3
 80068aa:	db3b      	blt.n	8006924 <_printf_float+0x39c>
 80068ac:	6823      	ldr	r3, [r4, #0]
 80068ae:	07da      	lsls	r2, r3, #31
 80068b0:	d438      	bmi.n	8006924 <_printf_float+0x39c>
 80068b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068b4:	9b05      	ldr	r3, [sp, #20]
 80068b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	eba2 0901 	sub.w	r9, r2, r1
 80068be:	4599      	cmp	r9, r3
 80068c0:	bfa8      	it	ge
 80068c2:	4699      	movge	r9, r3
 80068c4:	f1b9 0f00 	cmp.w	r9, #0
 80068c8:	dc35      	bgt.n	8006936 <_printf_float+0x3ae>
 80068ca:	f04f 0800 	mov.w	r8, #0
 80068ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068d2:	f104 0a1a 	add.w	sl, r4, #26
 80068d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068da:	1a9b      	subs	r3, r3, r2
 80068dc:	eba3 0309 	sub.w	r3, r3, r9
 80068e0:	4543      	cmp	r3, r8
 80068e2:	f77f af79 	ble.w	80067d8 <_printf_float+0x250>
 80068e6:	2301      	movs	r3, #1
 80068e8:	4652      	mov	r2, sl
 80068ea:	4631      	mov	r1, r6
 80068ec:	4628      	mov	r0, r5
 80068ee:	47b8      	blx	r7
 80068f0:	3001      	adds	r0, #1
 80068f2:	f43f aeaa 	beq.w	800664a <_printf_float+0xc2>
 80068f6:	f108 0801 	add.w	r8, r8, #1
 80068fa:	e7ec      	b.n	80068d6 <_printf_float+0x34e>
 80068fc:	4613      	mov	r3, r2
 80068fe:	4631      	mov	r1, r6
 8006900:	4642      	mov	r2, r8
 8006902:	4628      	mov	r0, r5
 8006904:	47b8      	blx	r7
 8006906:	3001      	adds	r0, #1
 8006908:	d1c0      	bne.n	800688c <_printf_float+0x304>
 800690a:	e69e      	b.n	800664a <_printf_float+0xc2>
 800690c:	2301      	movs	r3, #1
 800690e:	4631      	mov	r1, r6
 8006910:	4628      	mov	r0, r5
 8006912:	9205      	str	r2, [sp, #20]
 8006914:	47b8      	blx	r7
 8006916:	3001      	adds	r0, #1
 8006918:	f43f ae97 	beq.w	800664a <_printf_float+0xc2>
 800691c:	9a05      	ldr	r2, [sp, #20]
 800691e:	f10b 0b01 	add.w	fp, fp, #1
 8006922:	e7b9      	b.n	8006898 <_printf_float+0x310>
 8006924:	ee18 3a10 	vmov	r3, s16
 8006928:	4652      	mov	r2, sl
 800692a:	4631      	mov	r1, r6
 800692c:	4628      	mov	r0, r5
 800692e:	47b8      	blx	r7
 8006930:	3001      	adds	r0, #1
 8006932:	d1be      	bne.n	80068b2 <_printf_float+0x32a>
 8006934:	e689      	b.n	800664a <_printf_float+0xc2>
 8006936:	9a05      	ldr	r2, [sp, #20]
 8006938:	464b      	mov	r3, r9
 800693a:	4442      	add	r2, r8
 800693c:	4631      	mov	r1, r6
 800693e:	4628      	mov	r0, r5
 8006940:	47b8      	blx	r7
 8006942:	3001      	adds	r0, #1
 8006944:	d1c1      	bne.n	80068ca <_printf_float+0x342>
 8006946:	e680      	b.n	800664a <_printf_float+0xc2>
 8006948:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800694a:	2a01      	cmp	r2, #1
 800694c:	dc01      	bgt.n	8006952 <_printf_float+0x3ca>
 800694e:	07db      	lsls	r3, r3, #31
 8006950:	d538      	bpl.n	80069c4 <_printf_float+0x43c>
 8006952:	2301      	movs	r3, #1
 8006954:	4642      	mov	r2, r8
 8006956:	4631      	mov	r1, r6
 8006958:	4628      	mov	r0, r5
 800695a:	47b8      	blx	r7
 800695c:	3001      	adds	r0, #1
 800695e:	f43f ae74 	beq.w	800664a <_printf_float+0xc2>
 8006962:	ee18 3a10 	vmov	r3, s16
 8006966:	4652      	mov	r2, sl
 8006968:	4631      	mov	r1, r6
 800696a:	4628      	mov	r0, r5
 800696c:	47b8      	blx	r7
 800696e:	3001      	adds	r0, #1
 8006970:	f43f ae6b 	beq.w	800664a <_printf_float+0xc2>
 8006974:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006978:	2200      	movs	r2, #0
 800697a:	2300      	movs	r3, #0
 800697c:	f7fa f8c4 	bl	8000b08 <__aeabi_dcmpeq>
 8006980:	b9d8      	cbnz	r0, 80069ba <_printf_float+0x432>
 8006982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006984:	f108 0201 	add.w	r2, r8, #1
 8006988:	3b01      	subs	r3, #1
 800698a:	4631      	mov	r1, r6
 800698c:	4628      	mov	r0, r5
 800698e:	47b8      	blx	r7
 8006990:	3001      	adds	r0, #1
 8006992:	d10e      	bne.n	80069b2 <_printf_float+0x42a>
 8006994:	e659      	b.n	800664a <_printf_float+0xc2>
 8006996:	2301      	movs	r3, #1
 8006998:	4652      	mov	r2, sl
 800699a:	4631      	mov	r1, r6
 800699c:	4628      	mov	r0, r5
 800699e:	47b8      	blx	r7
 80069a0:	3001      	adds	r0, #1
 80069a2:	f43f ae52 	beq.w	800664a <_printf_float+0xc2>
 80069a6:	f108 0801 	add.w	r8, r8, #1
 80069aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069ac:	3b01      	subs	r3, #1
 80069ae:	4543      	cmp	r3, r8
 80069b0:	dcf1      	bgt.n	8006996 <_printf_float+0x40e>
 80069b2:	464b      	mov	r3, r9
 80069b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80069b8:	e6dc      	b.n	8006774 <_printf_float+0x1ec>
 80069ba:	f04f 0800 	mov.w	r8, #0
 80069be:	f104 0a1a 	add.w	sl, r4, #26
 80069c2:	e7f2      	b.n	80069aa <_printf_float+0x422>
 80069c4:	2301      	movs	r3, #1
 80069c6:	4642      	mov	r2, r8
 80069c8:	e7df      	b.n	800698a <_printf_float+0x402>
 80069ca:	2301      	movs	r3, #1
 80069cc:	464a      	mov	r2, r9
 80069ce:	4631      	mov	r1, r6
 80069d0:	4628      	mov	r0, r5
 80069d2:	47b8      	blx	r7
 80069d4:	3001      	adds	r0, #1
 80069d6:	f43f ae38 	beq.w	800664a <_printf_float+0xc2>
 80069da:	f108 0801 	add.w	r8, r8, #1
 80069de:	68e3      	ldr	r3, [r4, #12]
 80069e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80069e2:	1a5b      	subs	r3, r3, r1
 80069e4:	4543      	cmp	r3, r8
 80069e6:	dcf0      	bgt.n	80069ca <_printf_float+0x442>
 80069e8:	e6fa      	b.n	80067e0 <_printf_float+0x258>
 80069ea:	f04f 0800 	mov.w	r8, #0
 80069ee:	f104 0919 	add.w	r9, r4, #25
 80069f2:	e7f4      	b.n	80069de <_printf_float+0x456>

080069f4 <_printf_common>:
 80069f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069f8:	4616      	mov	r6, r2
 80069fa:	4699      	mov	r9, r3
 80069fc:	688a      	ldr	r2, [r1, #8]
 80069fe:	690b      	ldr	r3, [r1, #16]
 8006a00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a04:	4293      	cmp	r3, r2
 8006a06:	bfb8      	it	lt
 8006a08:	4613      	movlt	r3, r2
 8006a0a:	6033      	str	r3, [r6, #0]
 8006a0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a10:	4607      	mov	r7, r0
 8006a12:	460c      	mov	r4, r1
 8006a14:	b10a      	cbz	r2, 8006a1a <_printf_common+0x26>
 8006a16:	3301      	adds	r3, #1
 8006a18:	6033      	str	r3, [r6, #0]
 8006a1a:	6823      	ldr	r3, [r4, #0]
 8006a1c:	0699      	lsls	r1, r3, #26
 8006a1e:	bf42      	ittt	mi
 8006a20:	6833      	ldrmi	r3, [r6, #0]
 8006a22:	3302      	addmi	r3, #2
 8006a24:	6033      	strmi	r3, [r6, #0]
 8006a26:	6825      	ldr	r5, [r4, #0]
 8006a28:	f015 0506 	ands.w	r5, r5, #6
 8006a2c:	d106      	bne.n	8006a3c <_printf_common+0x48>
 8006a2e:	f104 0a19 	add.w	sl, r4, #25
 8006a32:	68e3      	ldr	r3, [r4, #12]
 8006a34:	6832      	ldr	r2, [r6, #0]
 8006a36:	1a9b      	subs	r3, r3, r2
 8006a38:	42ab      	cmp	r3, r5
 8006a3a:	dc26      	bgt.n	8006a8a <_printf_common+0x96>
 8006a3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a40:	1e13      	subs	r3, r2, #0
 8006a42:	6822      	ldr	r2, [r4, #0]
 8006a44:	bf18      	it	ne
 8006a46:	2301      	movne	r3, #1
 8006a48:	0692      	lsls	r2, r2, #26
 8006a4a:	d42b      	bmi.n	8006aa4 <_printf_common+0xb0>
 8006a4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a50:	4649      	mov	r1, r9
 8006a52:	4638      	mov	r0, r7
 8006a54:	47c0      	blx	r8
 8006a56:	3001      	adds	r0, #1
 8006a58:	d01e      	beq.n	8006a98 <_printf_common+0xa4>
 8006a5a:	6823      	ldr	r3, [r4, #0]
 8006a5c:	68e5      	ldr	r5, [r4, #12]
 8006a5e:	6832      	ldr	r2, [r6, #0]
 8006a60:	f003 0306 	and.w	r3, r3, #6
 8006a64:	2b04      	cmp	r3, #4
 8006a66:	bf08      	it	eq
 8006a68:	1aad      	subeq	r5, r5, r2
 8006a6a:	68a3      	ldr	r3, [r4, #8]
 8006a6c:	6922      	ldr	r2, [r4, #16]
 8006a6e:	bf0c      	ite	eq
 8006a70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a74:	2500      	movne	r5, #0
 8006a76:	4293      	cmp	r3, r2
 8006a78:	bfc4      	itt	gt
 8006a7a:	1a9b      	subgt	r3, r3, r2
 8006a7c:	18ed      	addgt	r5, r5, r3
 8006a7e:	2600      	movs	r6, #0
 8006a80:	341a      	adds	r4, #26
 8006a82:	42b5      	cmp	r5, r6
 8006a84:	d11a      	bne.n	8006abc <_printf_common+0xc8>
 8006a86:	2000      	movs	r0, #0
 8006a88:	e008      	b.n	8006a9c <_printf_common+0xa8>
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	4652      	mov	r2, sl
 8006a8e:	4649      	mov	r1, r9
 8006a90:	4638      	mov	r0, r7
 8006a92:	47c0      	blx	r8
 8006a94:	3001      	adds	r0, #1
 8006a96:	d103      	bne.n	8006aa0 <_printf_common+0xac>
 8006a98:	f04f 30ff 	mov.w	r0, #4294967295
 8006a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aa0:	3501      	adds	r5, #1
 8006aa2:	e7c6      	b.n	8006a32 <_printf_common+0x3e>
 8006aa4:	18e1      	adds	r1, r4, r3
 8006aa6:	1c5a      	adds	r2, r3, #1
 8006aa8:	2030      	movs	r0, #48	; 0x30
 8006aaa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006aae:	4422      	add	r2, r4
 8006ab0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ab4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ab8:	3302      	adds	r3, #2
 8006aba:	e7c7      	b.n	8006a4c <_printf_common+0x58>
 8006abc:	2301      	movs	r3, #1
 8006abe:	4622      	mov	r2, r4
 8006ac0:	4649      	mov	r1, r9
 8006ac2:	4638      	mov	r0, r7
 8006ac4:	47c0      	blx	r8
 8006ac6:	3001      	adds	r0, #1
 8006ac8:	d0e6      	beq.n	8006a98 <_printf_common+0xa4>
 8006aca:	3601      	adds	r6, #1
 8006acc:	e7d9      	b.n	8006a82 <_printf_common+0x8e>
	...

08006ad0 <_printf_i>:
 8006ad0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ad4:	460c      	mov	r4, r1
 8006ad6:	4691      	mov	r9, r2
 8006ad8:	7e27      	ldrb	r7, [r4, #24]
 8006ada:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006adc:	2f78      	cmp	r7, #120	; 0x78
 8006ade:	4680      	mov	r8, r0
 8006ae0:	469a      	mov	sl, r3
 8006ae2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ae6:	d807      	bhi.n	8006af8 <_printf_i+0x28>
 8006ae8:	2f62      	cmp	r7, #98	; 0x62
 8006aea:	d80a      	bhi.n	8006b02 <_printf_i+0x32>
 8006aec:	2f00      	cmp	r7, #0
 8006aee:	f000 80d8 	beq.w	8006ca2 <_printf_i+0x1d2>
 8006af2:	2f58      	cmp	r7, #88	; 0x58
 8006af4:	f000 80a3 	beq.w	8006c3e <_printf_i+0x16e>
 8006af8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006afc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b00:	e03a      	b.n	8006b78 <_printf_i+0xa8>
 8006b02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b06:	2b15      	cmp	r3, #21
 8006b08:	d8f6      	bhi.n	8006af8 <_printf_i+0x28>
 8006b0a:	a001      	add	r0, pc, #4	; (adr r0, 8006b10 <_printf_i+0x40>)
 8006b0c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006b10:	08006b69 	.word	0x08006b69
 8006b14:	08006b7d 	.word	0x08006b7d
 8006b18:	08006af9 	.word	0x08006af9
 8006b1c:	08006af9 	.word	0x08006af9
 8006b20:	08006af9 	.word	0x08006af9
 8006b24:	08006af9 	.word	0x08006af9
 8006b28:	08006b7d 	.word	0x08006b7d
 8006b2c:	08006af9 	.word	0x08006af9
 8006b30:	08006af9 	.word	0x08006af9
 8006b34:	08006af9 	.word	0x08006af9
 8006b38:	08006af9 	.word	0x08006af9
 8006b3c:	08006c89 	.word	0x08006c89
 8006b40:	08006bad 	.word	0x08006bad
 8006b44:	08006c6b 	.word	0x08006c6b
 8006b48:	08006af9 	.word	0x08006af9
 8006b4c:	08006af9 	.word	0x08006af9
 8006b50:	08006cab 	.word	0x08006cab
 8006b54:	08006af9 	.word	0x08006af9
 8006b58:	08006bad 	.word	0x08006bad
 8006b5c:	08006af9 	.word	0x08006af9
 8006b60:	08006af9 	.word	0x08006af9
 8006b64:	08006c73 	.word	0x08006c73
 8006b68:	680b      	ldr	r3, [r1, #0]
 8006b6a:	1d1a      	adds	r2, r3, #4
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	600a      	str	r2, [r1, #0]
 8006b70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006b74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e0a3      	b.n	8006cc4 <_printf_i+0x1f4>
 8006b7c:	6825      	ldr	r5, [r4, #0]
 8006b7e:	6808      	ldr	r0, [r1, #0]
 8006b80:	062e      	lsls	r6, r5, #24
 8006b82:	f100 0304 	add.w	r3, r0, #4
 8006b86:	d50a      	bpl.n	8006b9e <_printf_i+0xce>
 8006b88:	6805      	ldr	r5, [r0, #0]
 8006b8a:	600b      	str	r3, [r1, #0]
 8006b8c:	2d00      	cmp	r5, #0
 8006b8e:	da03      	bge.n	8006b98 <_printf_i+0xc8>
 8006b90:	232d      	movs	r3, #45	; 0x2d
 8006b92:	426d      	negs	r5, r5
 8006b94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b98:	485e      	ldr	r0, [pc, #376]	; (8006d14 <_printf_i+0x244>)
 8006b9a:	230a      	movs	r3, #10
 8006b9c:	e019      	b.n	8006bd2 <_printf_i+0x102>
 8006b9e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006ba2:	6805      	ldr	r5, [r0, #0]
 8006ba4:	600b      	str	r3, [r1, #0]
 8006ba6:	bf18      	it	ne
 8006ba8:	b22d      	sxthne	r5, r5
 8006baa:	e7ef      	b.n	8006b8c <_printf_i+0xbc>
 8006bac:	680b      	ldr	r3, [r1, #0]
 8006bae:	6825      	ldr	r5, [r4, #0]
 8006bb0:	1d18      	adds	r0, r3, #4
 8006bb2:	6008      	str	r0, [r1, #0]
 8006bb4:	0628      	lsls	r0, r5, #24
 8006bb6:	d501      	bpl.n	8006bbc <_printf_i+0xec>
 8006bb8:	681d      	ldr	r5, [r3, #0]
 8006bba:	e002      	b.n	8006bc2 <_printf_i+0xf2>
 8006bbc:	0669      	lsls	r1, r5, #25
 8006bbe:	d5fb      	bpl.n	8006bb8 <_printf_i+0xe8>
 8006bc0:	881d      	ldrh	r5, [r3, #0]
 8006bc2:	4854      	ldr	r0, [pc, #336]	; (8006d14 <_printf_i+0x244>)
 8006bc4:	2f6f      	cmp	r7, #111	; 0x6f
 8006bc6:	bf0c      	ite	eq
 8006bc8:	2308      	moveq	r3, #8
 8006bca:	230a      	movne	r3, #10
 8006bcc:	2100      	movs	r1, #0
 8006bce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006bd2:	6866      	ldr	r6, [r4, #4]
 8006bd4:	60a6      	str	r6, [r4, #8]
 8006bd6:	2e00      	cmp	r6, #0
 8006bd8:	bfa2      	ittt	ge
 8006bda:	6821      	ldrge	r1, [r4, #0]
 8006bdc:	f021 0104 	bicge.w	r1, r1, #4
 8006be0:	6021      	strge	r1, [r4, #0]
 8006be2:	b90d      	cbnz	r5, 8006be8 <_printf_i+0x118>
 8006be4:	2e00      	cmp	r6, #0
 8006be6:	d04d      	beq.n	8006c84 <_printf_i+0x1b4>
 8006be8:	4616      	mov	r6, r2
 8006bea:	fbb5 f1f3 	udiv	r1, r5, r3
 8006bee:	fb03 5711 	mls	r7, r3, r1, r5
 8006bf2:	5dc7      	ldrb	r7, [r0, r7]
 8006bf4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006bf8:	462f      	mov	r7, r5
 8006bfa:	42bb      	cmp	r3, r7
 8006bfc:	460d      	mov	r5, r1
 8006bfe:	d9f4      	bls.n	8006bea <_printf_i+0x11a>
 8006c00:	2b08      	cmp	r3, #8
 8006c02:	d10b      	bne.n	8006c1c <_printf_i+0x14c>
 8006c04:	6823      	ldr	r3, [r4, #0]
 8006c06:	07df      	lsls	r7, r3, #31
 8006c08:	d508      	bpl.n	8006c1c <_printf_i+0x14c>
 8006c0a:	6923      	ldr	r3, [r4, #16]
 8006c0c:	6861      	ldr	r1, [r4, #4]
 8006c0e:	4299      	cmp	r1, r3
 8006c10:	bfde      	ittt	le
 8006c12:	2330      	movle	r3, #48	; 0x30
 8006c14:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c18:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c1c:	1b92      	subs	r2, r2, r6
 8006c1e:	6122      	str	r2, [r4, #16]
 8006c20:	f8cd a000 	str.w	sl, [sp]
 8006c24:	464b      	mov	r3, r9
 8006c26:	aa03      	add	r2, sp, #12
 8006c28:	4621      	mov	r1, r4
 8006c2a:	4640      	mov	r0, r8
 8006c2c:	f7ff fee2 	bl	80069f4 <_printf_common>
 8006c30:	3001      	adds	r0, #1
 8006c32:	d14c      	bne.n	8006cce <_printf_i+0x1fe>
 8006c34:	f04f 30ff 	mov.w	r0, #4294967295
 8006c38:	b004      	add	sp, #16
 8006c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c3e:	4835      	ldr	r0, [pc, #212]	; (8006d14 <_printf_i+0x244>)
 8006c40:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006c44:	6823      	ldr	r3, [r4, #0]
 8006c46:	680e      	ldr	r6, [r1, #0]
 8006c48:	061f      	lsls	r7, r3, #24
 8006c4a:	f856 5b04 	ldr.w	r5, [r6], #4
 8006c4e:	600e      	str	r6, [r1, #0]
 8006c50:	d514      	bpl.n	8006c7c <_printf_i+0x1ac>
 8006c52:	07d9      	lsls	r1, r3, #31
 8006c54:	bf44      	itt	mi
 8006c56:	f043 0320 	orrmi.w	r3, r3, #32
 8006c5a:	6023      	strmi	r3, [r4, #0]
 8006c5c:	b91d      	cbnz	r5, 8006c66 <_printf_i+0x196>
 8006c5e:	6823      	ldr	r3, [r4, #0]
 8006c60:	f023 0320 	bic.w	r3, r3, #32
 8006c64:	6023      	str	r3, [r4, #0]
 8006c66:	2310      	movs	r3, #16
 8006c68:	e7b0      	b.n	8006bcc <_printf_i+0xfc>
 8006c6a:	6823      	ldr	r3, [r4, #0]
 8006c6c:	f043 0320 	orr.w	r3, r3, #32
 8006c70:	6023      	str	r3, [r4, #0]
 8006c72:	2378      	movs	r3, #120	; 0x78
 8006c74:	4828      	ldr	r0, [pc, #160]	; (8006d18 <_printf_i+0x248>)
 8006c76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c7a:	e7e3      	b.n	8006c44 <_printf_i+0x174>
 8006c7c:	065e      	lsls	r6, r3, #25
 8006c7e:	bf48      	it	mi
 8006c80:	b2ad      	uxthmi	r5, r5
 8006c82:	e7e6      	b.n	8006c52 <_printf_i+0x182>
 8006c84:	4616      	mov	r6, r2
 8006c86:	e7bb      	b.n	8006c00 <_printf_i+0x130>
 8006c88:	680b      	ldr	r3, [r1, #0]
 8006c8a:	6826      	ldr	r6, [r4, #0]
 8006c8c:	6960      	ldr	r0, [r4, #20]
 8006c8e:	1d1d      	adds	r5, r3, #4
 8006c90:	600d      	str	r5, [r1, #0]
 8006c92:	0635      	lsls	r5, r6, #24
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	d501      	bpl.n	8006c9c <_printf_i+0x1cc>
 8006c98:	6018      	str	r0, [r3, #0]
 8006c9a:	e002      	b.n	8006ca2 <_printf_i+0x1d2>
 8006c9c:	0671      	lsls	r1, r6, #25
 8006c9e:	d5fb      	bpl.n	8006c98 <_printf_i+0x1c8>
 8006ca0:	8018      	strh	r0, [r3, #0]
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	6123      	str	r3, [r4, #16]
 8006ca6:	4616      	mov	r6, r2
 8006ca8:	e7ba      	b.n	8006c20 <_printf_i+0x150>
 8006caa:	680b      	ldr	r3, [r1, #0]
 8006cac:	1d1a      	adds	r2, r3, #4
 8006cae:	600a      	str	r2, [r1, #0]
 8006cb0:	681e      	ldr	r6, [r3, #0]
 8006cb2:	6862      	ldr	r2, [r4, #4]
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	4630      	mov	r0, r6
 8006cb8:	f7f9 fab2 	bl	8000220 <memchr>
 8006cbc:	b108      	cbz	r0, 8006cc2 <_printf_i+0x1f2>
 8006cbe:	1b80      	subs	r0, r0, r6
 8006cc0:	6060      	str	r0, [r4, #4]
 8006cc2:	6863      	ldr	r3, [r4, #4]
 8006cc4:	6123      	str	r3, [r4, #16]
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ccc:	e7a8      	b.n	8006c20 <_printf_i+0x150>
 8006cce:	6923      	ldr	r3, [r4, #16]
 8006cd0:	4632      	mov	r2, r6
 8006cd2:	4649      	mov	r1, r9
 8006cd4:	4640      	mov	r0, r8
 8006cd6:	47d0      	blx	sl
 8006cd8:	3001      	adds	r0, #1
 8006cda:	d0ab      	beq.n	8006c34 <_printf_i+0x164>
 8006cdc:	6823      	ldr	r3, [r4, #0]
 8006cde:	079b      	lsls	r3, r3, #30
 8006ce0:	d413      	bmi.n	8006d0a <_printf_i+0x23a>
 8006ce2:	68e0      	ldr	r0, [r4, #12]
 8006ce4:	9b03      	ldr	r3, [sp, #12]
 8006ce6:	4298      	cmp	r0, r3
 8006ce8:	bfb8      	it	lt
 8006cea:	4618      	movlt	r0, r3
 8006cec:	e7a4      	b.n	8006c38 <_printf_i+0x168>
 8006cee:	2301      	movs	r3, #1
 8006cf0:	4632      	mov	r2, r6
 8006cf2:	4649      	mov	r1, r9
 8006cf4:	4640      	mov	r0, r8
 8006cf6:	47d0      	blx	sl
 8006cf8:	3001      	adds	r0, #1
 8006cfa:	d09b      	beq.n	8006c34 <_printf_i+0x164>
 8006cfc:	3501      	adds	r5, #1
 8006cfe:	68e3      	ldr	r3, [r4, #12]
 8006d00:	9903      	ldr	r1, [sp, #12]
 8006d02:	1a5b      	subs	r3, r3, r1
 8006d04:	42ab      	cmp	r3, r5
 8006d06:	dcf2      	bgt.n	8006cee <_printf_i+0x21e>
 8006d08:	e7eb      	b.n	8006ce2 <_printf_i+0x212>
 8006d0a:	2500      	movs	r5, #0
 8006d0c:	f104 0619 	add.w	r6, r4, #25
 8006d10:	e7f5      	b.n	8006cfe <_printf_i+0x22e>
 8006d12:	bf00      	nop
 8006d14:	08009222 	.word	0x08009222
 8006d18:	08009233 	.word	0x08009233

08006d1c <iprintf>:
 8006d1c:	b40f      	push	{r0, r1, r2, r3}
 8006d1e:	4b0a      	ldr	r3, [pc, #40]	; (8006d48 <iprintf+0x2c>)
 8006d20:	b513      	push	{r0, r1, r4, lr}
 8006d22:	681c      	ldr	r4, [r3, #0]
 8006d24:	b124      	cbz	r4, 8006d30 <iprintf+0x14>
 8006d26:	69a3      	ldr	r3, [r4, #24]
 8006d28:	b913      	cbnz	r3, 8006d30 <iprintf+0x14>
 8006d2a:	4620      	mov	r0, r4
 8006d2c:	f001 f99e 	bl	800806c <__sinit>
 8006d30:	ab05      	add	r3, sp, #20
 8006d32:	9a04      	ldr	r2, [sp, #16]
 8006d34:	68a1      	ldr	r1, [r4, #8]
 8006d36:	9301      	str	r3, [sp, #4]
 8006d38:	4620      	mov	r0, r4
 8006d3a:	f001 ff19 	bl	8008b70 <_vfiprintf_r>
 8006d3e:	b002      	add	sp, #8
 8006d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d44:	b004      	add	sp, #16
 8006d46:	4770      	bx	lr
 8006d48:	2000000c 	.word	0x2000000c

08006d4c <_puts_r>:
 8006d4c:	b570      	push	{r4, r5, r6, lr}
 8006d4e:	460e      	mov	r6, r1
 8006d50:	4605      	mov	r5, r0
 8006d52:	b118      	cbz	r0, 8006d5c <_puts_r+0x10>
 8006d54:	6983      	ldr	r3, [r0, #24]
 8006d56:	b90b      	cbnz	r3, 8006d5c <_puts_r+0x10>
 8006d58:	f001 f988 	bl	800806c <__sinit>
 8006d5c:	69ab      	ldr	r3, [r5, #24]
 8006d5e:	68ac      	ldr	r4, [r5, #8]
 8006d60:	b913      	cbnz	r3, 8006d68 <_puts_r+0x1c>
 8006d62:	4628      	mov	r0, r5
 8006d64:	f001 f982 	bl	800806c <__sinit>
 8006d68:	4b2c      	ldr	r3, [pc, #176]	; (8006e1c <_puts_r+0xd0>)
 8006d6a:	429c      	cmp	r4, r3
 8006d6c:	d120      	bne.n	8006db0 <_puts_r+0x64>
 8006d6e:	686c      	ldr	r4, [r5, #4]
 8006d70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d72:	07db      	lsls	r3, r3, #31
 8006d74:	d405      	bmi.n	8006d82 <_puts_r+0x36>
 8006d76:	89a3      	ldrh	r3, [r4, #12]
 8006d78:	0598      	lsls	r0, r3, #22
 8006d7a:	d402      	bmi.n	8006d82 <_puts_r+0x36>
 8006d7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d7e:	f001 fa18 	bl	80081b2 <__retarget_lock_acquire_recursive>
 8006d82:	89a3      	ldrh	r3, [r4, #12]
 8006d84:	0719      	lsls	r1, r3, #28
 8006d86:	d51d      	bpl.n	8006dc4 <_puts_r+0x78>
 8006d88:	6923      	ldr	r3, [r4, #16]
 8006d8a:	b1db      	cbz	r3, 8006dc4 <_puts_r+0x78>
 8006d8c:	3e01      	subs	r6, #1
 8006d8e:	68a3      	ldr	r3, [r4, #8]
 8006d90:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006d94:	3b01      	subs	r3, #1
 8006d96:	60a3      	str	r3, [r4, #8]
 8006d98:	bb39      	cbnz	r1, 8006dea <_puts_r+0x9e>
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	da38      	bge.n	8006e10 <_puts_r+0xc4>
 8006d9e:	4622      	mov	r2, r4
 8006da0:	210a      	movs	r1, #10
 8006da2:	4628      	mov	r0, r5
 8006da4:	f000 f90e 	bl	8006fc4 <__swbuf_r>
 8006da8:	3001      	adds	r0, #1
 8006daa:	d011      	beq.n	8006dd0 <_puts_r+0x84>
 8006dac:	250a      	movs	r5, #10
 8006dae:	e011      	b.n	8006dd4 <_puts_r+0x88>
 8006db0:	4b1b      	ldr	r3, [pc, #108]	; (8006e20 <_puts_r+0xd4>)
 8006db2:	429c      	cmp	r4, r3
 8006db4:	d101      	bne.n	8006dba <_puts_r+0x6e>
 8006db6:	68ac      	ldr	r4, [r5, #8]
 8006db8:	e7da      	b.n	8006d70 <_puts_r+0x24>
 8006dba:	4b1a      	ldr	r3, [pc, #104]	; (8006e24 <_puts_r+0xd8>)
 8006dbc:	429c      	cmp	r4, r3
 8006dbe:	bf08      	it	eq
 8006dc0:	68ec      	ldreq	r4, [r5, #12]
 8006dc2:	e7d5      	b.n	8006d70 <_puts_r+0x24>
 8006dc4:	4621      	mov	r1, r4
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	f000 f94e 	bl	8007068 <__swsetup_r>
 8006dcc:	2800      	cmp	r0, #0
 8006dce:	d0dd      	beq.n	8006d8c <_puts_r+0x40>
 8006dd0:	f04f 35ff 	mov.w	r5, #4294967295
 8006dd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006dd6:	07da      	lsls	r2, r3, #31
 8006dd8:	d405      	bmi.n	8006de6 <_puts_r+0x9a>
 8006dda:	89a3      	ldrh	r3, [r4, #12]
 8006ddc:	059b      	lsls	r3, r3, #22
 8006dde:	d402      	bmi.n	8006de6 <_puts_r+0x9a>
 8006de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006de2:	f001 f9e7 	bl	80081b4 <__retarget_lock_release_recursive>
 8006de6:	4628      	mov	r0, r5
 8006de8:	bd70      	pop	{r4, r5, r6, pc}
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	da04      	bge.n	8006df8 <_puts_r+0xac>
 8006dee:	69a2      	ldr	r2, [r4, #24]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	dc06      	bgt.n	8006e02 <_puts_r+0xb6>
 8006df4:	290a      	cmp	r1, #10
 8006df6:	d004      	beq.n	8006e02 <_puts_r+0xb6>
 8006df8:	6823      	ldr	r3, [r4, #0]
 8006dfa:	1c5a      	adds	r2, r3, #1
 8006dfc:	6022      	str	r2, [r4, #0]
 8006dfe:	7019      	strb	r1, [r3, #0]
 8006e00:	e7c5      	b.n	8006d8e <_puts_r+0x42>
 8006e02:	4622      	mov	r2, r4
 8006e04:	4628      	mov	r0, r5
 8006e06:	f000 f8dd 	bl	8006fc4 <__swbuf_r>
 8006e0a:	3001      	adds	r0, #1
 8006e0c:	d1bf      	bne.n	8006d8e <_puts_r+0x42>
 8006e0e:	e7df      	b.n	8006dd0 <_puts_r+0x84>
 8006e10:	6823      	ldr	r3, [r4, #0]
 8006e12:	250a      	movs	r5, #10
 8006e14:	1c5a      	adds	r2, r3, #1
 8006e16:	6022      	str	r2, [r4, #0]
 8006e18:	701d      	strb	r5, [r3, #0]
 8006e1a:	e7db      	b.n	8006dd4 <_puts_r+0x88>
 8006e1c:	080092f8 	.word	0x080092f8
 8006e20:	08009318 	.word	0x08009318
 8006e24:	080092d8 	.word	0x080092d8

08006e28 <puts>:
 8006e28:	4b02      	ldr	r3, [pc, #8]	; (8006e34 <puts+0xc>)
 8006e2a:	4601      	mov	r1, r0
 8006e2c:	6818      	ldr	r0, [r3, #0]
 8006e2e:	f7ff bf8d 	b.w	8006d4c <_puts_r>
 8006e32:	bf00      	nop
 8006e34:	2000000c 	.word	0x2000000c

08006e38 <setvbuf>:
 8006e38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006e3c:	461d      	mov	r5, r3
 8006e3e:	4b5d      	ldr	r3, [pc, #372]	; (8006fb4 <setvbuf+0x17c>)
 8006e40:	681f      	ldr	r7, [r3, #0]
 8006e42:	4604      	mov	r4, r0
 8006e44:	460e      	mov	r6, r1
 8006e46:	4690      	mov	r8, r2
 8006e48:	b127      	cbz	r7, 8006e54 <setvbuf+0x1c>
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	b913      	cbnz	r3, 8006e54 <setvbuf+0x1c>
 8006e4e:	4638      	mov	r0, r7
 8006e50:	f001 f90c 	bl	800806c <__sinit>
 8006e54:	4b58      	ldr	r3, [pc, #352]	; (8006fb8 <setvbuf+0x180>)
 8006e56:	429c      	cmp	r4, r3
 8006e58:	d167      	bne.n	8006f2a <setvbuf+0xf2>
 8006e5a:	687c      	ldr	r4, [r7, #4]
 8006e5c:	f1b8 0f02 	cmp.w	r8, #2
 8006e60:	d006      	beq.n	8006e70 <setvbuf+0x38>
 8006e62:	f1b8 0f01 	cmp.w	r8, #1
 8006e66:	f200 809f 	bhi.w	8006fa8 <setvbuf+0x170>
 8006e6a:	2d00      	cmp	r5, #0
 8006e6c:	f2c0 809c 	blt.w	8006fa8 <setvbuf+0x170>
 8006e70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e72:	07db      	lsls	r3, r3, #31
 8006e74:	d405      	bmi.n	8006e82 <setvbuf+0x4a>
 8006e76:	89a3      	ldrh	r3, [r4, #12]
 8006e78:	0598      	lsls	r0, r3, #22
 8006e7a:	d402      	bmi.n	8006e82 <setvbuf+0x4a>
 8006e7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e7e:	f001 f998 	bl	80081b2 <__retarget_lock_acquire_recursive>
 8006e82:	4621      	mov	r1, r4
 8006e84:	4638      	mov	r0, r7
 8006e86:	f001 f85d 	bl	8007f44 <_fflush_r>
 8006e8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e8c:	b141      	cbz	r1, 8006ea0 <setvbuf+0x68>
 8006e8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e92:	4299      	cmp	r1, r3
 8006e94:	d002      	beq.n	8006e9c <setvbuf+0x64>
 8006e96:	4638      	mov	r0, r7
 8006e98:	f001 fd96 	bl	80089c8 <_free_r>
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	6363      	str	r3, [r4, #52]	; 0x34
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	61a3      	str	r3, [r4, #24]
 8006ea4:	6063      	str	r3, [r4, #4]
 8006ea6:	89a3      	ldrh	r3, [r4, #12]
 8006ea8:	0619      	lsls	r1, r3, #24
 8006eaa:	d503      	bpl.n	8006eb4 <setvbuf+0x7c>
 8006eac:	6921      	ldr	r1, [r4, #16]
 8006eae:	4638      	mov	r0, r7
 8006eb0:	f001 fd8a 	bl	80089c8 <_free_r>
 8006eb4:	89a3      	ldrh	r3, [r4, #12]
 8006eb6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8006eba:	f023 0303 	bic.w	r3, r3, #3
 8006ebe:	f1b8 0f02 	cmp.w	r8, #2
 8006ec2:	81a3      	strh	r3, [r4, #12]
 8006ec4:	d06c      	beq.n	8006fa0 <setvbuf+0x168>
 8006ec6:	ab01      	add	r3, sp, #4
 8006ec8:	466a      	mov	r2, sp
 8006eca:	4621      	mov	r1, r4
 8006ecc:	4638      	mov	r0, r7
 8006ece:	f001 f972 	bl	80081b6 <__swhatbuf_r>
 8006ed2:	89a3      	ldrh	r3, [r4, #12]
 8006ed4:	4318      	orrs	r0, r3
 8006ed6:	81a0      	strh	r0, [r4, #12]
 8006ed8:	2d00      	cmp	r5, #0
 8006eda:	d130      	bne.n	8006f3e <setvbuf+0x106>
 8006edc:	9d00      	ldr	r5, [sp, #0]
 8006ede:	4628      	mov	r0, r5
 8006ee0:	f001 f9ce 	bl	8008280 <malloc>
 8006ee4:	4606      	mov	r6, r0
 8006ee6:	2800      	cmp	r0, #0
 8006ee8:	d155      	bne.n	8006f96 <setvbuf+0x15e>
 8006eea:	f8dd 9000 	ldr.w	r9, [sp]
 8006eee:	45a9      	cmp	r9, r5
 8006ef0:	d14a      	bne.n	8006f88 <setvbuf+0x150>
 8006ef2:	f04f 35ff 	mov.w	r5, #4294967295
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	60a2      	str	r2, [r4, #8]
 8006efa:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8006efe:	6022      	str	r2, [r4, #0]
 8006f00:	6122      	str	r2, [r4, #16]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f08:	6162      	str	r2, [r4, #20]
 8006f0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f0c:	f043 0302 	orr.w	r3, r3, #2
 8006f10:	07d2      	lsls	r2, r2, #31
 8006f12:	81a3      	strh	r3, [r4, #12]
 8006f14:	d405      	bmi.n	8006f22 <setvbuf+0xea>
 8006f16:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006f1a:	d102      	bne.n	8006f22 <setvbuf+0xea>
 8006f1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f1e:	f001 f949 	bl	80081b4 <__retarget_lock_release_recursive>
 8006f22:	4628      	mov	r0, r5
 8006f24:	b003      	add	sp, #12
 8006f26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f2a:	4b24      	ldr	r3, [pc, #144]	; (8006fbc <setvbuf+0x184>)
 8006f2c:	429c      	cmp	r4, r3
 8006f2e:	d101      	bne.n	8006f34 <setvbuf+0xfc>
 8006f30:	68bc      	ldr	r4, [r7, #8]
 8006f32:	e793      	b.n	8006e5c <setvbuf+0x24>
 8006f34:	4b22      	ldr	r3, [pc, #136]	; (8006fc0 <setvbuf+0x188>)
 8006f36:	429c      	cmp	r4, r3
 8006f38:	bf08      	it	eq
 8006f3a:	68fc      	ldreq	r4, [r7, #12]
 8006f3c:	e78e      	b.n	8006e5c <setvbuf+0x24>
 8006f3e:	2e00      	cmp	r6, #0
 8006f40:	d0cd      	beq.n	8006ede <setvbuf+0xa6>
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	b913      	cbnz	r3, 8006f4c <setvbuf+0x114>
 8006f46:	4638      	mov	r0, r7
 8006f48:	f001 f890 	bl	800806c <__sinit>
 8006f4c:	f1b8 0f01 	cmp.w	r8, #1
 8006f50:	bf08      	it	eq
 8006f52:	89a3      	ldrheq	r3, [r4, #12]
 8006f54:	6026      	str	r6, [r4, #0]
 8006f56:	bf04      	itt	eq
 8006f58:	f043 0301 	orreq.w	r3, r3, #1
 8006f5c:	81a3      	strheq	r3, [r4, #12]
 8006f5e:	89a2      	ldrh	r2, [r4, #12]
 8006f60:	f012 0308 	ands.w	r3, r2, #8
 8006f64:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006f68:	d01c      	beq.n	8006fa4 <setvbuf+0x16c>
 8006f6a:	07d3      	lsls	r3, r2, #31
 8006f6c:	bf41      	itttt	mi
 8006f6e:	2300      	movmi	r3, #0
 8006f70:	426d      	negmi	r5, r5
 8006f72:	60a3      	strmi	r3, [r4, #8]
 8006f74:	61a5      	strmi	r5, [r4, #24]
 8006f76:	bf58      	it	pl
 8006f78:	60a5      	strpl	r5, [r4, #8]
 8006f7a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8006f7c:	f015 0501 	ands.w	r5, r5, #1
 8006f80:	d115      	bne.n	8006fae <setvbuf+0x176>
 8006f82:	f412 7f00 	tst.w	r2, #512	; 0x200
 8006f86:	e7c8      	b.n	8006f1a <setvbuf+0xe2>
 8006f88:	4648      	mov	r0, r9
 8006f8a:	f001 f979 	bl	8008280 <malloc>
 8006f8e:	4606      	mov	r6, r0
 8006f90:	2800      	cmp	r0, #0
 8006f92:	d0ae      	beq.n	8006ef2 <setvbuf+0xba>
 8006f94:	464d      	mov	r5, r9
 8006f96:	89a3      	ldrh	r3, [r4, #12]
 8006f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f9c:	81a3      	strh	r3, [r4, #12]
 8006f9e:	e7d0      	b.n	8006f42 <setvbuf+0x10a>
 8006fa0:	2500      	movs	r5, #0
 8006fa2:	e7a8      	b.n	8006ef6 <setvbuf+0xbe>
 8006fa4:	60a3      	str	r3, [r4, #8]
 8006fa6:	e7e8      	b.n	8006f7a <setvbuf+0x142>
 8006fa8:	f04f 35ff 	mov.w	r5, #4294967295
 8006fac:	e7b9      	b.n	8006f22 <setvbuf+0xea>
 8006fae:	2500      	movs	r5, #0
 8006fb0:	e7b7      	b.n	8006f22 <setvbuf+0xea>
 8006fb2:	bf00      	nop
 8006fb4:	2000000c 	.word	0x2000000c
 8006fb8:	080092f8 	.word	0x080092f8
 8006fbc:	08009318 	.word	0x08009318
 8006fc0:	080092d8 	.word	0x080092d8

08006fc4 <__swbuf_r>:
 8006fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fc6:	460e      	mov	r6, r1
 8006fc8:	4614      	mov	r4, r2
 8006fca:	4605      	mov	r5, r0
 8006fcc:	b118      	cbz	r0, 8006fd6 <__swbuf_r+0x12>
 8006fce:	6983      	ldr	r3, [r0, #24]
 8006fd0:	b90b      	cbnz	r3, 8006fd6 <__swbuf_r+0x12>
 8006fd2:	f001 f84b 	bl	800806c <__sinit>
 8006fd6:	4b21      	ldr	r3, [pc, #132]	; (800705c <__swbuf_r+0x98>)
 8006fd8:	429c      	cmp	r4, r3
 8006fda:	d12b      	bne.n	8007034 <__swbuf_r+0x70>
 8006fdc:	686c      	ldr	r4, [r5, #4]
 8006fde:	69a3      	ldr	r3, [r4, #24]
 8006fe0:	60a3      	str	r3, [r4, #8]
 8006fe2:	89a3      	ldrh	r3, [r4, #12]
 8006fe4:	071a      	lsls	r2, r3, #28
 8006fe6:	d52f      	bpl.n	8007048 <__swbuf_r+0x84>
 8006fe8:	6923      	ldr	r3, [r4, #16]
 8006fea:	b36b      	cbz	r3, 8007048 <__swbuf_r+0x84>
 8006fec:	6923      	ldr	r3, [r4, #16]
 8006fee:	6820      	ldr	r0, [r4, #0]
 8006ff0:	1ac0      	subs	r0, r0, r3
 8006ff2:	6963      	ldr	r3, [r4, #20]
 8006ff4:	b2f6      	uxtb	r6, r6
 8006ff6:	4283      	cmp	r3, r0
 8006ff8:	4637      	mov	r7, r6
 8006ffa:	dc04      	bgt.n	8007006 <__swbuf_r+0x42>
 8006ffc:	4621      	mov	r1, r4
 8006ffe:	4628      	mov	r0, r5
 8007000:	f000 ffa0 	bl	8007f44 <_fflush_r>
 8007004:	bb30      	cbnz	r0, 8007054 <__swbuf_r+0x90>
 8007006:	68a3      	ldr	r3, [r4, #8]
 8007008:	3b01      	subs	r3, #1
 800700a:	60a3      	str	r3, [r4, #8]
 800700c:	6823      	ldr	r3, [r4, #0]
 800700e:	1c5a      	adds	r2, r3, #1
 8007010:	6022      	str	r2, [r4, #0]
 8007012:	701e      	strb	r6, [r3, #0]
 8007014:	6963      	ldr	r3, [r4, #20]
 8007016:	3001      	adds	r0, #1
 8007018:	4283      	cmp	r3, r0
 800701a:	d004      	beq.n	8007026 <__swbuf_r+0x62>
 800701c:	89a3      	ldrh	r3, [r4, #12]
 800701e:	07db      	lsls	r3, r3, #31
 8007020:	d506      	bpl.n	8007030 <__swbuf_r+0x6c>
 8007022:	2e0a      	cmp	r6, #10
 8007024:	d104      	bne.n	8007030 <__swbuf_r+0x6c>
 8007026:	4621      	mov	r1, r4
 8007028:	4628      	mov	r0, r5
 800702a:	f000 ff8b 	bl	8007f44 <_fflush_r>
 800702e:	b988      	cbnz	r0, 8007054 <__swbuf_r+0x90>
 8007030:	4638      	mov	r0, r7
 8007032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007034:	4b0a      	ldr	r3, [pc, #40]	; (8007060 <__swbuf_r+0x9c>)
 8007036:	429c      	cmp	r4, r3
 8007038:	d101      	bne.n	800703e <__swbuf_r+0x7a>
 800703a:	68ac      	ldr	r4, [r5, #8]
 800703c:	e7cf      	b.n	8006fde <__swbuf_r+0x1a>
 800703e:	4b09      	ldr	r3, [pc, #36]	; (8007064 <__swbuf_r+0xa0>)
 8007040:	429c      	cmp	r4, r3
 8007042:	bf08      	it	eq
 8007044:	68ec      	ldreq	r4, [r5, #12]
 8007046:	e7ca      	b.n	8006fde <__swbuf_r+0x1a>
 8007048:	4621      	mov	r1, r4
 800704a:	4628      	mov	r0, r5
 800704c:	f000 f80c 	bl	8007068 <__swsetup_r>
 8007050:	2800      	cmp	r0, #0
 8007052:	d0cb      	beq.n	8006fec <__swbuf_r+0x28>
 8007054:	f04f 37ff 	mov.w	r7, #4294967295
 8007058:	e7ea      	b.n	8007030 <__swbuf_r+0x6c>
 800705a:	bf00      	nop
 800705c:	080092f8 	.word	0x080092f8
 8007060:	08009318 	.word	0x08009318
 8007064:	080092d8 	.word	0x080092d8

08007068 <__swsetup_r>:
 8007068:	4b32      	ldr	r3, [pc, #200]	; (8007134 <__swsetup_r+0xcc>)
 800706a:	b570      	push	{r4, r5, r6, lr}
 800706c:	681d      	ldr	r5, [r3, #0]
 800706e:	4606      	mov	r6, r0
 8007070:	460c      	mov	r4, r1
 8007072:	b125      	cbz	r5, 800707e <__swsetup_r+0x16>
 8007074:	69ab      	ldr	r3, [r5, #24]
 8007076:	b913      	cbnz	r3, 800707e <__swsetup_r+0x16>
 8007078:	4628      	mov	r0, r5
 800707a:	f000 fff7 	bl	800806c <__sinit>
 800707e:	4b2e      	ldr	r3, [pc, #184]	; (8007138 <__swsetup_r+0xd0>)
 8007080:	429c      	cmp	r4, r3
 8007082:	d10f      	bne.n	80070a4 <__swsetup_r+0x3c>
 8007084:	686c      	ldr	r4, [r5, #4]
 8007086:	89a3      	ldrh	r3, [r4, #12]
 8007088:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800708c:	0719      	lsls	r1, r3, #28
 800708e:	d42c      	bmi.n	80070ea <__swsetup_r+0x82>
 8007090:	06dd      	lsls	r5, r3, #27
 8007092:	d411      	bmi.n	80070b8 <__swsetup_r+0x50>
 8007094:	2309      	movs	r3, #9
 8007096:	6033      	str	r3, [r6, #0]
 8007098:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800709c:	81a3      	strh	r3, [r4, #12]
 800709e:	f04f 30ff 	mov.w	r0, #4294967295
 80070a2:	e03e      	b.n	8007122 <__swsetup_r+0xba>
 80070a4:	4b25      	ldr	r3, [pc, #148]	; (800713c <__swsetup_r+0xd4>)
 80070a6:	429c      	cmp	r4, r3
 80070a8:	d101      	bne.n	80070ae <__swsetup_r+0x46>
 80070aa:	68ac      	ldr	r4, [r5, #8]
 80070ac:	e7eb      	b.n	8007086 <__swsetup_r+0x1e>
 80070ae:	4b24      	ldr	r3, [pc, #144]	; (8007140 <__swsetup_r+0xd8>)
 80070b0:	429c      	cmp	r4, r3
 80070b2:	bf08      	it	eq
 80070b4:	68ec      	ldreq	r4, [r5, #12]
 80070b6:	e7e6      	b.n	8007086 <__swsetup_r+0x1e>
 80070b8:	0758      	lsls	r0, r3, #29
 80070ba:	d512      	bpl.n	80070e2 <__swsetup_r+0x7a>
 80070bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070be:	b141      	cbz	r1, 80070d2 <__swsetup_r+0x6a>
 80070c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070c4:	4299      	cmp	r1, r3
 80070c6:	d002      	beq.n	80070ce <__swsetup_r+0x66>
 80070c8:	4630      	mov	r0, r6
 80070ca:	f001 fc7d 	bl	80089c8 <_free_r>
 80070ce:	2300      	movs	r3, #0
 80070d0:	6363      	str	r3, [r4, #52]	; 0x34
 80070d2:	89a3      	ldrh	r3, [r4, #12]
 80070d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80070d8:	81a3      	strh	r3, [r4, #12]
 80070da:	2300      	movs	r3, #0
 80070dc:	6063      	str	r3, [r4, #4]
 80070de:	6923      	ldr	r3, [r4, #16]
 80070e0:	6023      	str	r3, [r4, #0]
 80070e2:	89a3      	ldrh	r3, [r4, #12]
 80070e4:	f043 0308 	orr.w	r3, r3, #8
 80070e8:	81a3      	strh	r3, [r4, #12]
 80070ea:	6923      	ldr	r3, [r4, #16]
 80070ec:	b94b      	cbnz	r3, 8007102 <__swsetup_r+0x9a>
 80070ee:	89a3      	ldrh	r3, [r4, #12]
 80070f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80070f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070f8:	d003      	beq.n	8007102 <__swsetup_r+0x9a>
 80070fa:	4621      	mov	r1, r4
 80070fc:	4630      	mov	r0, r6
 80070fe:	f001 f87f 	bl	8008200 <__smakebuf_r>
 8007102:	89a0      	ldrh	r0, [r4, #12]
 8007104:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007108:	f010 0301 	ands.w	r3, r0, #1
 800710c:	d00a      	beq.n	8007124 <__swsetup_r+0xbc>
 800710e:	2300      	movs	r3, #0
 8007110:	60a3      	str	r3, [r4, #8]
 8007112:	6963      	ldr	r3, [r4, #20]
 8007114:	425b      	negs	r3, r3
 8007116:	61a3      	str	r3, [r4, #24]
 8007118:	6923      	ldr	r3, [r4, #16]
 800711a:	b943      	cbnz	r3, 800712e <__swsetup_r+0xc6>
 800711c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007120:	d1ba      	bne.n	8007098 <__swsetup_r+0x30>
 8007122:	bd70      	pop	{r4, r5, r6, pc}
 8007124:	0781      	lsls	r1, r0, #30
 8007126:	bf58      	it	pl
 8007128:	6963      	ldrpl	r3, [r4, #20]
 800712a:	60a3      	str	r3, [r4, #8]
 800712c:	e7f4      	b.n	8007118 <__swsetup_r+0xb0>
 800712e:	2000      	movs	r0, #0
 8007130:	e7f7      	b.n	8007122 <__swsetup_r+0xba>
 8007132:	bf00      	nop
 8007134:	2000000c 	.word	0x2000000c
 8007138:	080092f8 	.word	0x080092f8
 800713c:	08009318 	.word	0x08009318
 8007140:	080092d8 	.word	0x080092d8

08007144 <quorem>:
 8007144:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007148:	6903      	ldr	r3, [r0, #16]
 800714a:	690c      	ldr	r4, [r1, #16]
 800714c:	42a3      	cmp	r3, r4
 800714e:	4607      	mov	r7, r0
 8007150:	f2c0 8081 	blt.w	8007256 <quorem+0x112>
 8007154:	3c01      	subs	r4, #1
 8007156:	f101 0814 	add.w	r8, r1, #20
 800715a:	f100 0514 	add.w	r5, r0, #20
 800715e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007162:	9301      	str	r3, [sp, #4]
 8007164:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007168:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800716c:	3301      	adds	r3, #1
 800716e:	429a      	cmp	r2, r3
 8007170:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007174:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007178:	fbb2 f6f3 	udiv	r6, r2, r3
 800717c:	d331      	bcc.n	80071e2 <quorem+0x9e>
 800717e:	f04f 0e00 	mov.w	lr, #0
 8007182:	4640      	mov	r0, r8
 8007184:	46ac      	mov	ip, r5
 8007186:	46f2      	mov	sl, lr
 8007188:	f850 2b04 	ldr.w	r2, [r0], #4
 800718c:	b293      	uxth	r3, r2
 800718e:	fb06 e303 	mla	r3, r6, r3, lr
 8007192:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007196:	b29b      	uxth	r3, r3
 8007198:	ebaa 0303 	sub.w	r3, sl, r3
 800719c:	0c12      	lsrs	r2, r2, #16
 800719e:	f8dc a000 	ldr.w	sl, [ip]
 80071a2:	fb06 e202 	mla	r2, r6, r2, lr
 80071a6:	fa13 f38a 	uxtah	r3, r3, sl
 80071aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80071ae:	fa1f fa82 	uxth.w	sl, r2
 80071b2:	f8dc 2000 	ldr.w	r2, [ip]
 80071b6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80071ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80071be:	b29b      	uxth	r3, r3
 80071c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071c4:	4581      	cmp	r9, r0
 80071c6:	f84c 3b04 	str.w	r3, [ip], #4
 80071ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80071ce:	d2db      	bcs.n	8007188 <quorem+0x44>
 80071d0:	f855 300b 	ldr.w	r3, [r5, fp]
 80071d4:	b92b      	cbnz	r3, 80071e2 <quorem+0x9e>
 80071d6:	9b01      	ldr	r3, [sp, #4]
 80071d8:	3b04      	subs	r3, #4
 80071da:	429d      	cmp	r5, r3
 80071dc:	461a      	mov	r2, r3
 80071de:	d32e      	bcc.n	800723e <quorem+0xfa>
 80071e0:	613c      	str	r4, [r7, #16]
 80071e2:	4638      	mov	r0, r7
 80071e4:	f001 fae0 	bl	80087a8 <__mcmp>
 80071e8:	2800      	cmp	r0, #0
 80071ea:	db24      	blt.n	8007236 <quorem+0xf2>
 80071ec:	3601      	adds	r6, #1
 80071ee:	4628      	mov	r0, r5
 80071f0:	f04f 0c00 	mov.w	ip, #0
 80071f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80071f8:	f8d0 e000 	ldr.w	lr, [r0]
 80071fc:	b293      	uxth	r3, r2
 80071fe:	ebac 0303 	sub.w	r3, ip, r3
 8007202:	0c12      	lsrs	r2, r2, #16
 8007204:	fa13 f38e 	uxtah	r3, r3, lr
 8007208:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800720c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007210:	b29b      	uxth	r3, r3
 8007212:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007216:	45c1      	cmp	r9, r8
 8007218:	f840 3b04 	str.w	r3, [r0], #4
 800721c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007220:	d2e8      	bcs.n	80071f4 <quorem+0xb0>
 8007222:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007226:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800722a:	b922      	cbnz	r2, 8007236 <quorem+0xf2>
 800722c:	3b04      	subs	r3, #4
 800722e:	429d      	cmp	r5, r3
 8007230:	461a      	mov	r2, r3
 8007232:	d30a      	bcc.n	800724a <quorem+0x106>
 8007234:	613c      	str	r4, [r7, #16]
 8007236:	4630      	mov	r0, r6
 8007238:	b003      	add	sp, #12
 800723a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800723e:	6812      	ldr	r2, [r2, #0]
 8007240:	3b04      	subs	r3, #4
 8007242:	2a00      	cmp	r2, #0
 8007244:	d1cc      	bne.n	80071e0 <quorem+0x9c>
 8007246:	3c01      	subs	r4, #1
 8007248:	e7c7      	b.n	80071da <quorem+0x96>
 800724a:	6812      	ldr	r2, [r2, #0]
 800724c:	3b04      	subs	r3, #4
 800724e:	2a00      	cmp	r2, #0
 8007250:	d1f0      	bne.n	8007234 <quorem+0xf0>
 8007252:	3c01      	subs	r4, #1
 8007254:	e7eb      	b.n	800722e <quorem+0xea>
 8007256:	2000      	movs	r0, #0
 8007258:	e7ee      	b.n	8007238 <quorem+0xf4>
 800725a:	0000      	movs	r0, r0
 800725c:	0000      	movs	r0, r0
	...

08007260 <_dtoa_r>:
 8007260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007264:	ed2d 8b02 	vpush	{d8}
 8007268:	ec57 6b10 	vmov	r6, r7, d0
 800726c:	b095      	sub	sp, #84	; 0x54
 800726e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007270:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007274:	9105      	str	r1, [sp, #20]
 8007276:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800727a:	4604      	mov	r4, r0
 800727c:	9209      	str	r2, [sp, #36]	; 0x24
 800727e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007280:	b975      	cbnz	r5, 80072a0 <_dtoa_r+0x40>
 8007282:	2010      	movs	r0, #16
 8007284:	f000 fffc 	bl	8008280 <malloc>
 8007288:	4602      	mov	r2, r0
 800728a:	6260      	str	r0, [r4, #36]	; 0x24
 800728c:	b920      	cbnz	r0, 8007298 <_dtoa_r+0x38>
 800728e:	4bb2      	ldr	r3, [pc, #712]	; (8007558 <_dtoa_r+0x2f8>)
 8007290:	21ea      	movs	r1, #234	; 0xea
 8007292:	48b2      	ldr	r0, [pc, #712]	; (800755c <_dtoa_r+0x2fc>)
 8007294:	f001 fe02 	bl	8008e9c <__assert_func>
 8007298:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800729c:	6005      	str	r5, [r0, #0]
 800729e:	60c5      	str	r5, [r0, #12]
 80072a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072a2:	6819      	ldr	r1, [r3, #0]
 80072a4:	b151      	cbz	r1, 80072bc <_dtoa_r+0x5c>
 80072a6:	685a      	ldr	r2, [r3, #4]
 80072a8:	604a      	str	r2, [r1, #4]
 80072aa:	2301      	movs	r3, #1
 80072ac:	4093      	lsls	r3, r2
 80072ae:	608b      	str	r3, [r1, #8]
 80072b0:	4620      	mov	r0, r4
 80072b2:	f001 f83b 	bl	800832c <_Bfree>
 80072b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072b8:	2200      	movs	r2, #0
 80072ba:	601a      	str	r2, [r3, #0]
 80072bc:	1e3b      	subs	r3, r7, #0
 80072be:	bfb9      	ittee	lt
 80072c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80072c4:	9303      	strlt	r3, [sp, #12]
 80072c6:	2300      	movge	r3, #0
 80072c8:	f8c8 3000 	strge.w	r3, [r8]
 80072cc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80072d0:	4ba3      	ldr	r3, [pc, #652]	; (8007560 <_dtoa_r+0x300>)
 80072d2:	bfbc      	itt	lt
 80072d4:	2201      	movlt	r2, #1
 80072d6:	f8c8 2000 	strlt.w	r2, [r8]
 80072da:	ea33 0309 	bics.w	r3, r3, r9
 80072de:	d11b      	bne.n	8007318 <_dtoa_r+0xb8>
 80072e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80072e2:	f242 730f 	movw	r3, #9999	; 0x270f
 80072e6:	6013      	str	r3, [r2, #0]
 80072e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80072ec:	4333      	orrs	r3, r6
 80072ee:	f000 857a 	beq.w	8007de6 <_dtoa_r+0xb86>
 80072f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072f4:	b963      	cbnz	r3, 8007310 <_dtoa_r+0xb0>
 80072f6:	4b9b      	ldr	r3, [pc, #620]	; (8007564 <_dtoa_r+0x304>)
 80072f8:	e024      	b.n	8007344 <_dtoa_r+0xe4>
 80072fa:	4b9b      	ldr	r3, [pc, #620]	; (8007568 <_dtoa_r+0x308>)
 80072fc:	9300      	str	r3, [sp, #0]
 80072fe:	3308      	adds	r3, #8
 8007300:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007302:	6013      	str	r3, [r2, #0]
 8007304:	9800      	ldr	r0, [sp, #0]
 8007306:	b015      	add	sp, #84	; 0x54
 8007308:	ecbd 8b02 	vpop	{d8}
 800730c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007310:	4b94      	ldr	r3, [pc, #592]	; (8007564 <_dtoa_r+0x304>)
 8007312:	9300      	str	r3, [sp, #0]
 8007314:	3303      	adds	r3, #3
 8007316:	e7f3      	b.n	8007300 <_dtoa_r+0xa0>
 8007318:	ed9d 7b02 	vldr	d7, [sp, #8]
 800731c:	2200      	movs	r2, #0
 800731e:	ec51 0b17 	vmov	r0, r1, d7
 8007322:	2300      	movs	r3, #0
 8007324:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007328:	f7f9 fbee 	bl	8000b08 <__aeabi_dcmpeq>
 800732c:	4680      	mov	r8, r0
 800732e:	b158      	cbz	r0, 8007348 <_dtoa_r+0xe8>
 8007330:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007332:	2301      	movs	r3, #1
 8007334:	6013      	str	r3, [r2, #0]
 8007336:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007338:	2b00      	cmp	r3, #0
 800733a:	f000 8551 	beq.w	8007de0 <_dtoa_r+0xb80>
 800733e:	488b      	ldr	r0, [pc, #556]	; (800756c <_dtoa_r+0x30c>)
 8007340:	6018      	str	r0, [r3, #0]
 8007342:	1e43      	subs	r3, r0, #1
 8007344:	9300      	str	r3, [sp, #0]
 8007346:	e7dd      	b.n	8007304 <_dtoa_r+0xa4>
 8007348:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800734c:	aa12      	add	r2, sp, #72	; 0x48
 800734e:	a913      	add	r1, sp, #76	; 0x4c
 8007350:	4620      	mov	r0, r4
 8007352:	f001 facd 	bl	80088f0 <__d2b>
 8007356:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800735a:	4683      	mov	fp, r0
 800735c:	2d00      	cmp	r5, #0
 800735e:	d07c      	beq.n	800745a <_dtoa_r+0x1fa>
 8007360:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007362:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007366:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800736a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800736e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007372:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007376:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800737a:	4b7d      	ldr	r3, [pc, #500]	; (8007570 <_dtoa_r+0x310>)
 800737c:	2200      	movs	r2, #0
 800737e:	4630      	mov	r0, r6
 8007380:	4639      	mov	r1, r7
 8007382:	f7f8 ffa1 	bl	80002c8 <__aeabi_dsub>
 8007386:	a36e      	add	r3, pc, #440	; (adr r3, 8007540 <_dtoa_r+0x2e0>)
 8007388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738c:	f7f9 f954 	bl	8000638 <__aeabi_dmul>
 8007390:	a36d      	add	r3, pc, #436	; (adr r3, 8007548 <_dtoa_r+0x2e8>)
 8007392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007396:	f7f8 ff99 	bl	80002cc <__adddf3>
 800739a:	4606      	mov	r6, r0
 800739c:	4628      	mov	r0, r5
 800739e:	460f      	mov	r7, r1
 80073a0:	f7f9 f8e0 	bl	8000564 <__aeabi_i2d>
 80073a4:	a36a      	add	r3, pc, #424	; (adr r3, 8007550 <_dtoa_r+0x2f0>)
 80073a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073aa:	f7f9 f945 	bl	8000638 <__aeabi_dmul>
 80073ae:	4602      	mov	r2, r0
 80073b0:	460b      	mov	r3, r1
 80073b2:	4630      	mov	r0, r6
 80073b4:	4639      	mov	r1, r7
 80073b6:	f7f8 ff89 	bl	80002cc <__adddf3>
 80073ba:	4606      	mov	r6, r0
 80073bc:	460f      	mov	r7, r1
 80073be:	f7f9 fbeb 	bl	8000b98 <__aeabi_d2iz>
 80073c2:	2200      	movs	r2, #0
 80073c4:	4682      	mov	sl, r0
 80073c6:	2300      	movs	r3, #0
 80073c8:	4630      	mov	r0, r6
 80073ca:	4639      	mov	r1, r7
 80073cc:	f7f9 fba6 	bl	8000b1c <__aeabi_dcmplt>
 80073d0:	b148      	cbz	r0, 80073e6 <_dtoa_r+0x186>
 80073d2:	4650      	mov	r0, sl
 80073d4:	f7f9 f8c6 	bl	8000564 <__aeabi_i2d>
 80073d8:	4632      	mov	r2, r6
 80073da:	463b      	mov	r3, r7
 80073dc:	f7f9 fb94 	bl	8000b08 <__aeabi_dcmpeq>
 80073e0:	b908      	cbnz	r0, 80073e6 <_dtoa_r+0x186>
 80073e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073e6:	f1ba 0f16 	cmp.w	sl, #22
 80073ea:	d854      	bhi.n	8007496 <_dtoa_r+0x236>
 80073ec:	4b61      	ldr	r3, [pc, #388]	; (8007574 <_dtoa_r+0x314>)
 80073ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80073f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80073fa:	f7f9 fb8f 	bl	8000b1c <__aeabi_dcmplt>
 80073fe:	2800      	cmp	r0, #0
 8007400:	d04b      	beq.n	800749a <_dtoa_r+0x23a>
 8007402:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007406:	2300      	movs	r3, #0
 8007408:	930e      	str	r3, [sp, #56]	; 0x38
 800740a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800740c:	1b5d      	subs	r5, r3, r5
 800740e:	1e6b      	subs	r3, r5, #1
 8007410:	9304      	str	r3, [sp, #16]
 8007412:	bf43      	ittte	mi
 8007414:	2300      	movmi	r3, #0
 8007416:	f1c5 0801 	rsbmi	r8, r5, #1
 800741a:	9304      	strmi	r3, [sp, #16]
 800741c:	f04f 0800 	movpl.w	r8, #0
 8007420:	f1ba 0f00 	cmp.w	sl, #0
 8007424:	db3b      	blt.n	800749e <_dtoa_r+0x23e>
 8007426:	9b04      	ldr	r3, [sp, #16]
 8007428:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800742c:	4453      	add	r3, sl
 800742e:	9304      	str	r3, [sp, #16]
 8007430:	2300      	movs	r3, #0
 8007432:	9306      	str	r3, [sp, #24]
 8007434:	9b05      	ldr	r3, [sp, #20]
 8007436:	2b09      	cmp	r3, #9
 8007438:	d869      	bhi.n	800750e <_dtoa_r+0x2ae>
 800743a:	2b05      	cmp	r3, #5
 800743c:	bfc4      	itt	gt
 800743e:	3b04      	subgt	r3, #4
 8007440:	9305      	strgt	r3, [sp, #20]
 8007442:	9b05      	ldr	r3, [sp, #20]
 8007444:	f1a3 0302 	sub.w	r3, r3, #2
 8007448:	bfcc      	ite	gt
 800744a:	2500      	movgt	r5, #0
 800744c:	2501      	movle	r5, #1
 800744e:	2b03      	cmp	r3, #3
 8007450:	d869      	bhi.n	8007526 <_dtoa_r+0x2c6>
 8007452:	e8df f003 	tbb	[pc, r3]
 8007456:	4e2c      	.short	0x4e2c
 8007458:	5a4c      	.short	0x5a4c
 800745a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800745e:	441d      	add	r5, r3
 8007460:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007464:	2b20      	cmp	r3, #32
 8007466:	bfc1      	itttt	gt
 8007468:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800746c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007470:	fa09 f303 	lslgt.w	r3, r9, r3
 8007474:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007478:	bfda      	itte	le
 800747a:	f1c3 0320 	rsble	r3, r3, #32
 800747e:	fa06 f003 	lslle.w	r0, r6, r3
 8007482:	4318      	orrgt	r0, r3
 8007484:	f7f9 f85e 	bl	8000544 <__aeabi_ui2d>
 8007488:	2301      	movs	r3, #1
 800748a:	4606      	mov	r6, r0
 800748c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007490:	3d01      	subs	r5, #1
 8007492:	9310      	str	r3, [sp, #64]	; 0x40
 8007494:	e771      	b.n	800737a <_dtoa_r+0x11a>
 8007496:	2301      	movs	r3, #1
 8007498:	e7b6      	b.n	8007408 <_dtoa_r+0x1a8>
 800749a:	900e      	str	r0, [sp, #56]	; 0x38
 800749c:	e7b5      	b.n	800740a <_dtoa_r+0x1aa>
 800749e:	f1ca 0300 	rsb	r3, sl, #0
 80074a2:	9306      	str	r3, [sp, #24]
 80074a4:	2300      	movs	r3, #0
 80074a6:	eba8 080a 	sub.w	r8, r8, sl
 80074aa:	930d      	str	r3, [sp, #52]	; 0x34
 80074ac:	e7c2      	b.n	8007434 <_dtoa_r+0x1d4>
 80074ae:	2300      	movs	r3, #0
 80074b0:	9308      	str	r3, [sp, #32]
 80074b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	dc39      	bgt.n	800752c <_dtoa_r+0x2cc>
 80074b8:	f04f 0901 	mov.w	r9, #1
 80074bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80074c0:	464b      	mov	r3, r9
 80074c2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80074c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80074c8:	2200      	movs	r2, #0
 80074ca:	6042      	str	r2, [r0, #4]
 80074cc:	2204      	movs	r2, #4
 80074ce:	f102 0614 	add.w	r6, r2, #20
 80074d2:	429e      	cmp	r6, r3
 80074d4:	6841      	ldr	r1, [r0, #4]
 80074d6:	d92f      	bls.n	8007538 <_dtoa_r+0x2d8>
 80074d8:	4620      	mov	r0, r4
 80074da:	f000 fee7 	bl	80082ac <_Balloc>
 80074de:	9000      	str	r0, [sp, #0]
 80074e0:	2800      	cmp	r0, #0
 80074e2:	d14b      	bne.n	800757c <_dtoa_r+0x31c>
 80074e4:	4b24      	ldr	r3, [pc, #144]	; (8007578 <_dtoa_r+0x318>)
 80074e6:	4602      	mov	r2, r0
 80074e8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80074ec:	e6d1      	b.n	8007292 <_dtoa_r+0x32>
 80074ee:	2301      	movs	r3, #1
 80074f0:	e7de      	b.n	80074b0 <_dtoa_r+0x250>
 80074f2:	2300      	movs	r3, #0
 80074f4:	9308      	str	r3, [sp, #32]
 80074f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074f8:	eb0a 0903 	add.w	r9, sl, r3
 80074fc:	f109 0301 	add.w	r3, r9, #1
 8007500:	2b01      	cmp	r3, #1
 8007502:	9301      	str	r3, [sp, #4]
 8007504:	bfb8      	it	lt
 8007506:	2301      	movlt	r3, #1
 8007508:	e7dd      	b.n	80074c6 <_dtoa_r+0x266>
 800750a:	2301      	movs	r3, #1
 800750c:	e7f2      	b.n	80074f4 <_dtoa_r+0x294>
 800750e:	2501      	movs	r5, #1
 8007510:	2300      	movs	r3, #0
 8007512:	9305      	str	r3, [sp, #20]
 8007514:	9508      	str	r5, [sp, #32]
 8007516:	f04f 39ff 	mov.w	r9, #4294967295
 800751a:	2200      	movs	r2, #0
 800751c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007520:	2312      	movs	r3, #18
 8007522:	9209      	str	r2, [sp, #36]	; 0x24
 8007524:	e7cf      	b.n	80074c6 <_dtoa_r+0x266>
 8007526:	2301      	movs	r3, #1
 8007528:	9308      	str	r3, [sp, #32]
 800752a:	e7f4      	b.n	8007516 <_dtoa_r+0x2b6>
 800752c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007530:	f8cd 9004 	str.w	r9, [sp, #4]
 8007534:	464b      	mov	r3, r9
 8007536:	e7c6      	b.n	80074c6 <_dtoa_r+0x266>
 8007538:	3101      	adds	r1, #1
 800753a:	6041      	str	r1, [r0, #4]
 800753c:	0052      	lsls	r2, r2, #1
 800753e:	e7c6      	b.n	80074ce <_dtoa_r+0x26e>
 8007540:	636f4361 	.word	0x636f4361
 8007544:	3fd287a7 	.word	0x3fd287a7
 8007548:	8b60c8b3 	.word	0x8b60c8b3
 800754c:	3fc68a28 	.word	0x3fc68a28
 8007550:	509f79fb 	.word	0x509f79fb
 8007554:	3fd34413 	.word	0x3fd34413
 8007558:	08009251 	.word	0x08009251
 800755c:	08009268 	.word	0x08009268
 8007560:	7ff00000 	.word	0x7ff00000
 8007564:	0800924d 	.word	0x0800924d
 8007568:	08009244 	.word	0x08009244
 800756c:	08009221 	.word	0x08009221
 8007570:	3ff80000 	.word	0x3ff80000
 8007574:	080093c0 	.word	0x080093c0
 8007578:	080092c7 	.word	0x080092c7
 800757c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800757e:	9a00      	ldr	r2, [sp, #0]
 8007580:	601a      	str	r2, [r3, #0]
 8007582:	9b01      	ldr	r3, [sp, #4]
 8007584:	2b0e      	cmp	r3, #14
 8007586:	f200 80ad 	bhi.w	80076e4 <_dtoa_r+0x484>
 800758a:	2d00      	cmp	r5, #0
 800758c:	f000 80aa 	beq.w	80076e4 <_dtoa_r+0x484>
 8007590:	f1ba 0f00 	cmp.w	sl, #0
 8007594:	dd36      	ble.n	8007604 <_dtoa_r+0x3a4>
 8007596:	4ac3      	ldr	r2, [pc, #780]	; (80078a4 <_dtoa_r+0x644>)
 8007598:	f00a 030f 	and.w	r3, sl, #15
 800759c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80075a0:	ed93 7b00 	vldr	d7, [r3]
 80075a4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80075a8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80075ac:	eeb0 8a47 	vmov.f32	s16, s14
 80075b0:	eef0 8a67 	vmov.f32	s17, s15
 80075b4:	d016      	beq.n	80075e4 <_dtoa_r+0x384>
 80075b6:	4bbc      	ldr	r3, [pc, #752]	; (80078a8 <_dtoa_r+0x648>)
 80075b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80075bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80075c0:	f7f9 f964 	bl	800088c <__aeabi_ddiv>
 80075c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075c8:	f007 070f 	and.w	r7, r7, #15
 80075cc:	2503      	movs	r5, #3
 80075ce:	4eb6      	ldr	r6, [pc, #728]	; (80078a8 <_dtoa_r+0x648>)
 80075d0:	b957      	cbnz	r7, 80075e8 <_dtoa_r+0x388>
 80075d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075d6:	ec53 2b18 	vmov	r2, r3, d8
 80075da:	f7f9 f957 	bl	800088c <__aeabi_ddiv>
 80075de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075e2:	e029      	b.n	8007638 <_dtoa_r+0x3d8>
 80075e4:	2502      	movs	r5, #2
 80075e6:	e7f2      	b.n	80075ce <_dtoa_r+0x36e>
 80075e8:	07f9      	lsls	r1, r7, #31
 80075ea:	d508      	bpl.n	80075fe <_dtoa_r+0x39e>
 80075ec:	ec51 0b18 	vmov	r0, r1, d8
 80075f0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80075f4:	f7f9 f820 	bl	8000638 <__aeabi_dmul>
 80075f8:	ec41 0b18 	vmov	d8, r0, r1
 80075fc:	3501      	adds	r5, #1
 80075fe:	107f      	asrs	r7, r7, #1
 8007600:	3608      	adds	r6, #8
 8007602:	e7e5      	b.n	80075d0 <_dtoa_r+0x370>
 8007604:	f000 80a6 	beq.w	8007754 <_dtoa_r+0x4f4>
 8007608:	f1ca 0600 	rsb	r6, sl, #0
 800760c:	4ba5      	ldr	r3, [pc, #660]	; (80078a4 <_dtoa_r+0x644>)
 800760e:	4fa6      	ldr	r7, [pc, #664]	; (80078a8 <_dtoa_r+0x648>)
 8007610:	f006 020f 	and.w	r2, r6, #15
 8007614:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007620:	f7f9 f80a 	bl	8000638 <__aeabi_dmul>
 8007624:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007628:	1136      	asrs	r6, r6, #4
 800762a:	2300      	movs	r3, #0
 800762c:	2502      	movs	r5, #2
 800762e:	2e00      	cmp	r6, #0
 8007630:	f040 8085 	bne.w	800773e <_dtoa_r+0x4de>
 8007634:	2b00      	cmp	r3, #0
 8007636:	d1d2      	bne.n	80075de <_dtoa_r+0x37e>
 8007638:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800763a:	2b00      	cmp	r3, #0
 800763c:	f000 808c 	beq.w	8007758 <_dtoa_r+0x4f8>
 8007640:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007644:	4b99      	ldr	r3, [pc, #612]	; (80078ac <_dtoa_r+0x64c>)
 8007646:	2200      	movs	r2, #0
 8007648:	4630      	mov	r0, r6
 800764a:	4639      	mov	r1, r7
 800764c:	f7f9 fa66 	bl	8000b1c <__aeabi_dcmplt>
 8007650:	2800      	cmp	r0, #0
 8007652:	f000 8081 	beq.w	8007758 <_dtoa_r+0x4f8>
 8007656:	9b01      	ldr	r3, [sp, #4]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d07d      	beq.n	8007758 <_dtoa_r+0x4f8>
 800765c:	f1b9 0f00 	cmp.w	r9, #0
 8007660:	dd3c      	ble.n	80076dc <_dtoa_r+0x47c>
 8007662:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007666:	9307      	str	r3, [sp, #28]
 8007668:	2200      	movs	r2, #0
 800766a:	4b91      	ldr	r3, [pc, #580]	; (80078b0 <_dtoa_r+0x650>)
 800766c:	4630      	mov	r0, r6
 800766e:	4639      	mov	r1, r7
 8007670:	f7f8 ffe2 	bl	8000638 <__aeabi_dmul>
 8007674:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007678:	3501      	adds	r5, #1
 800767a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800767e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007682:	4628      	mov	r0, r5
 8007684:	f7f8 ff6e 	bl	8000564 <__aeabi_i2d>
 8007688:	4632      	mov	r2, r6
 800768a:	463b      	mov	r3, r7
 800768c:	f7f8 ffd4 	bl	8000638 <__aeabi_dmul>
 8007690:	4b88      	ldr	r3, [pc, #544]	; (80078b4 <_dtoa_r+0x654>)
 8007692:	2200      	movs	r2, #0
 8007694:	f7f8 fe1a 	bl	80002cc <__adddf3>
 8007698:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800769c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076a0:	9303      	str	r3, [sp, #12]
 80076a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d15c      	bne.n	8007762 <_dtoa_r+0x502>
 80076a8:	4b83      	ldr	r3, [pc, #524]	; (80078b8 <_dtoa_r+0x658>)
 80076aa:	2200      	movs	r2, #0
 80076ac:	4630      	mov	r0, r6
 80076ae:	4639      	mov	r1, r7
 80076b0:	f7f8 fe0a 	bl	80002c8 <__aeabi_dsub>
 80076b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076b8:	4606      	mov	r6, r0
 80076ba:	460f      	mov	r7, r1
 80076bc:	f7f9 fa4c 	bl	8000b58 <__aeabi_dcmpgt>
 80076c0:	2800      	cmp	r0, #0
 80076c2:	f040 8296 	bne.w	8007bf2 <_dtoa_r+0x992>
 80076c6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80076ca:	4630      	mov	r0, r6
 80076cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80076d0:	4639      	mov	r1, r7
 80076d2:	f7f9 fa23 	bl	8000b1c <__aeabi_dcmplt>
 80076d6:	2800      	cmp	r0, #0
 80076d8:	f040 8288 	bne.w	8007bec <_dtoa_r+0x98c>
 80076dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80076e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80076e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	f2c0 8158 	blt.w	800799c <_dtoa_r+0x73c>
 80076ec:	f1ba 0f0e 	cmp.w	sl, #14
 80076f0:	f300 8154 	bgt.w	800799c <_dtoa_r+0x73c>
 80076f4:	4b6b      	ldr	r3, [pc, #428]	; (80078a4 <_dtoa_r+0x644>)
 80076f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80076fa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80076fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007700:	2b00      	cmp	r3, #0
 8007702:	f280 80e3 	bge.w	80078cc <_dtoa_r+0x66c>
 8007706:	9b01      	ldr	r3, [sp, #4]
 8007708:	2b00      	cmp	r3, #0
 800770a:	f300 80df 	bgt.w	80078cc <_dtoa_r+0x66c>
 800770e:	f040 826d 	bne.w	8007bec <_dtoa_r+0x98c>
 8007712:	4b69      	ldr	r3, [pc, #420]	; (80078b8 <_dtoa_r+0x658>)
 8007714:	2200      	movs	r2, #0
 8007716:	4640      	mov	r0, r8
 8007718:	4649      	mov	r1, r9
 800771a:	f7f8 ff8d 	bl	8000638 <__aeabi_dmul>
 800771e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007722:	f7f9 fa0f 	bl	8000b44 <__aeabi_dcmpge>
 8007726:	9e01      	ldr	r6, [sp, #4]
 8007728:	4637      	mov	r7, r6
 800772a:	2800      	cmp	r0, #0
 800772c:	f040 8243 	bne.w	8007bb6 <_dtoa_r+0x956>
 8007730:	9d00      	ldr	r5, [sp, #0]
 8007732:	2331      	movs	r3, #49	; 0x31
 8007734:	f805 3b01 	strb.w	r3, [r5], #1
 8007738:	f10a 0a01 	add.w	sl, sl, #1
 800773c:	e23f      	b.n	8007bbe <_dtoa_r+0x95e>
 800773e:	07f2      	lsls	r2, r6, #31
 8007740:	d505      	bpl.n	800774e <_dtoa_r+0x4ee>
 8007742:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007746:	f7f8 ff77 	bl	8000638 <__aeabi_dmul>
 800774a:	3501      	adds	r5, #1
 800774c:	2301      	movs	r3, #1
 800774e:	1076      	asrs	r6, r6, #1
 8007750:	3708      	adds	r7, #8
 8007752:	e76c      	b.n	800762e <_dtoa_r+0x3ce>
 8007754:	2502      	movs	r5, #2
 8007756:	e76f      	b.n	8007638 <_dtoa_r+0x3d8>
 8007758:	9b01      	ldr	r3, [sp, #4]
 800775a:	f8cd a01c 	str.w	sl, [sp, #28]
 800775e:	930c      	str	r3, [sp, #48]	; 0x30
 8007760:	e78d      	b.n	800767e <_dtoa_r+0x41e>
 8007762:	9900      	ldr	r1, [sp, #0]
 8007764:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007766:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007768:	4b4e      	ldr	r3, [pc, #312]	; (80078a4 <_dtoa_r+0x644>)
 800776a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800776e:	4401      	add	r1, r0
 8007770:	9102      	str	r1, [sp, #8]
 8007772:	9908      	ldr	r1, [sp, #32]
 8007774:	eeb0 8a47 	vmov.f32	s16, s14
 8007778:	eef0 8a67 	vmov.f32	s17, s15
 800777c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007780:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007784:	2900      	cmp	r1, #0
 8007786:	d045      	beq.n	8007814 <_dtoa_r+0x5b4>
 8007788:	494c      	ldr	r1, [pc, #304]	; (80078bc <_dtoa_r+0x65c>)
 800778a:	2000      	movs	r0, #0
 800778c:	f7f9 f87e 	bl	800088c <__aeabi_ddiv>
 8007790:	ec53 2b18 	vmov	r2, r3, d8
 8007794:	f7f8 fd98 	bl	80002c8 <__aeabi_dsub>
 8007798:	9d00      	ldr	r5, [sp, #0]
 800779a:	ec41 0b18 	vmov	d8, r0, r1
 800779e:	4639      	mov	r1, r7
 80077a0:	4630      	mov	r0, r6
 80077a2:	f7f9 f9f9 	bl	8000b98 <__aeabi_d2iz>
 80077a6:	900c      	str	r0, [sp, #48]	; 0x30
 80077a8:	f7f8 fedc 	bl	8000564 <__aeabi_i2d>
 80077ac:	4602      	mov	r2, r0
 80077ae:	460b      	mov	r3, r1
 80077b0:	4630      	mov	r0, r6
 80077b2:	4639      	mov	r1, r7
 80077b4:	f7f8 fd88 	bl	80002c8 <__aeabi_dsub>
 80077b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077ba:	3330      	adds	r3, #48	; 0x30
 80077bc:	f805 3b01 	strb.w	r3, [r5], #1
 80077c0:	ec53 2b18 	vmov	r2, r3, d8
 80077c4:	4606      	mov	r6, r0
 80077c6:	460f      	mov	r7, r1
 80077c8:	f7f9 f9a8 	bl	8000b1c <__aeabi_dcmplt>
 80077cc:	2800      	cmp	r0, #0
 80077ce:	d165      	bne.n	800789c <_dtoa_r+0x63c>
 80077d0:	4632      	mov	r2, r6
 80077d2:	463b      	mov	r3, r7
 80077d4:	4935      	ldr	r1, [pc, #212]	; (80078ac <_dtoa_r+0x64c>)
 80077d6:	2000      	movs	r0, #0
 80077d8:	f7f8 fd76 	bl	80002c8 <__aeabi_dsub>
 80077dc:	ec53 2b18 	vmov	r2, r3, d8
 80077e0:	f7f9 f99c 	bl	8000b1c <__aeabi_dcmplt>
 80077e4:	2800      	cmp	r0, #0
 80077e6:	f040 80b9 	bne.w	800795c <_dtoa_r+0x6fc>
 80077ea:	9b02      	ldr	r3, [sp, #8]
 80077ec:	429d      	cmp	r5, r3
 80077ee:	f43f af75 	beq.w	80076dc <_dtoa_r+0x47c>
 80077f2:	4b2f      	ldr	r3, [pc, #188]	; (80078b0 <_dtoa_r+0x650>)
 80077f4:	ec51 0b18 	vmov	r0, r1, d8
 80077f8:	2200      	movs	r2, #0
 80077fa:	f7f8 ff1d 	bl	8000638 <__aeabi_dmul>
 80077fe:	4b2c      	ldr	r3, [pc, #176]	; (80078b0 <_dtoa_r+0x650>)
 8007800:	ec41 0b18 	vmov	d8, r0, r1
 8007804:	2200      	movs	r2, #0
 8007806:	4630      	mov	r0, r6
 8007808:	4639      	mov	r1, r7
 800780a:	f7f8 ff15 	bl	8000638 <__aeabi_dmul>
 800780e:	4606      	mov	r6, r0
 8007810:	460f      	mov	r7, r1
 8007812:	e7c4      	b.n	800779e <_dtoa_r+0x53e>
 8007814:	ec51 0b17 	vmov	r0, r1, d7
 8007818:	f7f8 ff0e 	bl	8000638 <__aeabi_dmul>
 800781c:	9b02      	ldr	r3, [sp, #8]
 800781e:	9d00      	ldr	r5, [sp, #0]
 8007820:	930c      	str	r3, [sp, #48]	; 0x30
 8007822:	ec41 0b18 	vmov	d8, r0, r1
 8007826:	4639      	mov	r1, r7
 8007828:	4630      	mov	r0, r6
 800782a:	f7f9 f9b5 	bl	8000b98 <__aeabi_d2iz>
 800782e:	9011      	str	r0, [sp, #68]	; 0x44
 8007830:	f7f8 fe98 	bl	8000564 <__aeabi_i2d>
 8007834:	4602      	mov	r2, r0
 8007836:	460b      	mov	r3, r1
 8007838:	4630      	mov	r0, r6
 800783a:	4639      	mov	r1, r7
 800783c:	f7f8 fd44 	bl	80002c8 <__aeabi_dsub>
 8007840:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007842:	3330      	adds	r3, #48	; 0x30
 8007844:	f805 3b01 	strb.w	r3, [r5], #1
 8007848:	9b02      	ldr	r3, [sp, #8]
 800784a:	429d      	cmp	r5, r3
 800784c:	4606      	mov	r6, r0
 800784e:	460f      	mov	r7, r1
 8007850:	f04f 0200 	mov.w	r2, #0
 8007854:	d134      	bne.n	80078c0 <_dtoa_r+0x660>
 8007856:	4b19      	ldr	r3, [pc, #100]	; (80078bc <_dtoa_r+0x65c>)
 8007858:	ec51 0b18 	vmov	r0, r1, d8
 800785c:	f7f8 fd36 	bl	80002cc <__adddf3>
 8007860:	4602      	mov	r2, r0
 8007862:	460b      	mov	r3, r1
 8007864:	4630      	mov	r0, r6
 8007866:	4639      	mov	r1, r7
 8007868:	f7f9 f976 	bl	8000b58 <__aeabi_dcmpgt>
 800786c:	2800      	cmp	r0, #0
 800786e:	d175      	bne.n	800795c <_dtoa_r+0x6fc>
 8007870:	ec53 2b18 	vmov	r2, r3, d8
 8007874:	4911      	ldr	r1, [pc, #68]	; (80078bc <_dtoa_r+0x65c>)
 8007876:	2000      	movs	r0, #0
 8007878:	f7f8 fd26 	bl	80002c8 <__aeabi_dsub>
 800787c:	4602      	mov	r2, r0
 800787e:	460b      	mov	r3, r1
 8007880:	4630      	mov	r0, r6
 8007882:	4639      	mov	r1, r7
 8007884:	f7f9 f94a 	bl	8000b1c <__aeabi_dcmplt>
 8007888:	2800      	cmp	r0, #0
 800788a:	f43f af27 	beq.w	80076dc <_dtoa_r+0x47c>
 800788e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007890:	1e6b      	subs	r3, r5, #1
 8007892:	930c      	str	r3, [sp, #48]	; 0x30
 8007894:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007898:	2b30      	cmp	r3, #48	; 0x30
 800789a:	d0f8      	beq.n	800788e <_dtoa_r+0x62e>
 800789c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80078a0:	e04a      	b.n	8007938 <_dtoa_r+0x6d8>
 80078a2:	bf00      	nop
 80078a4:	080093c0 	.word	0x080093c0
 80078a8:	08009398 	.word	0x08009398
 80078ac:	3ff00000 	.word	0x3ff00000
 80078b0:	40240000 	.word	0x40240000
 80078b4:	401c0000 	.word	0x401c0000
 80078b8:	40140000 	.word	0x40140000
 80078bc:	3fe00000 	.word	0x3fe00000
 80078c0:	4baf      	ldr	r3, [pc, #700]	; (8007b80 <_dtoa_r+0x920>)
 80078c2:	f7f8 feb9 	bl	8000638 <__aeabi_dmul>
 80078c6:	4606      	mov	r6, r0
 80078c8:	460f      	mov	r7, r1
 80078ca:	e7ac      	b.n	8007826 <_dtoa_r+0x5c6>
 80078cc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80078d0:	9d00      	ldr	r5, [sp, #0]
 80078d2:	4642      	mov	r2, r8
 80078d4:	464b      	mov	r3, r9
 80078d6:	4630      	mov	r0, r6
 80078d8:	4639      	mov	r1, r7
 80078da:	f7f8 ffd7 	bl	800088c <__aeabi_ddiv>
 80078de:	f7f9 f95b 	bl	8000b98 <__aeabi_d2iz>
 80078e2:	9002      	str	r0, [sp, #8]
 80078e4:	f7f8 fe3e 	bl	8000564 <__aeabi_i2d>
 80078e8:	4642      	mov	r2, r8
 80078ea:	464b      	mov	r3, r9
 80078ec:	f7f8 fea4 	bl	8000638 <__aeabi_dmul>
 80078f0:	4602      	mov	r2, r0
 80078f2:	460b      	mov	r3, r1
 80078f4:	4630      	mov	r0, r6
 80078f6:	4639      	mov	r1, r7
 80078f8:	f7f8 fce6 	bl	80002c8 <__aeabi_dsub>
 80078fc:	9e02      	ldr	r6, [sp, #8]
 80078fe:	9f01      	ldr	r7, [sp, #4]
 8007900:	3630      	adds	r6, #48	; 0x30
 8007902:	f805 6b01 	strb.w	r6, [r5], #1
 8007906:	9e00      	ldr	r6, [sp, #0]
 8007908:	1bae      	subs	r6, r5, r6
 800790a:	42b7      	cmp	r7, r6
 800790c:	4602      	mov	r2, r0
 800790e:	460b      	mov	r3, r1
 8007910:	d137      	bne.n	8007982 <_dtoa_r+0x722>
 8007912:	f7f8 fcdb 	bl	80002cc <__adddf3>
 8007916:	4642      	mov	r2, r8
 8007918:	464b      	mov	r3, r9
 800791a:	4606      	mov	r6, r0
 800791c:	460f      	mov	r7, r1
 800791e:	f7f9 f91b 	bl	8000b58 <__aeabi_dcmpgt>
 8007922:	b9c8      	cbnz	r0, 8007958 <_dtoa_r+0x6f8>
 8007924:	4642      	mov	r2, r8
 8007926:	464b      	mov	r3, r9
 8007928:	4630      	mov	r0, r6
 800792a:	4639      	mov	r1, r7
 800792c:	f7f9 f8ec 	bl	8000b08 <__aeabi_dcmpeq>
 8007930:	b110      	cbz	r0, 8007938 <_dtoa_r+0x6d8>
 8007932:	9b02      	ldr	r3, [sp, #8]
 8007934:	07d9      	lsls	r1, r3, #31
 8007936:	d40f      	bmi.n	8007958 <_dtoa_r+0x6f8>
 8007938:	4620      	mov	r0, r4
 800793a:	4659      	mov	r1, fp
 800793c:	f000 fcf6 	bl	800832c <_Bfree>
 8007940:	2300      	movs	r3, #0
 8007942:	702b      	strb	r3, [r5, #0]
 8007944:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007946:	f10a 0001 	add.w	r0, sl, #1
 800794a:	6018      	str	r0, [r3, #0]
 800794c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800794e:	2b00      	cmp	r3, #0
 8007950:	f43f acd8 	beq.w	8007304 <_dtoa_r+0xa4>
 8007954:	601d      	str	r5, [r3, #0]
 8007956:	e4d5      	b.n	8007304 <_dtoa_r+0xa4>
 8007958:	f8cd a01c 	str.w	sl, [sp, #28]
 800795c:	462b      	mov	r3, r5
 800795e:	461d      	mov	r5, r3
 8007960:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007964:	2a39      	cmp	r2, #57	; 0x39
 8007966:	d108      	bne.n	800797a <_dtoa_r+0x71a>
 8007968:	9a00      	ldr	r2, [sp, #0]
 800796a:	429a      	cmp	r2, r3
 800796c:	d1f7      	bne.n	800795e <_dtoa_r+0x6fe>
 800796e:	9a07      	ldr	r2, [sp, #28]
 8007970:	9900      	ldr	r1, [sp, #0]
 8007972:	3201      	adds	r2, #1
 8007974:	9207      	str	r2, [sp, #28]
 8007976:	2230      	movs	r2, #48	; 0x30
 8007978:	700a      	strb	r2, [r1, #0]
 800797a:	781a      	ldrb	r2, [r3, #0]
 800797c:	3201      	adds	r2, #1
 800797e:	701a      	strb	r2, [r3, #0]
 8007980:	e78c      	b.n	800789c <_dtoa_r+0x63c>
 8007982:	4b7f      	ldr	r3, [pc, #508]	; (8007b80 <_dtoa_r+0x920>)
 8007984:	2200      	movs	r2, #0
 8007986:	f7f8 fe57 	bl	8000638 <__aeabi_dmul>
 800798a:	2200      	movs	r2, #0
 800798c:	2300      	movs	r3, #0
 800798e:	4606      	mov	r6, r0
 8007990:	460f      	mov	r7, r1
 8007992:	f7f9 f8b9 	bl	8000b08 <__aeabi_dcmpeq>
 8007996:	2800      	cmp	r0, #0
 8007998:	d09b      	beq.n	80078d2 <_dtoa_r+0x672>
 800799a:	e7cd      	b.n	8007938 <_dtoa_r+0x6d8>
 800799c:	9a08      	ldr	r2, [sp, #32]
 800799e:	2a00      	cmp	r2, #0
 80079a0:	f000 80c4 	beq.w	8007b2c <_dtoa_r+0x8cc>
 80079a4:	9a05      	ldr	r2, [sp, #20]
 80079a6:	2a01      	cmp	r2, #1
 80079a8:	f300 80a8 	bgt.w	8007afc <_dtoa_r+0x89c>
 80079ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80079ae:	2a00      	cmp	r2, #0
 80079b0:	f000 80a0 	beq.w	8007af4 <_dtoa_r+0x894>
 80079b4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80079b8:	9e06      	ldr	r6, [sp, #24]
 80079ba:	4645      	mov	r5, r8
 80079bc:	9a04      	ldr	r2, [sp, #16]
 80079be:	2101      	movs	r1, #1
 80079c0:	441a      	add	r2, r3
 80079c2:	4620      	mov	r0, r4
 80079c4:	4498      	add	r8, r3
 80079c6:	9204      	str	r2, [sp, #16]
 80079c8:	f000 fd6c 	bl	80084a4 <__i2b>
 80079cc:	4607      	mov	r7, r0
 80079ce:	2d00      	cmp	r5, #0
 80079d0:	dd0b      	ble.n	80079ea <_dtoa_r+0x78a>
 80079d2:	9b04      	ldr	r3, [sp, #16]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	dd08      	ble.n	80079ea <_dtoa_r+0x78a>
 80079d8:	42ab      	cmp	r3, r5
 80079da:	9a04      	ldr	r2, [sp, #16]
 80079dc:	bfa8      	it	ge
 80079de:	462b      	movge	r3, r5
 80079e0:	eba8 0803 	sub.w	r8, r8, r3
 80079e4:	1aed      	subs	r5, r5, r3
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	9304      	str	r3, [sp, #16]
 80079ea:	9b06      	ldr	r3, [sp, #24]
 80079ec:	b1fb      	cbz	r3, 8007a2e <_dtoa_r+0x7ce>
 80079ee:	9b08      	ldr	r3, [sp, #32]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f000 809f 	beq.w	8007b34 <_dtoa_r+0x8d4>
 80079f6:	2e00      	cmp	r6, #0
 80079f8:	dd11      	ble.n	8007a1e <_dtoa_r+0x7be>
 80079fa:	4639      	mov	r1, r7
 80079fc:	4632      	mov	r2, r6
 80079fe:	4620      	mov	r0, r4
 8007a00:	f000 fe0c 	bl	800861c <__pow5mult>
 8007a04:	465a      	mov	r2, fp
 8007a06:	4601      	mov	r1, r0
 8007a08:	4607      	mov	r7, r0
 8007a0a:	4620      	mov	r0, r4
 8007a0c:	f000 fd60 	bl	80084d0 <__multiply>
 8007a10:	4659      	mov	r1, fp
 8007a12:	9007      	str	r0, [sp, #28]
 8007a14:	4620      	mov	r0, r4
 8007a16:	f000 fc89 	bl	800832c <_Bfree>
 8007a1a:	9b07      	ldr	r3, [sp, #28]
 8007a1c:	469b      	mov	fp, r3
 8007a1e:	9b06      	ldr	r3, [sp, #24]
 8007a20:	1b9a      	subs	r2, r3, r6
 8007a22:	d004      	beq.n	8007a2e <_dtoa_r+0x7ce>
 8007a24:	4659      	mov	r1, fp
 8007a26:	4620      	mov	r0, r4
 8007a28:	f000 fdf8 	bl	800861c <__pow5mult>
 8007a2c:	4683      	mov	fp, r0
 8007a2e:	2101      	movs	r1, #1
 8007a30:	4620      	mov	r0, r4
 8007a32:	f000 fd37 	bl	80084a4 <__i2b>
 8007a36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	4606      	mov	r6, r0
 8007a3c:	dd7c      	ble.n	8007b38 <_dtoa_r+0x8d8>
 8007a3e:	461a      	mov	r2, r3
 8007a40:	4601      	mov	r1, r0
 8007a42:	4620      	mov	r0, r4
 8007a44:	f000 fdea 	bl	800861c <__pow5mult>
 8007a48:	9b05      	ldr	r3, [sp, #20]
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	4606      	mov	r6, r0
 8007a4e:	dd76      	ble.n	8007b3e <_dtoa_r+0x8de>
 8007a50:	2300      	movs	r3, #0
 8007a52:	9306      	str	r3, [sp, #24]
 8007a54:	6933      	ldr	r3, [r6, #16]
 8007a56:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007a5a:	6918      	ldr	r0, [r3, #16]
 8007a5c:	f000 fcd2 	bl	8008404 <__hi0bits>
 8007a60:	f1c0 0020 	rsb	r0, r0, #32
 8007a64:	9b04      	ldr	r3, [sp, #16]
 8007a66:	4418      	add	r0, r3
 8007a68:	f010 001f 	ands.w	r0, r0, #31
 8007a6c:	f000 8086 	beq.w	8007b7c <_dtoa_r+0x91c>
 8007a70:	f1c0 0320 	rsb	r3, r0, #32
 8007a74:	2b04      	cmp	r3, #4
 8007a76:	dd7f      	ble.n	8007b78 <_dtoa_r+0x918>
 8007a78:	f1c0 001c 	rsb	r0, r0, #28
 8007a7c:	9b04      	ldr	r3, [sp, #16]
 8007a7e:	4403      	add	r3, r0
 8007a80:	4480      	add	r8, r0
 8007a82:	4405      	add	r5, r0
 8007a84:	9304      	str	r3, [sp, #16]
 8007a86:	f1b8 0f00 	cmp.w	r8, #0
 8007a8a:	dd05      	ble.n	8007a98 <_dtoa_r+0x838>
 8007a8c:	4659      	mov	r1, fp
 8007a8e:	4642      	mov	r2, r8
 8007a90:	4620      	mov	r0, r4
 8007a92:	f000 fe1d 	bl	80086d0 <__lshift>
 8007a96:	4683      	mov	fp, r0
 8007a98:	9b04      	ldr	r3, [sp, #16]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	dd05      	ble.n	8007aaa <_dtoa_r+0x84a>
 8007a9e:	4631      	mov	r1, r6
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	f000 fe14 	bl	80086d0 <__lshift>
 8007aa8:	4606      	mov	r6, r0
 8007aaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d069      	beq.n	8007b84 <_dtoa_r+0x924>
 8007ab0:	4631      	mov	r1, r6
 8007ab2:	4658      	mov	r0, fp
 8007ab4:	f000 fe78 	bl	80087a8 <__mcmp>
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	da63      	bge.n	8007b84 <_dtoa_r+0x924>
 8007abc:	2300      	movs	r3, #0
 8007abe:	4659      	mov	r1, fp
 8007ac0:	220a      	movs	r2, #10
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	f000 fc54 	bl	8008370 <__multadd>
 8007ac8:	9b08      	ldr	r3, [sp, #32]
 8007aca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ace:	4683      	mov	fp, r0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f000 818f 	beq.w	8007df4 <_dtoa_r+0xb94>
 8007ad6:	4639      	mov	r1, r7
 8007ad8:	2300      	movs	r3, #0
 8007ada:	220a      	movs	r2, #10
 8007adc:	4620      	mov	r0, r4
 8007ade:	f000 fc47 	bl	8008370 <__multadd>
 8007ae2:	f1b9 0f00 	cmp.w	r9, #0
 8007ae6:	4607      	mov	r7, r0
 8007ae8:	f300 808e 	bgt.w	8007c08 <_dtoa_r+0x9a8>
 8007aec:	9b05      	ldr	r3, [sp, #20]
 8007aee:	2b02      	cmp	r3, #2
 8007af0:	dc50      	bgt.n	8007b94 <_dtoa_r+0x934>
 8007af2:	e089      	b.n	8007c08 <_dtoa_r+0x9a8>
 8007af4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007af6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007afa:	e75d      	b.n	80079b8 <_dtoa_r+0x758>
 8007afc:	9b01      	ldr	r3, [sp, #4]
 8007afe:	1e5e      	subs	r6, r3, #1
 8007b00:	9b06      	ldr	r3, [sp, #24]
 8007b02:	42b3      	cmp	r3, r6
 8007b04:	bfbf      	itttt	lt
 8007b06:	9b06      	ldrlt	r3, [sp, #24]
 8007b08:	9606      	strlt	r6, [sp, #24]
 8007b0a:	1af2      	sublt	r2, r6, r3
 8007b0c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007b0e:	bfb6      	itet	lt
 8007b10:	189b      	addlt	r3, r3, r2
 8007b12:	1b9e      	subge	r6, r3, r6
 8007b14:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007b16:	9b01      	ldr	r3, [sp, #4]
 8007b18:	bfb8      	it	lt
 8007b1a:	2600      	movlt	r6, #0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	bfb5      	itete	lt
 8007b20:	eba8 0503 	sublt.w	r5, r8, r3
 8007b24:	9b01      	ldrge	r3, [sp, #4]
 8007b26:	2300      	movlt	r3, #0
 8007b28:	4645      	movge	r5, r8
 8007b2a:	e747      	b.n	80079bc <_dtoa_r+0x75c>
 8007b2c:	9e06      	ldr	r6, [sp, #24]
 8007b2e:	9f08      	ldr	r7, [sp, #32]
 8007b30:	4645      	mov	r5, r8
 8007b32:	e74c      	b.n	80079ce <_dtoa_r+0x76e>
 8007b34:	9a06      	ldr	r2, [sp, #24]
 8007b36:	e775      	b.n	8007a24 <_dtoa_r+0x7c4>
 8007b38:	9b05      	ldr	r3, [sp, #20]
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	dc18      	bgt.n	8007b70 <_dtoa_r+0x910>
 8007b3e:	9b02      	ldr	r3, [sp, #8]
 8007b40:	b9b3      	cbnz	r3, 8007b70 <_dtoa_r+0x910>
 8007b42:	9b03      	ldr	r3, [sp, #12]
 8007b44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b48:	b9a3      	cbnz	r3, 8007b74 <_dtoa_r+0x914>
 8007b4a:	9b03      	ldr	r3, [sp, #12]
 8007b4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b50:	0d1b      	lsrs	r3, r3, #20
 8007b52:	051b      	lsls	r3, r3, #20
 8007b54:	b12b      	cbz	r3, 8007b62 <_dtoa_r+0x902>
 8007b56:	9b04      	ldr	r3, [sp, #16]
 8007b58:	3301      	adds	r3, #1
 8007b5a:	9304      	str	r3, [sp, #16]
 8007b5c:	f108 0801 	add.w	r8, r8, #1
 8007b60:	2301      	movs	r3, #1
 8007b62:	9306      	str	r3, [sp, #24]
 8007b64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	f47f af74 	bne.w	8007a54 <_dtoa_r+0x7f4>
 8007b6c:	2001      	movs	r0, #1
 8007b6e:	e779      	b.n	8007a64 <_dtoa_r+0x804>
 8007b70:	2300      	movs	r3, #0
 8007b72:	e7f6      	b.n	8007b62 <_dtoa_r+0x902>
 8007b74:	9b02      	ldr	r3, [sp, #8]
 8007b76:	e7f4      	b.n	8007b62 <_dtoa_r+0x902>
 8007b78:	d085      	beq.n	8007a86 <_dtoa_r+0x826>
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	301c      	adds	r0, #28
 8007b7e:	e77d      	b.n	8007a7c <_dtoa_r+0x81c>
 8007b80:	40240000 	.word	0x40240000
 8007b84:	9b01      	ldr	r3, [sp, #4]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	dc38      	bgt.n	8007bfc <_dtoa_r+0x99c>
 8007b8a:	9b05      	ldr	r3, [sp, #20]
 8007b8c:	2b02      	cmp	r3, #2
 8007b8e:	dd35      	ble.n	8007bfc <_dtoa_r+0x99c>
 8007b90:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007b94:	f1b9 0f00 	cmp.w	r9, #0
 8007b98:	d10d      	bne.n	8007bb6 <_dtoa_r+0x956>
 8007b9a:	4631      	mov	r1, r6
 8007b9c:	464b      	mov	r3, r9
 8007b9e:	2205      	movs	r2, #5
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	f000 fbe5 	bl	8008370 <__multadd>
 8007ba6:	4601      	mov	r1, r0
 8007ba8:	4606      	mov	r6, r0
 8007baa:	4658      	mov	r0, fp
 8007bac:	f000 fdfc 	bl	80087a8 <__mcmp>
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	f73f adbd 	bgt.w	8007730 <_dtoa_r+0x4d0>
 8007bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bb8:	9d00      	ldr	r5, [sp, #0]
 8007bba:	ea6f 0a03 	mvn.w	sl, r3
 8007bbe:	f04f 0800 	mov.w	r8, #0
 8007bc2:	4631      	mov	r1, r6
 8007bc4:	4620      	mov	r0, r4
 8007bc6:	f000 fbb1 	bl	800832c <_Bfree>
 8007bca:	2f00      	cmp	r7, #0
 8007bcc:	f43f aeb4 	beq.w	8007938 <_dtoa_r+0x6d8>
 8007bd0:	f1b8 0f00 	cmp.w	r8, #0
 8007bd4:	d005      	beq.n	8007be2 <_dtoa_r+0x982>
 8007bd6:	45b8      	cmp	r8, r7
 8007bd8:	d003      	beq.n	8007be2 <_dtoa_r+0x982>
 8007bda:	4641      	mov	r1, r8
 8007bdc:	4620      	mov	r0, r4
 8007bde:	f000 fba5 	bl	800832c <_Bfree>
 8007be2:	4639      	mov	r1, r7
 8007be4:	4620      	mov	r0, r4
 8007be6:	f000 fba1 	bl	800832c <_Bfree>
 8007bea:	e6a5      	b.n	8007938 <_dtoa_r+0x6d8>
 8007bec:	2600      	movs	r6, #0
 8007bee:	4637      	mov	r7, r6
 8007bf0:	e7e1      	b.n	8007bb6 <_dtoa_r+0x956>
 8007bf2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007bf4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007bf8:	4637      	mov	r7, r6
 8007bfa:	e599      	b.n	8007730 <_dtoa_r+0x4d0>
 8007bfc:	9b08      	ldr	r3, [sp, #32]
 8007bfe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	f000 80fd 	beq.w	8007e02 <_dtoa_r+0xba2>
 8007c08:	2d00      	cmp	r5, #0
 8007c0a:	dd05      	ble.n	8007c18 <_dtoa_r+0x9b8>
 8007c0c:	4639      	mov	r1, r7
 8007c0e:	462a      	mov	r2, r5
 8007c10:	4620      	mov	r0, r4
 8007c12:	f000 fd5d 	bl	80086d0 <__lshift>
 8007c16:	4607      	mov	r7, r0
 8007c18:	9b06      	ldr	r3, [sp, #24]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d05c      	beq.n	8007cd8 <_dtoa_r+0xa78>
 8007c1e:	6879      	ldr	r1, [r7, #4]
 8007c20:	4620      	mov	r0, r4
 8007c22:	f000 fb43 	bl	80082ac <_Balloc>
 8007c26:	4605      	mov	r5, r0
 8007c28:	b928      	cbnz	r0, 8007c36 <_dtoa_r+0x9d6>
 8007c2a:	4b80      	ldr	r3, [pc, #512]	; (8007e2c <_dtoa_r+0xbcc>)
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007c32:	f7ff bb2e 	b.w	8007292 <_dtoa_r+0x32>
 8007c36:	693a      	ldr	r2, [r7, #16]
 8007c38:	3202      	adds	r2, #2
 8007c3a:	0092      	lsls	r2, r2, #2
 8007c3c:	f107 010c 	add.w	r1, r7, #12
 8007c40:	300c      	adds	r0, #12
 8007c42:	f000 fb25 	bl	8008290 <memcpy>
 8007c46:	2201      	movs	r2, #1
 8007c48:	4629      	mov	r1, r5
 8007c4a:	4620      	mov	r0, r4
 8007c4c:	f000 fd40 	bl	80086d0 <__lshift>
 8007c50:	9b00      	ldr	r3, [sp, #0]
 8007c52:	3301      	adds	r3, #1
 8007c54:	9301      	str	r3, [sp, #4]
 8007c56:	9b00      	ldr	r3, [sp, #0]
 8007c58:	444b      	add	r3, r9
 8007c5a:	9307      	str	r3, [sp, #28]
 8007c5c:	9b02      	ldr	r3, [sp, #8]
 8007c5e:	f003 0301 	and.w	r3, r3, #1
 8007c62:	46b8      	mov	r8, r7
 8007c64:	9306      	str	r3, [sp, #24]
 8007c66:	4607      	mov	r7, r0
 8007c68:	9b01      	ldr	r3, [sp, #4]
 8007c6a:	4631      	mov	r1, r6
 8007c6c:	3b01      	subs	r3, #1
 8007c6e:	4658      	mov	r0, fp
 8007c70:	9302      	str	r3, [sp, #8]
 8007c72:	f7ff fa67 	bl	8007144 <quorem>
 8007c76:	4603      	mov	r3, r0
 8007c78:	3330      	adds	r3, #48	; 0x30
 8007c7a:	9004      	str	r0, [sp, #16]
 8007c7c:	4641      	mov	r1, r8
 8007c7e:	4658      	mov	r0, fp
 8007c80:	9308      	str	r3, [sp, #32]
 8007c82:	f000 fd91 	bl	80087a8 <__mcmp>
 8007c86:	463a      	mov	r2, r7
 8007c88:	4681      	mov	r9, r0
 8007c8a:	4631      	mov	r1, r6
 8007c8c:	4620      	mov	r0, r4
 8007c8e:	f000 fda7 	bl	80087e0 <__mdiff>
 8007c92:	68c2      	ldr	r2, [r0, #12]
 8007c94:	9b08      	ldr	r3, [sp, #32]
 8007c96:	4605      	mov	r5, r0
 8007c98:	bb02      	cbnz	r2, 8007cdc <_dtoa_r+0xa7c>
 8007c9a:	4601      	mov	r1, r0
 8007c9c:	4658      	mov	r0, fp
 8007c9e:	f000 fd83 	bl	80087a8 <__mcmp>
 8007ca2:	9b08      	ldr	r3, [sp, #32]
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	4629      	mov	r1, r5
 8007ca8:	4620      	mov	r0, r4
 8007caa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007cae:	f000 fb3d 	bl	800832c <_Bfree>
 8007cb2:	9b05      	ldr	r3, [sp, #20]
 8007cb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cb6:	9d01      	ldr	r5, [sp, #4]
 8007cb8:	ea43 0102 	orr.w	r1, r3, r2
 8007cbc:	9b06      	ldr	r3, [sp, #24]
 8007cbe:	430b      	orrs	r3, r1
 8007cc0:	9b08      	ldr	r3, [sp, #32]
 8007cc2:	d10d      	bne.n	8007ce0 <_dtoa_r+0xa80>
 8007cc4:	2b39      	cmp	r3, #57	; 0x39
 8007cc6:	d029      	beq.n	8007d1c <_dtoa_r+0xabc>
 8007cc8:	f1b9 0f00 	cmp.w	r9, #0
 8007ccc:	dd01      	ble.n	8007cd2 <_dtoa_r+0xa72>
 8007cce:	9b04      	ldr	r3, [sp, #16]
 8007cd0:	3331      	adds	r3, #49	; 0x31
 8007cd2:	9a02      	ldr	r2, [sp, #8]
 8007cd4:	7013      	strb	r3, [r2, #0]
 8007cd6:	e774      	b.n	8007bc2 <_dtoa_r+0x962>
 8007cd8:	4638      	mov	r0, r7
 8007cda:	e7b9      	b.n	8007c50 <_dtoa_r+0x9f0>
 8007cdc:	2201      	movs	r2, #1
 8007cde:	e7e2      	b.n	8007ca6 <_dtoa_r+0xa46>
 8007ce0:	f1b9 0f00 	cmp.w	r9, #0
 8007ce4:	db06      	blt.n	8007cf4 <_dtoa_r+0xa94>
 8007ce6:	9905      	ldr	r1, [sp, #20]
 8007ce8:	ea41 0909 	orr.w	r9, r1, r9
 8007cec:	9906      	ldr	r1, [sp, #24]
 8007cee:	ea59 0101 	orrs.w	r1, r9, r1
 8007cf2:	d120      	bne.n	8007d36 <_dtoa_r+0xad6>
 8007cf4:	2a00      	cmp	r2, #0
 8007cf6:	ddec      	ble.n	8007cd2 <_dtoa_r+0xa72>
 8007cf8:	4659      	mov	r1, fp
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	9301      	str	r3, [sp, #4]
 8007d00:	f000 fce6 	bl	80086d0 <__lshift>
 8007d04:	4631      	mov	r1, r6
 8007d06:	4683      	mov	fp, r0
 8007d08:	f000 fd4e 	bl	80087a8 <__mcmp>
 8007d0c:	2800      	cmp	r0, #0
 8007d0e:	9b01      	ldr	r3, [sp, #4]
 8007d10:	dc02      	bgt.n	8007d18 <_dtoa_r+0xab8>
 8007d12:	d1de      	bne.n	8007cd2 <_dtoa_r+0xa72>
 8007d14:	07da      	lsls	r2, r3, #31
 8007d16:	d5dc      	bpl.n	8007cd2 <_dtoa_r+0xa72>
 8007d18:	2b39      	cmp	r3, #57	; 0x39
 8007d1a:	d1d8      	bne.n	8007cce <_dtoa_r+0xa6e>
 8007d1c:	9a02      	ldr	r2, [sp, #8]
 8007d1e:	2339      	movs	r3, #57	; 0x39
 8007d20:	7013      	strb	r3, [r2, #0]
 8007d22:	462b      	mov	r3, r5
 8007d24:	461d      	mov	r5, r3
 8007d26:	3b01      	subs	r3, #1
 8007d28:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007d2c:	2a39      	cmp	r2, #57	; 0x39
 8007d2e:	d050      	beq.n	8007dd2 <_dtoa_r+0xb72>
 8007d30:	3201      	adds	r2, #1
 8007d32:	701a      	strb	r2, [r3, #0]
 8007d34:	e745      	b.n	8007bc2 <_dtoa_r+0x962>
 8007d36:	2a00      	cmp	r2, #0
 8007d38:	dd03      	ble.n	8007d42 <_dtoa_r+0xae2>
 8007d3a:	2b39      	cmp	r3, #57	; 0x39
 8007d3c:	d0ee      	beq.n	8007d1c <_dtoa_r+0xabc>
 8007d3e:	3301      	adds	r3, #1
 8007d40:	e7c7      	b.n	8007cd2 <_dtoa_r+0xa72>
 8007d42:	9a01      	ldr	r2, [sp, #4]
 8007d44:	9907      	ldr	r1, [sp, #28]
 8007d46:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007d4a:	428a      	cmp	r2, r1
 8007d4c:	d02a      	beq.n	8007da4 <_dtoa_r+0xb44>
 8007d4e:	4659      	mov	r1, fp
 8007d50:	2300      	movs	r3, #0
 8007d52:	220a      	movs	r2, #10
 8007d54:	4620      	mov	r0, r4
 8007d56:	f000 fb0b 	bl	8008370 <__multadd>
 8007d5a:	45b8      	cmp	r8, r7
 8007d5c:	4683      	mov	fp, r0
 8007d5e:	f04f 0300 	mov.w	r3, #0
 8007d62:	f04f 020a 	mov.w	r2, #10
 8007d66:	4641      	mov	r1, r8
 8007d68:	4620      	mov	r0, r4
 8007d6a:	d107      	bne.n	8007d7c <_dtoa_r+0xb1c>
 8007d6c:	f000 fb00 	bl	8008370 <__multadd>
 8007d70:	4680      	mov	r8, r0
 8007d72:	4607      	mov	r7, r0
 8007d74:	9b01      	ldr	r3, [sp, #4]
 8007d76:	3301      	adds	r3, #1
 8007d78:	9301      	str	r3, [sp, #4]
 8007d7a:	e775      	b.n	8007c68 <_dtoa_r+0xa08>
 8007d7c:	f000 faf8 	bl	8008370 <__multadd>
 8007d80:	4639      	mov	r1, r7
 8007d82:	4680      	mov	r8, r0
 8007d84:	2300      	movs	r3, #0
 8007d86:	220a      	movs	r2, #10
 8007d88:	4620      	mov	r0, r4
 8007d8a:	f000 faf1 	bl	8008370 <__multadd>
 8007d8e:	4607      	mov	r7, r0
 8007d90:	e7f0      	b.n	8007d74 <_dtoa_r+0xb14>
 8007d92:	f1b9 0f00 	cmp.w	r9, #0
 8007d96:	9a00      	ldr	r2, [sp, #0]
 8007d98:	bfcc      	ite	gt
 8007d9a:	464d      	movgt	r5, r9
 8007d9c:	2501      	movle	r5, #1
 8007d9e:	4415      	add	r5, r2
 8007da0:	f04f 0800 	mov.w	r8, #0
 8007da4:	4659      	mov	r1, fp
 8007da6:	2201      	movs	r2, #1
 8007da8:	4620      	mov	r0, r4
 8007daa:	9301      	str	r3, [sp, #4]
 8007dac:	f000 fc90 	bl	80086d0 <__lshift>
 8007db0:	4631      	mov	r1, r6
 8007db2:	4683      	mov	fp, r0
 8007db4:	f000 fcf8 	bl	80087a8 <__mcmp>
 8007db8:	2800      	cmp	r0, #0
 8007dba:	dcb2      	bgt.n	8007d22 <_dtoa_r+0xac2>
 8007dbc:	d102      	bne.n	8007dc4 <_dtoa_r+0xb64>
 8007dbe:	9b01      	ldr	r3, [sp, #4]
 8007dc0:	07db      	lsls	r3, r3, #31
 8007dc2:	d4ae      	bmi.n	8007d22 <_dtoa_r+0xac2>
 8007dc4:	462b      	mov	r3, r5
 8007dc6:	461d      	mov	r5, r3
 8007dc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007dcc:	2a30      	cmp	r2, #48	; 0x30
 8007dce:	d0fa      	beq.n	8007dc6 <_dtoa_r+0xb66>
 8007dd0:	e6f7      	b.n	8007bc2 <_dtoa_r+0x962>
 8007dd2:	9a00      	ldr	r2, [sp, #0]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d1a5      	bne.n	8007d24 <_dtoa_r+0xac4>
 8007dd8:	f10a 0a01 	add.w	sl, sl, #1
 8007ddc:	2331      	movs	r3, #49	; 0x31
 8007dde:	e779      	b.n	8007cd4 <_dtoa_r+0xa74>
 8007de0:	4b13      	ldr	r3, [pc, #76]	; (8007e30 <_dtoa_r+0xbd0>)
 8007de2:	f7ff baaf 	b.w	8007344 <_dtoa_r+0xe4>
 8007de6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	f47f aa86 	bne.w	80072fa <_dtoa_r+0x9a>
 8007dee:	4b11      	ldr	r3, [pc, #68]	; (8007e34 <_dtoa_r+0xbd4>)
 8007df0:	f7ff baa8 	b.w	8007344 <_dtoa_r+0xe4>
 8007df4:	f1b9 0f00 	cmp.w	r9, #0
 8007df8:	dc03      	bgt.n	8007e02 <_dtoa_r+0xba2>
 8007dfa:	9b05      	ldr	r3, [sp, #20]
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	f73f aec9 	bgt.w	8007b94 <_dtoa_r+0x934>
 8007e02:	9d00      	ldr	r5, [sp, #0]
 8007e04:	4631      	mov	r1, r6
 8007e06:	4658      	mov	r0, fp
 8007e08:	f7ff f99c 	bl	8007144 <quorem>
 8007e0c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007e10:	f805 3b01 	strb.w	r3, [r5], #1
 8007e14:	9a00      	ldr	r2, [sp, #0]
 8007e16:	1aaa      	subs	r2, r5, r2
 8007e18:	4591      	cmp	r9, r2
 8007e1a:	ddba      	ble.n	8007d92 <_dtoa_r+0xb32>
 8007e1c:	4659      	mov	r1, fp
 8007e1e:	2300      	movs	r3, #0
 8007e20:	220a      	movs	r2, #10
 8007e22:	4620      	mov	r0, r4
 8007e24:	f000 faa4 	bl	8008370 <__multadd>
 8007e28:	4683      	mov	fp, r0
 8007e2a:	e7eb      	b.n	8007e04 <_dtoa_r+0xba4>
 8007e2c:	080092c7 	.word	0x080092c7
 8007e30:	08009220 	.word	0x08009220
 8007e34:	08009244 	.word	0x08009244

08007e38 <__sflush_r>:
 8007e38:	898a      	ldrh	r2, [r1, #12]
 8007e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e3e:	4605      	mov	r5, r0
 8007e40:	0710      	lsls	r0, r2, #28
 8007e42:	460c      	mov	r4, r1
 8007e44:	d458      	bmi.n	8007ef8 <__sflush_r+0xc0>
 8007e46:	684b      	ldr	r3, [r1, #4]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	dc05      	bgt.n	8007e58 <__sflush_r+0x20>
 8007e4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	dc02      	bgt.n	8007e58 <__sflush_r+0x20>
 8007e52:	2000      	movs	r0, #0
 8007e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e5a:	2e00      	cmp	r6, #0
 8007e5c:	d0f9      	beq.n	8007e52 <__sflush_r+0x1a>
 8007e5e:	2300      	movs	r3, #0
 8007e60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e64:	682f      	ldr	r7, [r5, #0]
 8007e66:	602b      	str	r3, [r5, #0]
 8007e68:	d032      	beq.n	8007ed0 <__sflush_r+0x98>
 8007e6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e6c:	89a3      	ldrh	r3, [r4, #12]
 8007e6e:	075a      	lsls	r2, r3, #29
 8007e70:	d505      	bpl.n	8007e7e <__sflush_r+0x46>
 8007e72:	6863      	ldr	r3, [r4, #4]
 8007e74:	1ac0      	subs	r0, r0, r3
 8007e76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e78:	b10b      	cbz	r3, 8007e7e <__sflush_r+0x46>
 8007e7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e7c:	1ac0      	subs	r0, r0, r3
 8007e7e:	2300      	movs	r3, #0
 8007e80:	4602      	mov	r2, r0
 8007e82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e84:	6a21      	ldr	r1, [r4, #32]
 8007e86:	4628      	mov	r0, r5
 8007e88:	47b0      	blx	r6
 8007e8a:	1c43      	adds	r3, r0, #1
 8007e8c:	89a3      	ldrh	r3, [r4, #12]
 8007e8e:	d106      	bne.n	8007e9e <__sflush_r+0x66>
 8007e90:	6829      	ldr	r1, [r5, #0]
 8007e92:	291d      	cmp	r1, #29
 8007e94:	d82c      	bhi.n	8007ef0 <__sflush_r+0xb8>
 8007e96:	4a2a      	ldr	r2, [pc, #168]	; (8007f40 <__sflush_r+0x108>)
 8007e98:	40ca      	lsrs	r2, r1
 8007e9a:	07d6      	lsls	r6, r2, #31
 8007e9c:	d528      	bpl.n	8007ef0 <__sflush_r+0xb8>
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	6062      	str	r2, [r4, #4]
 8007ea2:	04d9      	lsls	r1, r3, #19
 8007ea4:	6922      	ldr	r2, [r4, #16]
 8007ea6:	6022      	str	r2, [r4, #0]
 8007ea8:	d504      	bpl.n	8007eb4 <__sflush_r+0x7c>
 8007eaa:	1c42      	adds	r2, r0, #1
 8007eac:	d101      	bne.n	8007eb2 <__sflush_r+0x7a>
 8007eae:	682b      	ldr	r3, [r5, #0]
 8007eb0:	b903      	cbnz	r3, 8007eb4 <__sflush_r+0x7c>
 8007eb2:	6560      	str	r0, [r4, #84]	; 0x54
 8007eb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007eb6:	602f      	str	r7, [r5, #0]
 8007eb8:	2900      	cmp	r1, #0
 8007eba:	d0ca      	beq.n	8007e52 <__sflush_r+0x1a>
 8007ebc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ec0:	4299      	cmp	r1, r3
 8007ec2:	d002      	beq.n	8007eca <__sflush_r+0x92>
 8007ec4:	4628      	mov	r0, r5
 8007ec6:	f000 fd7f 	bl	80089c8 <_free_r>
 8007eca:	2000      	movs	r0, #0
 8007ecc:	6360      	str	r0, [r4, #52]	; 0x34
 8007ece:	e7c1      	b.n	8007e54 <__sflush_r+0x1c>
 8007ed0:	6a21      	ldr	r1, [r4, #32]
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	4628      	mov	r0, r5
 8007ed6:	47b0      	blx	r6
 8007ed8:	1c41      	adds	r1, r0, #1
 8007eda:	d1c7      	bne.n	8007e6c <__sflush_r+0x34>
 8007edc:	682b      	ldr	r3, [r5, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d0c4      	beq.n	8007e6c <__sflush_r+0x34>
 8007ee2:	2b1d      	cmp	r3, #29
 8007ee4:	d001      	beq.n	8007eea <__sflush_r+0xb2>
 8007ee6:	2b16      	cmp	r3, #22
 8007ee8:	d101      	bne.n	8007eee <__sflush_r+0xb6>
 8007eea:	602f      	str	r7, [r5, #0]
 8007eec:	e7b1      	b.n	8007e52 <__sflush_r+0x1a>
 8007eee:	89a3      	ldrh	r3, [r4, #12]
 8007ef0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ef4:	81a3      	strh	r3, [r4, #12]
 8007ef6:	e7ad      	b.n	8007e54 <__sflush_r+0x1c>
 8007ef8:	690f      	ldr	r7, [r1, #16]
 8007efa:	2f00      	cmp	r7, #0
 8007efc:	d0a9      	beq.n	8007e52 <__sflush_r+0x1a>
 8007efe:	0793      	lsls	r3, r2, #30
 8007f00:	680e      	ldr	r6, [r1, #0]
 8007f02:	bf08      	it	eq
 8007f04:	694b      	ldreq	r3, [r1, #20]
 8007f06:	600f      	str	r7, [r1, #0]
 8007f08:	bf18      	it	ne
 8007f0a:	2300      	movne	r3, #0
 8007f0c:	eba6 0807 	sub.w	r8, r6, r7
 8007f10:	608b      	str	r3, [r1, #8]
 8007f12:	f1b8 0f00 	cmp.w	r8, #0
 8007f16:	dd9c      	ble.n	8007e52 <__sflush_r+0x1a>
 8007f18:	6a21      	ldr	r1, [r4, #32]
 8007f1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f1c:	4643      	mov	r3, r8
 8007f1e:	463a      	mov	r2, r7
 8007f20:	4628      	mov	r0, r5
 8007f22:	47b0      	blx	r6
 8007f24:	2800      	cmp	r0, #0
 8007f26:	dc06      	bgt.n	8007f36 <__sflush_r+0xfe>
 8007f28:	89a3      	ldrh	r3, [r4, #12]
 8007f2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f2e:	81a3      	strh	r3, [r4, #12]
 8007f30:	f04f 30ff 	mov.w	r0, #4294967295
 8007f34:	e78e      	b.n	8007e54 <__sflush_r+0x1c>
 8007f36:	4407      	add	r7, r0
 8007f38:	eba8 0800 	sub.w	r8, r8, r0
 8007f3c:	e7e9      	b.n	8007f12 <__sflush_r+0xda>
 8007f3e:	bf00      	nop
 8007f40:	20400001 	.word	0x20400001

08007f44 <_fflush_r>:
 8007f44:	b538      	push	{r3, r4, r5, lr}
 8007f46:	690b      	ldr	r3, [r1, #16]
 8007f48:	4605      	mov	r5, r0
 8007f4a:	460c      	mov	r4, r1
 8007f4c:	b913      	cbnz	r3, 8007f54 <_fflush_r+0x10>
 8007f4e:	2500      	movs	r5, #0
 8007f50:	4628      	mov	r0, r5
 8007f52:	bd38      	pop	{r3, r4, r5, pc}
 8007f54:	b118      	cbz	r0, 8007f5e <_fflush_r+0x1a>
 8007f56:	6983      	ldr	r3, [r0, #24]
 8007f58:	b90b      	cbnz	r3, 8007f5e <_fflush_r+0x1a>
 8007f5a:	f000 f887 	bl	800806c <__sinit>
 8007f5e:	4b14      	ldr	r3, [pc, #80]	; (8007fb0 <_fflush_r+0x6c>)
 8007f60:	429c      	cmp	r4, r3
 8007f62:	d11b      	bne.n	8007f9c <_fflush_r+0x58>
 8007f64:	686c      	ldr	r4, [r5, #4]
 8007f66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d0ef      	beq.n	8007f4e <_fflush_r+0xa>
 8007f6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f70:	07d0      	lsls	r0, r2, #31
 8007f72:	d404      	bmi.n	8007f7e <_fflush_r+0x3a>
 8007f74:	0599      	lsls	r1, r3, #22
 8007f76:	d402      	bmi.n	8007f7e <_fflush_r+0x3a>
 8007f78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f7a:	f000 f91a 	bl	80081b2 <__retarget_lock_acquire_recursive>
 8007f7e:	4628      	mov	r0, r5
 8007f80:	4621      	mov	r1, r4
 8007f82:	f7ff ff59 	bl	8007e38 <__sflush_r>
 8007f86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f88:	07da      	lsls	r2, r3, #31
 8007f8a:	4605      	mov	r5, r0
 8007f8c:	d4e0      	bmi.n	8007f50 <_fflush_r+0xc>
 8007f8e:	89a3      	ldrh	r3, [r4, #12]
 8007f90:	059b      	lsls	r3, r3, #22
 8007f92:	d4dd      	bmi.n	8007f50 <_fflush_r+0xc>
 8007f94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f96:	f000 f90d 	bl	80081b4 <__retarget_lock_release_recursive>
 8007f9a:	e7d9      	b.n	8007f50 <_fflush_r+0xc>
 8007f9c:	4b05      	ldr	r3, [pc, #20]	; (8007fb4 <_fflush_r+0x70>)
 8007f9e:	429c      	cmp	r4, r3
 8007fa0:	d101      	bne.n	8007fa6 <_fflush_r+0x62>
 8007fa2:	68ac      	ldr	r4, [r5, #8]
 8007fa4:	e7df      	b.n	8007f66 <_fflush_r+0x22>
 8007fa6:	4b04      	ldr	r3, [pc, #16]	; (8007fb8 <_fflush_r+0x74>)
 8007fa8:	429c      	cmp	r4, r3
 8007faa:	bf08      	it	eq
 8007fac:	68ec      	ldreq	r4, [r5, #12]
 8007fae:	e7da      	b.n	8007f66 <_fflush_r+0x22>
 8007fb0:	080092f8 	.word	0x080092f8
 8007fb4:	08009318 	.word	0x08009318
 8007fb8:	080092d8 	.word	0x080092d8

08007fbc <std>:
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	b510      	push	{r4, lr}
 8007fc0:	4604      	mov	r4, r0
 8007fc2:	e9c0 3300 	strd	r3, r3, [r0]
 8007fc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fca:	6083      	str	r3, [r0, #8]
 8007fcc:	8181      	strh	r1, [r0, #12]
 8007fce:	6643      	str	r3, [r0, #100]	; 0x64
 8007fd0:	81c2      	strh	r2, [r0, #14]
 8007fd2:	6183      	str	r3, [r0, #24]
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	2208      	movs	r2, #8
 8007fd8:	305c      	adds	r0, #92	; 0x5c
 8007fda:	f7fe fa2d 	bl	8006438 <memset>
 8007fde:	4b05      	ldr	r3, [pc, #20]	; (8007ff4 <std+0x38>)
 8007fe0:	6263      	str	r3, [r4, #36]	; 0x24
 8007fe2:	4b05      	ldr	r3, [pc, #20]	; (8007ff8 <std+0x3c>)
 8007fe4:	62a3      	str	r3, [r4, #40]	; 0x28
 8007fe6:	4b05      	ldr	r3, [pc, #20]	; (8007ffc <std+0x40>)
 8007fe8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007fea:	4b05      	ldr	r3, [pc, #20]	; (8008000 <std+0x44>)
 8007fec:	6224      	str	r4, [r4, #32]
 8007fee:	6323      	str	r3, [r4, #48]	; 0x30
 8007ff0:	bd10      	pop	{r4, pc}
 8007ff2:	bf00      	nop
 8007ff4:	08008df1 	.word	0x08008df1
 8007ff8:	08008e13 	.word	0x08008e13
 8007ffc:	08008e4b 	.word	0x08008e4b
 8008000:	08008e6f 	.word	0x08008e6f

08008004 <_cleanup_r>:
 8008004:	4901      	ldr	r1, [pc, #4]	; (800800c <_cleanup_r+0x8>)
 8008006:	f000 b8af 	b.w	8008168 <_fwalk_reent>
 800800a:	bf00      	nop
 800800c:	08007f45 	.word	0x08007f45

08008010 <__sfmoreglue>:
 8008010:	b570      	push	{r4, r5, r6, lr}
 8008012:	1e4a      	subs	r2, r1, #1
 8008014:	2568      	movs	r5, #104	; 0x68
 8008016:	4355      	muls	r5, r2
 8008018:	460e      	mov	r6, r1
 800801a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800801e:	f000 fd23 	bl	8008a68 <_malloc_r>
 8008022:	4604      	mov	r4, r0
 8008024:	b140      	cbz	r0, 8008038 <__sfmoreglue+0x28>
 8008026:	2100      	movs	r1, #0
 8008028:	e9c0 1600 	strd	r1, r6, [r0]
 800802c:	300c      	adds	r0, #12
 800802e:	60a0      	str	r0, [r4, #8]
 8008030:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008034:	f7fe fa00 	bl	8006438 <memset>
 8008038:	4620      	mov	r0, r4
 800803a:	bd70      	pop	{r4, r5, r6, pc}

0800803c <__sfp_lock_acquire>:
 800803c:	4801      	ldr	r0, [pc, #4]	; (8008044 <__sfp_lock_acquire+0x8>)
 800803e:	f000 b8b8 	b.w	80081b2 <__retarget_lock_acquire_recursive>
 8008042:	bf00      	nop
 8008044:	200004c0 	.word	0x200004c0

08008048 <__sfp_lock_release>:
 8008048:	4801      	ldr	r0, [pc, #4]	; (8008050 <__sfp_lock_release+0x8>)
 800804a:	f000 b8b3 	b.w	80081b4 <__retarget_lock_release_recursive>
 800804e:	bf00      	nop
 8008050:	200004c0 	.word	0x200004c0

08008054 <__sinit_lock_acquire>:
 8008054:	4801      	ldr	r0, [pc, #4]	; (800805c <__sinit_lock_acquire+0x8>)
 8008056:	f000 b8ac 	b.w	80081b2 <__retarget_lock_acquire_recursive>
 800805a:	bf00      	nop
 800805c:	200004bb 	.word	0x200004bb

08008060 <__sinit_lock_release>:
 8008060:	4801      	ldr	r0, [pc, #4]	; (8008068 <__sinit_lock_release+0x8>)
 8008062:	f000 b8a7 	b.w	80081b4 <__retarget_lock_release_recursive>
 8008066:	bf00      	nop
 8008068:	200004bb 	.word	0x200004bb

0800806c <__sinit>:
 800806c:	b510      	push	{r4, lr}
 800806e:	4604      	mov	r4, r0
 8008070:	f7ff fff0 	bl	8008054 <__sinit_lock_acquire>
 8008074:	69a3      	ldr	r3, [r4, #24]
 8008076:	b11b      	cbz	r3, 8008080 <__sinit+0x14>
 8008078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800807c:	f7ff bff0 	b.w	8008060 <__sinit_lock_release>
 8008080:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008084:	6523      	str	r3, [r4, #80]	; 0x50
 8008086:	4b13      	ldr	r3, [pc, #76]	; (80080d4 <__sinit+0x68>)
 8008088:	4a13      	ldr	r2, [pc, #76]	; (80080d8 <__sinit+0x6c>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	62a2      	str	r2, [r4, #40]	; 0x28
 800808e:	42a3      	cmp	r3, r4
 8008090:	bf04      	itt	eq
 8008092:	2301      	moveq	r3, #1
 8008094:	61a3      	streq	r3, [r4, #24]
 8008096:	4620      	mov	r0, r4
 8008098:	f000 f820 	bl	80080dc <__sfp>
 800809c:	6060      	str	r0, [r4, #4]
 800809e:	4620      	mov	r0, r4
 80080a0:	f000 f81c 	bl	80080dc <__sfp>
 80080a4:	60a0      	str	r0, [r4, #8]
 80080a6:	4620      	mov	r0, r4
 80080a8:	f000 f818 	bl	80080dc <__sfp>
 80080ac:	2200      	movs	r2, #0
 80080ae:	60e0      	str	r0, [r4, #12]
 80080b0:	2104      	movs	r1, #4
 80080b2:	6860      	ldr	r0, [r4, #4]
 80080b4:	f7ff ff82 	bl	8007fbc <std>
 80080b8:	68a0      	ldr	r0, [r4, #8]
 80080ba:	2201      	movs	r2, #1
 80080bc:	2109      	movs	r1, #9
 80080be:	f7ff ff7d 	bl	8007fbc <std>
 80080c2:	68e0      	ldr	r0, [r4, #12]
 80080c4:	2202      	movs	r2, #2
 80080c6:	2112      	movs	r1, #18
 80080c8:	f7ff ff78 	bl	8007fbc <std>
 80080cc:	2301      	movs	r3, #1
 80080ce:	61a3      	str	r3, [r4, #24]
 80080d0:	e7d2      	b.n	8008078 <__sinit+0xc>
 80080d2:	bf00      	nop
 80080d4:	0800920c 	.word	0x0800920c
 80080d8:	08008005 	.word	0x08008005

080080dc <__sfp>:
 80080dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080de:	4607      	mov	r7, r0
 80080e0:	f7ff ffac 	bl	800803c <__sfp_lock_acquire>
 80080e4:	4b1e      	ldr	r3, [pc, #120]	; (8008160 <__sfp+0x84>)
 80080e6:	681e      	ldr	r6, [r3, #0]
 80080e8:	69b3      	ldr	r3, [r6, #24]
 80080ea:	b913      	cbnz	r3, 80080f2 <__sfp+0x16>
 80080ec:	4630      	mov	r0, r6
 80080ee:	f7ff ffbd 	bl	800806c <__sinit>
 80080f2:	3648      	adds	r6, #72	; 0x48
 80080f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80080f8:	3b01      	subs	r3, #1
 80080fa:	d503      	bpl.n	8008104 <__sfp+0x28>
 80080fc:	6833      	ldr	r3, [r6, #0]
 80080fe:	b30b      	cbz	r3, 8008144 <__sfp+0x68>
 8008100:	6836      	ldr	r6, [r6, #0]
 8008102:	e7f7      	b.n	80080f4 <__sfp+0x18>
 8008104:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008108:	b9d5      	cbnz	r5, 8008140 <__sfp+0x64>
 800810a:	4b16      	ldr	r3, [pc, #88]	; (8008164 <__sfp+0x88>)
 800810c:	60e3      	str	r3, [r4, #12]
 800810e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008112:	6665      	str	r5, [r4, #100]	; 0x64
 8008114:	f000 f84c 	bl	80081b0 <__retarget_lock_init_recursive>
 8008118:	f7ff ff96 	bl	8008048 <__sfp_lock_release>
 800811c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008120:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008124:	6025      	str	r5, [r4, #0]
 8008126:	61a5      	str	r5, [r4, #24]
 8008128:	2208      	movs	r2, #8
 800812a:	4629      	mov	r1, r5
 800812c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008130:	f7fe f982 	bl	8006438 <memset>
 8008134:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008138:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800813c:	4620      	mov	r0, r4
 800813e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008140:	3468      	adds	r4, #104	; 0x68
 8008142:	e7d9      	b.n	80080f8 <__sfp+0x1c>
 8008144:	2104      	movs	r1, #4
 8008146:	4638      	mov	r0, r7
 8008148:	f7ff ff62 	bl	8008010 <__sfmoreglue>
 800814c:	4604      	mov	r4, r0
 800814e:	6030      	str	r0, [r6, #0]
 8008150:	2800      	cmp	r0, #0
 8008152:	d1d5      	bne.n	8008100 <__sfp+0x24>
 8008154:	f7ff ff78 	bl	8008048 <__sfp_lock_release>
 8008158:	230c      	movs	r3, #12
 800815a:	603b      	str	r3, [r7, #0]
 800815c:	e7ee      	b.n	800813c <__sfp+0x60>
 800815e:	bf00      	nop
 8008160:	0800920c 	.word	0x0800920c
 8008164:	ffff0001 	.word	0xffff0001

08008168 <_fwalk_reent>:
 8008168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800816c:	4606      	mov	r6, r0
 800816e:	4688      	mov	r8, r1
 8008170:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008174:	2700      	movs	r7, #0
 8008176:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800817a:	f1b9 0901 	subs.w	r9, r9, #1
 800817e:	d505      	bpl.n	800818c <_fwalk_reent+0x24>
 8008180:	6824      	ldr	r4, [r4, #0]
 8008182:	2c00      	cmp	r4, #0
 8008184:	d1f7      	bne.n	8008176 <_fwalk_reent+0xe>
 8008186:	4638      	mov	r0, r7
 8008188:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800818c:	89ab      	ldrh	r3, [r5, #12]
 800818e:	2b01      	cmp	r3, #1
 8008190:	d907      	bls.n	80081a2 <_fwalk_reent+0x3a>
 8008192:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008196:	3301      	adds	r3, #1
 8008198:	d003      	beq.n	80081a2 <_fwalk_reent+0x3a>
 800819a:	4629      	mov	r1, r5
 800819c:	4630      	mov	r0, r6
 800819e:	47c0      	blx	r8
 80081a0:	4307      	orrs	r7, r0
 80081a2:	3568      	adds	r5, #104	; 0x68
 80081a4:	e7e9      	b.n	800817a <_fwalk_reent+0x12>
	...

080081a8 <_localeconv_r>:
 80081a8:	4800      	ldr	r0, [pc, #0]	; (80081ac <_localeconv_r+0x4>)
 80081aa:	4770      	bx	lr
 80081ac:	20000160 	.word	0x20000160

080081b0 <__retarget_lock_init_recursive>:
 80081b0:	4770      	bx	lr

080081b2 <__retarget_lock_acquire_recursive>:
 80081b2:	4770      	bx	lr

080081b4 <__retarget_lock_release_recursive>:
 80081b4:	4770      	bx	lr

080081b6 <__swhatbuf_r>:
 80081b6:	b570      	push	{r4, r5, r6, lr}
 80081b8:	460e      	mov	r6, r1
 80081ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081be:	2900      	cmp	r1, #0
 80081c0:	b096      	sub	sp, #88	; 0x58
 80081c2:	4614      	mov	r4, r2
 80081c4:	461d      	mov	r5, r3
 80081c6:	da07      	bge.n	80081d8 <__swhatbuf_r+0x22>
 80081c8:	2300      	movs	r3, #0
 80081ca:	602b      	str	r3, [r5, #0]
 80081cc:	89b3      	ldrh	r3, [r6, #12]
 80081ce:	061a      	lsls	r2, r3, #24
 80081d0:	d410      	bmi.n	80081f4 <__swhatbuf_r+0x3e>
 80081d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081d6:	e00e      	b.n	80081f6 <__swhatbuf_r+0x40>
 80081d8:	466a      	mov	r2, sp
 80081da:	f000 fe9f 	bl	8008f1c <_fstat_r>
 80081de:	2800      	cmp	r0, #0
 80081e0:	dbf2      	blt.n	80081c8 <__swhatbuf_r+0x12>
 80081e2:	9a01      	ldr	r2, [sp, #4]
 80081e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80081e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80081ec:	425a      	negs	r2, r3
 80081ee:	415a      	adcs	r2, r3
 80081f0:	602a      	str	r2, [r5, #0]
 80081f2:	e7ee      	b.n	80081d2 <__swhatbuf_r+0x1c>
 80081f4:	2340      	movs	r3, #64	; 0x40
 80081f6:	2000      	movs	r0, #0
 80081f8:	6023      	str	r3, [r4, #0]
 80081fa:	b016      	add	sp, #88	; 0x58
 80081fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08008200 <__smakebuf_r>:
 8008200:	898b      	ldrh	r3, [r1, #12]
 8008202:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008204:	079d      	lsls	r5, r3, #30
 8008206:	4606      	mov	r6, r0
 8008208:	460c      	mov	r4, r1
 800820a:	d507      	bpl.n	800821c <__smakebuf_r+0x1c>
 800820c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008210:	6023      	str	r3, [r4, #0]
 8008212:	6123      	str	r3, [r4, #16]
 8008214:	2301      	movs	r3, #1
 8008216:	6163      	str	r3, [r4, #20]
 8008218:	b002      	add	sp, #8
 800821a:	bd70      	pop	{r4, r5, r6, pc}
 800821c:	ab01      	add	r3, sp, #4
 800821e:	466a      	mov	r2, sp
 8008220:	f7ff ffc9 	bl	80081b6 <__swhatbuf_r>
 8008224:	9900      	ldr	r1, [sp, #0]
 8008226:	4605      	mov	r5, r0
 8008228:	4630      	mov	r0, r6
 800822a:	f000 fc1d 	bl	8008a68 <_malloc_r>
 800822e:	b948      	cbnz	r0, 8008244 <__smakebuf_r+0x44>
 8008230:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008234:	059a      	lsls	r2, r3, #22
 8008236:	d4ef      	bmi.n	8008218 <__smakebuf_r+0x18>
 8008238:	f023 0303 	bic.w	r3, r3, #3
 800823c:	f043 0302 	orr.w	r3, r3, #2
 8008240:	81a3      	strh	r3, [r4, #12]
 8008242:	e7e3      	b.n	800820c <__smakebuf_r+0xc>
 8008244:	4b0d      	ldr	r3, [pc, #52]	; (800827c <__smakebuf_r+0x7c>)
 8008246:	62b3      	str	r3, [r6, #40]	; 0x28
 8008248:	89a3      	ldrh	r3, [r4, #12]
 800824a:	6020      	str	r0, [r4, #0]
 800824c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008250:	81a3      	strh	r3, [r4, #12]
 8008252:	9b00      	ldr	r3, [sp, #0]
 8008254:	6163      	str	r3, [r4, #20]
 8008256:	9b01      	ldr	r3, [sp, #4]
 8008258:	6120      	str	r0, [r4, #16]
 800825a:	b15b      	cbz	r3, 8008274 <__smakebuf_r+0x74>
 800825c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008260:	4630      	mov	r0, r6
 8008262:	f000 fe6d 	bl	8008f40 <_isatty_r>
 8008266:	b128      	cbz	r0, 8008274 <__smakebuf_r+0x74>
 8008268:	89a3      	ldrh	r3, [r4, #12]
 800826a:	f023 0303 	bic.w	r3, r3, #3
 800826e:	f043 0301 	orr.w	r3, r3, #1
 8008272:	81a3      	strh	r3, [r4, #12]
 8008274:	89a0      	ldrh	r0, [r4, #12]
 8008276:	4305      	orrs	r5, r0
 8008278:	81a5      	strh	r5, [r4, #12]
 800827a:	e7cd      	b.n	8008218 <__smakebuf_r+0x18>
 800827c:	08008005 	.word	0x08008005

08008280 <malloc>:
 8008280:	4b02      	ldr	r3, [pc, #8]	; (800828c <malloc+0xc>)
 8008282:	4601      	mov	r1, r0
 8008284:	6818      	ldr	r0, [r3, #0]
 8008286:	f000 bbef 	b.w	8008a68 <_malloc_r>
 800828a:	bf00      	nop
 800828c:	2000000c 	.word	0x2000000c

08008290 <memcpy>:
 8008290:	440a      	add	r2, r1
 8008292:	4291      	cmp	r1, r2
 8008294:	f100 33ff 	add.w	r3, r0, #4294967295
 8008298:	d100      	bne.n	800829c <memcpy+0xc>
 800829a:	4770      	bx	lr
 800829c:	b510      	push	{r4, lr}
 800829e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082a6:	4291      	cmp	r1, r2
 80082a8:	d1f9      	bne.n	800829e <memcpy+0xe>
 80082aa:	bd10      	pop	{r4, pc}

080082ac <_Balloc>:
 80082ac:	b570      	push	{r4, r5, r6, lr}
 80082ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80082b0:	4604      	mov	r4, r0
 80082b2:	460d      	mov	r5, r1
 80082b4:	b976      	cbnz	r6, 80082d4 <_Balloc+0x28>
 80082b6:	2010      	movs	r0, #16
 80082b8:	f7ff ffe2 	bl	8008280 <malloc>
 80082bc:	4602      	mov	r2, r0
 80082be:	6260      	str	r0, [r4, #36]	; 0x24
 80082c0:	b920      	cbnz	r0, 80082cc <_Balloc+0x20>
 80082c2:	4b18      	ldr	r3, [pc, #96]	; (8008324 <_Balloc+0x78>)
 80082c4:	4818      	ldr	r0, [pc, #96]	; (8008328 <_Balloc+0x7c>)
 80082c6:	2166      	movs	r1, #102	; 0x66
 80082c8:	f000 fde8 	bl	8008e9c <__assert_func>
 80082cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082d0:	6006      	str	r6, [r0, #0]
 80082d2:	60c6      	str	r6, [r0, #12]
 80082d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80082d6:	68f3      	ldr	r3, [r6, #12]
 80082d8:	b183      	cbz	r3, 80082fc <_Balloc+0x50>
 80082da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80082e2:	b9b8      	cbnz	r0, 8008314 <_Balloc+0x68>
 80082e4:	2101      	movs	r1, #1
 80082e6:	fa01 f605 	lsl.w	r6, r1, r5
 80082ea:	1d72      	adds	r2, r6, #5
 80082ec:	0092      	lsls	r2, r2, #2
 80082ee:	4620      	mov	r0, r4
 80082f0:	f000 fb5a 	bl	80089a8 <_calloc_r>
 80082f4:	b160      	cbz	r0, 8008310 <_Balloc+0x64>
 80082f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80082fa:	e00e      	b.n	800831a <_Balloc+0x6e>
 80082fc:	2221      	movs	r2, #33	; 0x21
 80082fe:	2104      	movs	r1, #4
 8008300:	4620      	mov	r0, r4
 8008302:	f000 fb51 	bl	80089a8 <_calloc_r>
 8008306:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008308:	60f0      	str	r0, [r6, #12]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d1e4      	bne.n	80082da <_Balloc+0x2e>
 8008310:	2000      	movs	r0, #0
 8008312:	bd70      	pop	{r4, r5, r6, pc}
 8008314:	6802      	ldr	r2, [r0, #0]
 8008316:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800831a:	2300      	movs	r3, #0
 800831c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008320:	e7f7      	b.n	8008312 <_Balloc+0x66>
 8008322:	bf00      	nop
 8008324:	08009251 	.word	0x08009251
 8008328:	08009338 	.word	0x08009338

0800832c <_Bfree>:
 800832c:	b570      	push	{r4, r5, r6, lr}
 800832e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008330:	4605      	mov	r5, r0
 8008332:	460c      	mov	r4, r1
 8008334:	b976      	cbnz	r6, 8008354 <_Bfree+0x28>
 8008336:	2010      	movs	r0, #16
 8008338:	f7ff ffa2 	bl	8008280 <malloc>
 800833c:	4602      	mov	r2, r0
 800833e:	6268      	str	r0, [r5, #36]	; 0x24
 8008340:	b920      	cbnz	r0, 800834c <_Bfree+0x20>
 8008342:	4b09      	ldr	r3, [pc, #36]	; (8008368 <_Bfree+0x3c>)
 8008344:	4809      	ldr	r0, [pc, #36]	; (800836c <_Bfree+0x40>)
 8008346:	218a      	movs	r1, #138	; 0x8a
 8008348:	f000 fda8 	bl	8008e9c <__assert_func>
 800834c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008350:	6006      	str	r6, [r0, #0]
 8008352:	60c6      	str	r6, [r0, #12]
 8008354:	b13c      	cbz	r4, 8008366 <_Bfree+0x3a>
 8008356:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008358:	6862      	ldr	r2, [r4, #4]
 800835a:	68db      	ldr	r3, [r3, #12]
 800835c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008360:	6021      	str	r1, [r4, #0]
 8008362:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008366:	bd70      	pop	{r4, r5, r6, pc}
 8008368:	08009251 	.word	0x08009251
 800836c:	08009338 	.word	0x08009338

08008370 <__multadd>:
 8008370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008374:	690e      	ldr	r6, [r1, #16]
 8008376:	4607      	mov	r7, r0
 8008378:	4698      	mov	r8, r3
 800837a:	460c      	mov	r4, r1
 800837c:	f101 0014 	add.w	r0, r1, #20
 8008380:	2300      	movs	r3, #0
 8008382:	6805      	ldr	r5, [r0, #0]
 8008384:	b2a9      	uxth	r1, r5
 8008386:	fb02 8101 	mla	r1, r2, r1, r8
 800838a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800838e:	0c2d      	lsrs	r5, r5, #16
 8008390:	fb02 c505 	mla	r5, r2, r5, ip
 8008394:	b289      	uxth	r1, r1
 8008396:	3301      	adds	r3, #1
 8008398:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800839c:	429e      	cmp	r6, r3
 800839e:	f840 1b04 	str.w	r1, [r0], #4
 80083a2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80083a6:	dcec      	bgt.n	8008382 <__multadd+0x12>
 80083a8:	f1b8 0f00 	cmp.w	r8, #0
 80083ac:	d022      	beq.n	80083f4 <__multadd+0x84>
 80083ae:	68a3      	ldr	r3, [r4, #8]
 80083b0:	42b3      	cmp	r3, r6
 80083b2:	dc19      	bgt.n	80083e8 <__multadd+0x78>
 80083b4:	6861      	ldr	r1, [r4, #4]
 80083b6:	4638      	mov	r0, r7
 80083b8:	3101      	adds	r1, #1
 80083ba:	f7ff ff77 	bl	80082ac <_Balloc>
 80083be:	4605      	mov	r5, r0
 80083c0:	b928      	cbnz	r0, 80083ce <__multadd+0x5e>
 80083c2:	4602      	mov	r2, r0
 80083c4:	4b0d      	ldr	r3, [pc, #52]	; (80083fc <__multadd+0x8c>)
 80083c6:	480e      	ldr	r0, [pc, #56]	; (8008400 <__multadd+0x90>)
 80083c8:	21b5      	movs	r1, #181	; 0xb5
 80083ca:	f000 fd67 	bl	8008e9c <__assert_func>
 80083ce:	6922      	ldr	r2, [r4, #16]
 80083d0:	3202      	adds	r2, #2
 80083d2:	f104 010c 	add.w	r1, r4, #12
 80083d6:	0092      	lsls	r2, r2, #2
 80083d8:	300c      	adds	r0, #12
 80083da:	f7ff ff59 	bl	8008290 <memcpy>
 80083de:	4621      	mov	r1, r4
 80083e0:	4638      	mov	r0, r7
 80083e2:	f7ff ffa3 	bl	800832c <_Bfree>
 80083e6:	462c      	mov	r4, r5
 80083e8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80083ec:	3601      	adds	r6, #1
 80083ee:	f8c3 8014 	str.w	r8, [r3, #20]
 80083f2:	6126      	str	r6, [r4, #16]
 80083f4:	4620      	mov	r0, r4
 80083f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083fa:	bf00      	nop
 80083fc:	080092c7 	.word	0x080092c7
 8008400:	08009338 	.word	0x08009338

08008404 <__hi0bits>:
 8008404:	0c03      	lsrs	r3, r0, #16
 8008406:	041b      	lsls	r3, r3, #16
 8008408:	b9d3      	cbnz	r3, 8008440 <__hi0bits+0x3c>
 800840a:	0400      	lsls	r0, r0, #16
 800840c:	2310      	movs	r3, #16
 800840e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008412:	bf04      	itt	eq
 8008414:	0200      	lsleq	r0, r0, #8
 8008416:	3308      	addeq	r3, #8
 8008418:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800841c:	bf04      	itt	eq
 800841e:	0100      	lsleq	r0, r0, #4
 8008420:	3304      	addeq	r3, #4
 8008422:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008426:	bf04      	itt	eq
 8008428:	0080      	lsleq	r0, r0, #2
 800842a:	3302      	addeq	r3, #2
 800842c:	2800      	cmp	r0, #0
 800842e:	db05      	blt.n	800843c <__hi0bits+0x38>
 8008430:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008434:	f103 0301 	add.w	r3, r3, #1
 8008438:	bf08      	it	eq
 800843a:	2320      	moveq	r3, #32
 800843c:	4618      	mov	r0, r3
 800843e:	4770      	bx	lr
 8008440:	2300      	movs	r3, #0
 8008442:	e7e4      	b.n	800840e <__hi0bits+0xa>

08008444 <__lo0bits>:
 8008444:	6803      	ldr	r3, [r0, #0]
 8008446:	f013 0207 	ands.w	r2, r3, #7
 800844a:	4601      	mov	r1, r0
 800844c:	d00b      	beq.n	8008466 <__lo0bits+0x22>
 800844e:	07da      	lsls	r2, r3, #31
 8008450:	d424      	bmi.n	800849c <__lo0bits+0x58>
 8008452:	0798      	lsls	r0, r3, #30
 8008454:	bf49      	itett	mi
 8008456:	085b      	lsrmi	r3, r3, #1
 8008458:	089b      	lsrpl	r3, r3, #2
 800845a:	2001      	movmi	r0, #1
 800845c:	600b      	strmi	r3, [r1, #0]
 800845e:	bf5c      	itt	pl
 8008460:	600b      	strpl	r3, [r1, #0]
 8008462:	2002      	movpl	r0, #2
 8008464:	4770      	bx	lr
 8008466:	b298      	uxth	r0, r3
 8008468:	b9b0      	cbnz	r0, 8008498 <__lo0bits+0x54>
 800846a:	0c1b      	lsrs	r3, r3, #16
 800846c:	2010      	movs	r0, #16
 800846e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008472:	bf04      	itt	eq
 8008474:	0a1b      	lsreq	r3, r3, #8
 8008476:	3008      	addeq	r0, #8
 8008478:	071a      	lsls	r2, r3, #28
 800847a:	bf04      	itt	eq
 800847c:	091b      	lsreq	r3, r3, #4
 800847e:	3004      	addeq	r0, #4
 8008480:	079a      	lsls	r2, r3, #30
 8008482:	bf04      	itt	eq
 8008484:	089b      	lsreq	r3, r3, #2
 8008486:	3002      	addeq	r0, #2
 8008488:	07da      	lsls	r2, r3, #31
 800848a:	d403      	bmi.n	8008494 <__lo0bits+0x50>
 800848c:	085b      	lsrs	r3, r3, #1
 800848e:	f100 0001 	add.w	r0, r0, #1
 8008492:	d005      	beq.n	80084a0 <__lo0bits+0x5c>
 8008494:	600b      	str	r3, [r1, #0]
 8008496:	4770      	bx	lr
 8008498:	4610      	mov	r0, r2
 800849a:	e7e8      	b.n	800846e <__lo0bits+0x2a>
 800849c:	2000      	movs	r0, #0
 800849e:	4770      	bx	lr
 80084a0:	2020      	movs	r0, #32
 80084a2:	4770      	bx	lr

080084a4 <__i2b>:
 80084a4:	b510      	push	{r4, lr}
 80084a6:	460c      	mov	r4, r1
 80084a8:	2101      	movs	r1, #1
 80084aa:	f7ff feff 	bl	80082ac <_Balloc>
 80084ae:	4602      	mov	r2, r0
 80084b0:	b928      	cbnz	r0, 80084be <__i2b+0x1a>
 80084b2:	4b05      	ldr	r3, [pc, #20]	; (80084c8 <__i2b+0x24>)
 80084b4:	4805      	ldr	r0, [pc, #20]	; (80084cc <__i2b+0x28>)
 80084b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80084ba:	f000 fcef 	bl	8008e9c <__assert_func>
 80084be:	2301      	movs	r3, #1
 80084c0:	6144      	str	r4, [r0, #20]
 80084c2:	6103      	str	r3, [r0, #16]
 80084c4:	bd10      	pop	{r4, pc}
 80084c6:	bf00      	nop
 80084c8:	080092c7 	.word	0x080092c7
 80084cc:	08009338 	.word	0x08009338

080084d0 <__multiply>:
 80084d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d4:	4614      	mov	r4, r2
 80084d6:	690a      	ldr	r2, [r1, #16]
 80084d8:	6923      	ldr	r3, [r4, #16]
 80084da:	429a      	cmp	r2, r3
 80084dc:	bfb8      	it	lt
 80084de:	460b      	movlt	r3, r1
 80084e0:	460d      	mov	r5, r1
 80084e2:	bfbc      	itt	lt
 80084e4:	4625      	movlt	r5, r4
 80084e6:	461c      	movlt	r4, r3
 80084e8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80084ec:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80084f0:	68ab      	ldr	r3, [r5, #8]
 80084f2:	6869      	ldr	r1, [r5, #4]
 80084f4:	eb0a 0709 	add.w	r7, sl, r9
 80084f8:	42bb      	cmp	r3, r7
 80084fa:	b085      	sub	sp, #20
 80084fc:	bfb8      	it	lt
 80084fe:	3101      	addlt	r1, #1
 8008500:	f7ff fed4 	bl	80082ac <_Balloc>
 8008504:	b930      	cbnz	r0, 8008514 <__multiply+0x44>
 8008506:	4602      	mov	r2, r0
 8008508:	4b42      	ldr	r3, [pc, #264]	; (8008614 <__multiply+0x144>)
 800850a:	4843      	ldr	r0, [pc, #268]	; (8008618 <__multiply+0x148>)
 800850c:	f240 115d 	movw	r1, #349	; 0x15d
 8008510:	f000 fcc4 	bl	8008e9c <__assert_func>
 8008514:	f100 0614 	add.w	r6, r0, #20
 8008518:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800851c:	4633      	mov	r3, r6
 800851e:	2200      	movs	r2, #0
 8008520:	4543      	cmp	r3, r8
 8008522:	d31e      	bcc.n	8008562 <__multiply+0x92>
 8008524:	f105 0c14 	add.w	ip, r5, #20
 8008528:	f104 0314 	add.w	r3, r4, #20
 800852c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008530:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008534:	9202      	str	r2, [sp, #8]
 8008536:	ebac 0205 	sub.w	r2, ip, r5
 800853a:	3a15      	subs	r2, #21
 800853c:	f022 0203 	bic.w	r2, r2, #3
 8008540:	3204      	adds	r2, #4
 8008542:	f105 0115 	add.w	r1, r5, #21
 8008546:	458c      	cmp	ip, r1
 8008548:	bf38      	it	cc
 800854a:	2204      	movcc	r2, #4
 800854c:	9201      	str	r2, [sp, #4]
 800854e:	9a02      	ldr	r2, [sp, #8]
 8008550:	9303      	str	r3, [sp, #12]
 8008552:	429a      	cmp	r2, r3
 8008554:	d808      	bhi.n	8008568 <__multiply+0x98>
 8008556:	2f00      	cmp	r7, #0
 8008558:	dc55      	bgt.n	8008606 <__multiply+0x136>
 800855a:	6107      	str	r7, [r0, #16]
 800855c:	b005      	add	sp, #20
 800855e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008562:	f843 2b04 	str.w	r2, [r3], #4
 8008566:	e7db      	b.n	8008520 <__multiply+0x50>
 8008568:	f8b3 a000 	ldrh.w	sl, [r3]
 800856c:	f1ba 0f00 	cmp.w	sl, #0
 8008570:	d020      	beq.n	80085b4 <__multiply+0xe4>
 8008572:	f105 0e14 	add.w	lr, r5, #20
 8008576:	46b1      	mov	r9, r6
 8008578:	2200      	movs	r2, #0
 800857a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800857e:	f8d9 b000 	ldr.w	fp, [r9]
 8008582:	b2a1      	uxth	r1, r4
 8008584:	fa1f fb8b 	uxth.w	fp, fp
 8008588:	fb0a b101 	mla	r1, sl, r1, fp
 800858c:	4411      	add	r1, r2
 800858e:	f8d9 2000 	ldr.w	r2, [r9]
 8008592:	0c24      	lsrs	r4, r4, #16
 8008594:	0c12      	lsrs	r2, r2, #16
 8008596:	fb0a 2404 	mla	r4, sl, r4, r2
 800859a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800859e:	b289      	uxth	r1, r1
 80085a0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80085a4:	45f4      	cmp	ip, lr
 80085a6:	f849 1b04 	str.w	r1, [r9], #4
 80085aa:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80085ae:	d8e4      	bhi.n	800857a <__multiply+0xaa>
 80085b0:	9901      	ldr	r1, [sp, #4]
 80085b2:	5072      	str	r2, [r6, r1]
 80085b4:	9a03      	ldr	r2, [sp, #12]
 80085b6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80085ba:	3304      	adds	r3, #4
 80085bc:	f1b9 0f00 	cmp.w	r9, #0
 80085c0:	d01f      	beq.n	8008602 <__multiply+0x132>
 80085c2:	6834      	ldr	r4, [r6, #0]
 80085c4:	f105 0114 	add.w	r1, r5, #20
 80085c8:	46b6      	mov	lr, r6
 80085ca:	f04f 0a00 	mov.w	sl, #0
 80085ce:	880a      	ldrh	r2, [r1, #0]
 80085d0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80085d4:	fb09 b202 	mla	r2, r9, r2, fp
 80085d8:	4492      	add	sl, r2
 80085da:	b2a4      	uxth	r4, r4
 80085dc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80085e0:	f84e 4b04 	str.w	r4, [lr], #4
 80085e4:	f851 4b04 	ldr.w	r4, [r1], #4
 80085e8:	f8be 2000 	ldrh.w	r2, [lr]
 80085ec:	0c24      	lsrs	r4, r4, #16
 80085ee:	fb09 2404 	mla	r4, r9, r4, r2
 80085f2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80085f6:	458c      	cmp	ip, r1
 80085f8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80085fc:	d8e7      	bhi.n	80085ce <__multiply+0xfe>
 80085fe:	9a01      	ldr	r2, [sp, #4]
 8008600:	50b4      	str	r4, [r6, r2]
 8008602:	3604      	adds	r6, #4
 8008604:	e7a3      	b.n	800854e <__multiply+0x7e>
 8008606:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800860a:	2b00      	cmp	r3, #0
 800860c:	d1a5      	bne.n	800855a <__multiply+0x8a>
 800860e:	3f01      	subs	r7, #1
 8008610:	e7a1      	b.n	8008556 <__multiply+0x86>
 8008612:	bf00      	nop
 8008614:	080092c7 	.word	0x080092c7
 8008618:	08009338 	.word	0x08009338

0800861c <__pow5mult>:
 800861c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008620:	4615      	mov	r5, r2
 8008622:	f012 0203 	ands.w	r2, r2, #3
 8008626:	4606      	mov	r6, r0
 8008628:	460f      	mov	r7, r1
 800862a:	d007      	beq.n	800863c <__pow5mult+0x20>
 800862c:	4c25      	ldr	r4, [pc, #148]	; (80086c4 <__pow5mult+0xa8>)
 800862e:	3a01      	subs	r2, #1
 8008630:	2300      	movs	r3, #0
 8008632:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008636:	f7ff fe9b 	bl	8008370 <__multadd>
 800863a:	4607      	mov	r7, r0
 800863c:	10ad      	asrs	r5, r5, #2
 800863e:	d03d      	beq.n	80086bc <__pow5mult+0xa0>
 8008640:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008642:	b97c      	cbnz	r4, 8008664 <__pow5mult+0x48>
 8008644:	2010      	movs	r0, #16
 8008646:	f7ff fe1b 	bl	8008280 <malloc>
 800864a:	4602      	mov	r2, r0
 800864c:	6270      	str	r0, [r6, #36]	; 0x24
 800864e:	b928      	cbnz	r0, 800865c <__pow5mult+0x40>
 8008650:	4b1d      	ldr	r3, [pc, #116]	; (80086c8 <__pow5mult+0xac>)
 8008652:	481e      	ldr	r0, [pc, #120]	; (80086cc <__pow5mult+0xb0>)
 8008654:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008658:	f000 fc20 	bl	8008e9c <__assert_func>
 800865c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008660:	6004      	str	r4, [r0, #0]
 8008662:	60c4      	str	r4, [r0, #12]
 8008664:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008668:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800866c:	b94c      	cbnz	r4, 8008682 <__pow5mult+0x66>
 800866e:	f240 2171 	movw	r1, #625	; 0x271
 8008672:	4630      	mov	r0, r6
 8008674:	f7ff ff16 	bl	80084a4 <__i2b>
 8008678:	2300      	movs	r3, #0
 800867a:	f8c8 0008 	str.w	r0, [r8, #8]
 800867e:	4604      	mov	r4, r0
 8008680:	6003      	str	r3, [r0, #0]
 8008682:	f04f 0900 	mov.w	r9, #0
 8008686:	07eb      	lsls	r3, r5, #31
 8008688:	d50a      	bpl.n	80086a0 <__pow5mult+0x84>
 800868a:	4639      	mov	r1, r7
 800868c:	4622      	mov	r2, r4
 800868e:	4630      	mov	r0, r6
 8008690:	f7ff ff1e 	bl	80084d0 <__multiply>
 8008694:	4639      	mov	r1, r7
 8008696:	4680      	mov	r8, r0
 8008698:	4630      	mov	r0, r6
 800869a:	f7ff fe47 	bl	800832c <_Bfree>
 800869e:	4647      	mov	r7, r8
 80086a0:	106d      	asrs	r5, r5, #1
 80086a2:	d00b      	beq.n	80086bc <__pow5mult+0xa0>
 80086a4:	6820      	ldr	r0, [r4, #0]
 80086a6:	b938      	cbnz	r0, 80086b8 <__pow5mult+0x9c>
 80086a8:	4622      	mov	r2, r4
 80086aa:	4621      	mov	r1, r4
 80086ac:	4630      	mov	r0, r6
 80086ae:	f7ff ff0f 	bl	80084d0 <__multiply>
 80086b2:	6020      	str	r0, [r4, #0]
 80086b4:	f8c0 9000 	str.w	r9, [r0]
 80086b8:	4604      	mov	r4, r0
 80086ba:	e7e4      	b.n	8008686 <__pow5mult+0x6a>
 80086bc:	4638      	mov	r0, r7
 80086be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086c2:	bf00      	nop
 80086c4:	08009488 	.word	0x08009488
 80086c8:	08009251 	.word	0x08009251
 80086cc:	08009338 	.word	0x08009338

080086d0 <__lshift>:
 80086d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086d4:	460c      	mov	r4, r1
 80086d6:	6849      	ldr	r1, [r1, #4]
 80086d8:	6923      	ldr	r3, [r4, #16]
 80086da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80086de:	68a3      	ldr	r3, [r4, #8]
 80086e0:	4607      	mov	r7, r0
 80086e2:	4691      	mov	r9, r2
 80086e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80086e8:	f108 0601 	add.w	r6, r8, #1
 80086ec:	42b3      	cmp	r3, r6
 80086ee:	db0b      	blt.n	8008708 <__lshift+0x38>
 80086f0:	4638      	mov	r0, r7
 80086f2:	f7ff fddb 	bl	80082ac <_Balloc>
 80086f6:	4605      	mov	r5, r0
 80086f8:	b948      	cbnz	r0, 800870e <__lshift+0x3e>
 80086fa:	4602      	mov	r2, r0
 80086fc:	4b28      	ldr	r3, [pc, #160]	; (80087a0 <__lshift+0xd0>)
 80086fe:	4829      	ldr	r0, [pc, #164]	; (80087a4 <__lshift+0xd4>)
 8008700:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008704:	f000 fbca 	bl	8008e9c <__assert_func>
 8008708:	3101      	adds	r1, #1
 800870a:	005b      	lsls	r3, r3, #1
 800870c:	e7ee      	b.n	80086ec <__lshift+0x1c>
 800870e:	2300      	movs	r3, #0
 8008710:	f100 0114 	add.w	r1, r0, #20
 8008714:	f100 0210 	add.w	r2, r0, #16
 8008718:	4618      	mov	r0, r3
 800871a:	4553      	cmp	r3, sl
 800871c:	db33      	blt.n	8008786 <__lshift+0xb6>
 800871e:	6920      	ldr	r0, [r4, #16]
 8008720:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008724:	f104 0314 	add.w	r3, r4, #20
 8008728:	f019 091f 	ands.w	r9, r9, #31
 800872c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008730:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008734:	d02b      	beq.n	800878e <__lshift+0xbe>
 8008736:	f1c9 0e20 	rsb	lr, r9, #32
 800873a:	468a      	mov	sl, r1
 800873c:	2200      	movs	r2, #0
 800873e:	6818      	ldr	r0, [r3, #0]
 8008740:	fa00 f009 	lsl.w	r0, r0, r9
 8008744:	4302      	orrs	r2, r0
 8008746:	f84a 2b04 	str.w	r2, [sl], #4
 800874a:	f853 2b04 	ldr.w	r2, [r3], #4
 800874e:	459c      	cmp	ip, r3
 8008750:	fa22 f20e 	lsr.w	r2, r2, lr
 8008754:	d8f3      	bhi.n	800873e <__lshift+0x6e>
 8008756:	ebac 0304 	sub.w	r3, ip, r4
 800875a:	3b15      	subs	r3, #21
 800875c:	f023 0303 	bic.w	r3, r3, #3
 8008760:	3304      	adds	r3, #4
 8008762:	f104 0015 	add.w	r0, r4, #21
 8008766:	4584      	cmp	ip, r0
 8008768:	bf38      	it	cc
 800876a:	2304      	movcc	r3, #4
 800876c:	50ca      	str	r2, [r1, r3]
 800876e:	b10a      	cbz	r2, 8008774 <__lshift+0xa4>
 8008770:	f108 0602 	add.w	r6, r8, #2
 8008774:	3e01      	subs	r6, #1
 8008776:	4638      	mov	r0, r7
 8008778:	612e      	str	r6, [r5, #16]
 800877a:	4621      	mov	r1, r4
 800877c:	f7ff fdd6 	bl	800832c <_Bfree>
 8008780:	4628      	mov	r0, r5
 8008782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008786:	f842 0f04 	str.w	r0, [r2, #4]!
 800878a:	3301      	adds	r3, #1
 800878c:	e7c5      	b.n	800871a <__lshift+0x4a>
 800878e:	3904      	subs	r1, #4
 8008790:	f853 2b04 	ldr.w	r2, [r3], #4
 8008794:	f841 2f04 	str.w	r2, [r1, #4]!
 8008798:	459c      	cmp	ip, r3
 800879a:	d8f9      	bhi.n	8008790 <__lshift+0xc0>
 800879c:	e7ea      	b.n	8008774 <__lshift+0xa4>
 800879e:	bf00      	nop
 80087a0:	080092c7 	.word	0x080092c7
 80087a4:	08009338 	.word	0x08009338

080087a8 <__mcmp>:
 80087a8:	b530      	push	{r4, r5, lr}
 80087aa:	6902      	ldr	r2, [r0, #16]
 80087ac:	690c      	ldr	r4, [r1, #16]
 80087ae:	1b12      	subs	r2, r2, r4
 80087b0:	d10e      	bne.n	80087d0 <__mcmp+0x28>
 80087b2:	f100 0314 	add.w	r3, r0, #20
 80087b6:	3114      	adds	r1, #20
 80087b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80087bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80087c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80087c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80087c8:	42a5      	cmp	r5, r4
 80087ca:	d003      	beq.n	80087d4 <__mcmp+0x2c>
 80087cc:	d305      	bcc.n	80087da <__mcmp+0x32>
 80087ce:	2201      	movs	r2, #1
 80087d0:	4610      	mov	r0, r2
 80087d2:	bd30      	pop	{r4, r5, pc}
 80087d4:	4283      	cmp	r3, r0
 80087d6:	d3f3      	bcc.n	80087c0 <__mcmp+0x18>
 80087d8:	e7fa      	b.n	80087d0 <__mcmp+0x28>
 80087da:	f04f 32ff 	mov.w	r2, #4294967295
 80087de:	e7f7      	b.n	80087d0 <__mcmp+0x28>

080087e0 <__mdiff>:
 80087e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e4:	460c      	mov	r4, r1
 80087e6:	4606      	mov	r6, r0
 80087e8:	4611      	mov	r1, r2
 80087ea:	4620      	mov	r0, r4
 80087ec:	4617      	mov	r7, r2
 80087ee:	f7ff ffdb 	bl	80087a8 <__mcmp>
 80087f2:	1e05      	subs	r5, r0, #0
 80087f4:	d110      	bne.n	8008818 <__mdiff+0x38>
 80087f6:	4629      	mov	r1, r5
 80087f8:	4630      	mov	r0, r6
 80087fa:	f7ff fd57 	bl	80082ac <_Balloc>
 80087fe:	b930      	cbnz	r0, 800880e <__mdiff+0x2e>
 8008800:	4b39      	ldr	r3, [pc, #228]	; (80088e8 <__mdiff+0x108>)
 8008802:	4602      	mov	r2, r0
 8008804:	f240 2132 	movw	r1, #562	; 0x232
 8008808:	4838      	ldr	r0, [pc, #224]	; (80088ec <__mdiff+0x10c>)
 800880a:	f000 fb47 	bl	8008e9c <__assert_func>
 800880e:	2301      	movs	r3, #1
 8008810:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008814:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008818:	bfa4      	itt	ge
 800881a:	463b      	movge	r3, r7
 800881c:	4627      	movge	r7, r4
 800881e:	4630      	mov	r0, r6
 8008820:	6879      	ldr	r1, [r7, #4]
 8008822:	bfa6      	itte	ge
 8008824:	461c      	movge	r4, r3
 8008826:	2500      	movge	r5, #0
 8008828:	2501      	movlt	r5, #1
 800882a:	f7ff fd3f 	bl	80082ac <_Balloc>
 800882e:	b920      	cbnz	r0, 800883a <__mdiff+0x5a>
 8008830:	4b2d      	ldr	r3, [pc, #180]	; (80088e8 <__mdiff+0x108>)
 8008832:	4602      	mov	r2, r0
 8008834:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008838:	e7e6      	b.n	8008808 <__mdiff+0x28>
 800883a:	693e      	ldr	r6, [r7, #16]
 800883c:	60c5      	str	r5, [r0, #12]
 800883e:	6925      	ldr	r5, [r4, #16]
 8008840:	f107 0114 	add.w	r1, r7, #20
 8008844:	f104 0914 	add.w	r9, r4, #20
 8008848:	f100 0e14 	add.w	lr, r0, #20
 800884c:	f107 0210 	add.w	r2, r7, #16
 8008850:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008854:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008858:	46f2      	mov	sl, lr
 800885a:	2700      	movs	r7, #0
 800885c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008860:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008864:	fa1f f883 	uxth.w	r8, r3
 8008868:	fa17 f78b 	uxtah	r7, r7, fp
 800886c:	0c1b      	lsrs	r3, r3, #16
 800886e:	eba7 0808 	sub.w	r8, r7, r8
 8008872:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008876:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800887a:	fa1f f888 	uxth.w	r8, r8
 800887e:	141f      	asrs	r7, r3, #16
 8008880:	454d      	cmp	r5, r9
 8008882:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008886:	f84a 3b04 	str.w	r3, [sl], #4
 800888a:	d8e7      	bhi.n	800885c <__mdiff+0x7c>
 800888c:	1b2b      	subs	r3, r5, r4
 800888e:	3b15      	subs	r3, #21
 8008890:	f023 0303 	bic.w	r3, r3, #3
 8008894:	3304      	adds	r3, #4
 8008896:	3415      	adds	r4, #21
 8008898:	42a5      	cmp	r5, r4
 800889a:	bf38      	it	cc
 800889c:	2304      	movcc	r3, #4
 800889e:	4419      	add	r1, r3
 80088a0:	4473      	add	r3, lr
 80088a2:	469e      	mov	lr, r3
 80088a4:	460d      	mov	r5, r1
 80088a6:	4565      	cmp	r5, ip
 80088a8:	d30e      	bcc.n	80088c8 <__mdiff+0xe8>
 80088aa:	f10c 0203 	add.w	r2, ip, #3
 80088ae:	1a52      	subs	r2, r2, r1
 80088b0:	f022 0203 	bic.w	r2, r2, #3
 80088b4:	3903      	subs	r1, #3
 80088b6:	458c      	cmp	ip, r1
 80088b8:	bf38      	it	cc
 80088ba:	2200      	movcc	r2, #0
 80088bc:	441a      	add	r2, r3
 80088be:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80088c2:	b17b      	cbz	r3, 80088e4 <__mdiff+0x104>
 80088c4:	6106      	str	r6, [r0, #16]
 80088c6:	e7a5      	b.n	8008814 <__mdiff+0x34>
 80088c8:	f855 8b04 	ldr.w	r8, [r5], #4
 80088cc:	fa17 f488 	uxtah	r4, r7, r8
 80088d0:	1422      	asrs	r2, r4, #16
 80088d2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80088d6:	b2a4      	uxth	r4, r4
 80088d8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80088dc:	f84e 4b04 	str.w	r4, [lr], #4
 80088e0:	1417      	asrs	r7, r2, #16
 80088e2:	e7e0      	b.n	80088a6 <__mdiff+0xc6>
 80088e4:	3e01      	subs	r6, #1
 80088e6:	e7ea      	b.n	80088be <__mdiff+0xde>
 80088e8:	080092c7 	.word	0x080092c7
 80088ec:	08009338 	.word	0x08009338

080088f0 <__d2b>:
 80088f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80088f4:	4689      	mov	r9, r1
 80088f6:	2101      	movs	r1, #1
 80088f8:	ec57 6b10 	vmov	r6, r7, d0
 80088fc:	4690      	mov	r8, r2
 80088fe:	f7ff fcd5 	bl	80082ac <_Balloc>
 8008902:	4604      	mov	r4, r0
 8008904:	b930      	cbnz	r0, 8008914 <__d2b+0x24>
 8008906:	4602      	mov	r2, r0
 8008908:	4b25      	ldr	r3, [pc, #148]	; (80089a0 <__d2b+0xb0>)
 800890a:	4826      	ldr	r0, [pc, #152]	; (80089a4 <__d2b+0xb4>)
 800890c:	f240 310a 	movw	r1, #778	; 0x30a
 8008910:	f000 fac4 	bl	8008e9c <__assert_func>
 8008914:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008918:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800891c:	bb35      	cbnz	r5, 800896c <__d2b+0x7c>
 800891e:	2e00      	cmp	r6, #0
 8008920:	9301      	str	r3, [sp, #4]
 8008922:	d028      	beq.n	8008976 <__d2b+0x86>
 8008924:	4668      	mov	r0, sp
 8008926:	9600      	str	r6, [sp, #0]
 8008928:	f7ff fd8c 	bl	8008444 <__lo0bits>
 800892c:	9900      	ldr	r1, [sp, #0]
 800892e:	b300      	cbz	r0, 8008972 <__d2b+0x82>
 8008930:	9a01      	ldr	r2, [sp, #4]
 8008932:	f1c0 0320 	rsb	r3, r0, #32
 8008936:	fa02 f303 	lsl.w	r3, r2, r3
 800893a:	430b      	orrs	r3, r1
 800893c:	40c2      	lsrs	r2, r0
 800893e:	6163      	str	r3, [r4, #20]
 8008940:	9201      	str	r2, [sp, #4]
 8008942:	9b01      	ldr	r3, [sp, #4]
 8008944:	61a3      	str	r3, [r4, #24]
 8008946:	2b00      	cmp	r3, #0
 8008948:	bf14      	ite	ne
 800894a:	2202      	movne	r2, #2
 800894c:	2201      	moveq	r2, #1
 800894e:	6122      	str	r2, [r4, #16]
 8008950:	b1d5      	cbz	r5, 8008988 <__d2b+0x98>
 8008952:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008956:	4405      	add	r5, r0
 8008958:	f8c9 5000 	str.w	r5, [r9]
 800895c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008960:	f8c8 0000 	str.w	r0, [r8]
 8008964:	4620      	mov	r0, r4
 8008966:	b003      	add	sp, #12
 8008968:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800896c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008970:	e7d5      	b.n	800891e <__d2b+0x2e>
 8008972:	6161      	str	r1, [r4, #20]
 8008974:	e7e5      	b.n	8008942 <__d2b+0x52>
 8008976:	a801      	add	r0, sp, #4
 8008978:	f7ff fd64 	bl	8008444 <__lo0bits>
 800897c:	9b01      	ldr	r3, [sp, #4]
 800897e:	6163      	str	r3, [r4, #20]
 8008980:	2201      	movs	r2, #1
 8008982:	6122      	str	r2, [r4, #16]
 8008984:	3020      	adds	r0, #32
 8008986:	e7e3      	b.n	8008950 <__d2b+0x60>
 8008988:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800898c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008990:	f8c9 0000 	str.w	r0, [r9]
 8008994:	6918      	ldr	r0, [r3, #16]
 8008996:	f7ff fd35 	bl	8008404 <__hi0bits>
 800899a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800899e:	e7df      	b.n	8008960 <__d2b+0x70>
 80089a0:	080092c7 	.word	0x080092c7
 80089a4:	08009338 	.word	0x08009338

080089a8 <_calloc_r>:
 80089a8:	b513      	push	{r0, r1, r4, lr}
 80089aa:	434a      	muls	r2, r1
 80089ac:	4611      	mov	r1, r2
 80089ae:	9201      	str	r2, [sp, #4]
 80089b0:	f000 f85a 	bl	8008a68 <_malloc_r>
 80089b4:	4604      	mov	r4, r0
 80089b6:	b118      	cbz	r0, 80089c0 <_calloc_r+0x18>
 80089b8:	9a01      	ldr	r2, [sp, #4]
 80089ba:	2100      	movs	r1, #0
 80089bc:	f7fd fd3c 	bl	8006438 <memset>
 80089c0:	4620      	mov	r0, r4
 80089c2:	b002      	add	sp, #8
 80089c4:	bd10      	pop	{r4, pc}
	...

080089c8 <_free_r>:
 80089c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089ca:	2900      	cmp	r1, #0
 80089cc:	d048      	beq.n	8008a60 <_free_r+0x98>
 80089ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089d2:	9001      	str	r0, [sp, #4]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f1a1 0404 	sub.w	r4, r1, #4
 80089da:	bfb8      	it	lt
 80089dc:	18e4      	addlt	r4, r4, r3
 80089de:	f000 fae3 	bl	8008fa8 <__malloc_lock>
 80089e2:	4a20      	ldr	r2, [pc, #128]	; (8008a64 <_free_r+0x9c>)
 80089e4:	9801      	ldr	r0, [sp, #4]
 80089e6:	6813      	ldr	r3, [r2, #0]
 80089e8:	4615      	mov	r5, r2
 80089ea:	b933      	cbnz	r3, 80089fa <_free_r+0x32>
 80089ec:	6063      	str	r3, [r4, #4]
 80089ee:	6014      	str	r4, [r2, #0]
 80089f0:	b003      	add	sp, #12
 80089f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80089f6:	f000 badd 	b.w	8008fb4 <__malloc_unlock>
 80089fa:	42a3      	cmp	r3, r4
 80089fc:	d90b      	bls.n	8008a16 <_free_r+0x4e>
 80089fe:	6821      	ldr	r1, [r4, #0]
 8008a00:	1862      	adds	r2, r4, r1
 8008a02:	4293      	cmp	r3, r2
 8008a04:	bf04      	itt	eq
 8008a06:	681a      	ldreq	r2, [r3, #0]
 8008a08:	685b      	ldreq	r3, [r3, #4]
 8008a0a:	6063      	str	r3, [r4, #4]
 8008a0c:	bf04      	itt	eq
 8008a0e:	1852      	addeq	r2, r2, r1
 8008a10:	6022      	streq	r2, [r4, #0]
 8008a12:	602c      	str	r4, [r5, #0]
 8008a14:	e7ec      	b.n	80089f0 <_free_r+0x28>
 8008a16:	461a      	mov	r2, r3
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	b10b      	cbz	r3, 8008a20 <_free_r+0x58>
 8008a1c:	42a3      	cmp	r3, r4
 8008a1e:	d9fa      	bls.n	8008a16 <_free_r+0x4e>
 8008a20:	6811      	ldr	r1, [r2, #0]
 8008a22:	1855      	adds	r5, r2, r1
 8008a24:	42a5      	cmp	r5, r4
 8008a26:	d10b      	bne.n	8008a40 <_free_r+0x78>
 8008a28:	6824      	ldr	r4, [r4, #0]
 8008a2a:	4421      	add	r1, r4
 8008a2c:	1854      	adds	r4, r2, r1
 8008a2e:	42a3      	cmp	r3, r4
 8008a30:	6011      	str	r1, [r2, #0]
 8008a32:	d1dd      	bne.n	80089f0 <_free_r+0x28>
 8008a34:	681c      	ldr	r4, [r3, #0]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	6053      	str	r3, [r2, #4]
 8008a3a:	4421      	add	r1, r4
 8008a3c:	6011      	str	r1, [r2, #0]
 8008a3e:	e7d7      	b.n	80089f0 <_free_r+0x28>
 8008a40:	d902      	bls.n	8008a48 <_free_r+0x80>
 8008a42:	230c      	movs	r3, #12
 8008a44:	6003      	str	r3, [r0, #0]
 8008a46:	e7d3      	b.n	80089f0 <_free_r+0x28>
 8008a48:	6825      	ldr	r5, [r4, #0]
 8008a4a:	1961      	adds	r1, r4, r5
 8008a4c:	428b      	cmp	r3, r1
 8008a4e:	bf04      	itt	eq
 8008a50:	6819      	ldreq	r1, [r3, #0]
 8008a52:	685b      	ldreq	r3, [r3, #4]
 8008a54:	6063      	str	r3, [r4, #4]
 8008a56:	bf04      	itt	eq
 8008a58:	1949      	addeq	r1, r1, r5
 8008a5a:	6021      	streq	r1, [r4, #0]
 8008a5c:	6054      	str	r4, [r2, #4]
 8008a5e:	e7c7      	b.n	80089f0 <_free_r+0x28>
 8008a60:	b003      	add	sp, #12
 8008a62:	bd30      	pop	{r4, r5, pc}
 8008a64:	20000208 	.word	0x20000208

08008a68 <_malloc_r>:
 8008a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a6a:	1ccd      	adds	r5, r1, #3
 8008a6c:	f025 0503 	bic.w	r5, r5, #3
 8008a70:	3508      	adds	r5, #8
 8008a72:	2d0c      	cmp	r5, #12
 8008a74:	bf38      	it	cc
 8008a76:	250c      	movcc	r5, #12
 8008a78:	2d00      	cmp	r5, #0
 8008a7a:	4606      	mov	r6, r0
 8008a7c:	db01      	blt.n	8008a82 <_malloc_r+0x1a>
 8008a7e:	42a9      	cmp	r1, r5
 8008a80:	d903      	bls.n	8008a8a <_malloc_r+0x22>
 8008a82:	230c      	movs	r3, #12
 8008a84:	6033      	str	r3, [r6, #0]
 8008a86:	2000      	movs	r0, #0
 8008a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a8a:	f000 fa8d 	bl	8008fa8 <__malloc_lock>
 8008a8e:	4921      	ldr	r1, [pc, #132]	; (8008b14 <_malloc_r+0xac>)
 8008a90:	680a      	ldr	r2, [r1, #0]
 8008a92:	4614      	mov	r4, r2
 8008a94:	b99c      	cbnz	r4, 8008abe <_malloc_r+0x56>
 8008a96:	4f20      	ldr	r7, [pc, #128]	; (8008b18 <_malloc_r+0xb0>)
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	b923      	cbnz	r3, 8008aa6 <_malloc_r+0x3e>
 8008a9c:	4621      	mov	r1, r4
 8008a9e:	4630      	mov	r0, r6
 8008aa0:	f000 f996 	bl	8008dd0 <_sbrk_r>
 8008aa4:	6038      	str	r0, [r7, #0]
 8008aa6:	4629      	mov	r1, r5
 8008aa8:	4630      	mov	r0, r6
 8008aaa:	f000 f991 	bl	8008dd0 <_sbrk_r>
 8008aae:	1c43      	adds	r3, r0, #1
 8008ab0:	d123      	bne.n	8008afa <_malloc_r+0x92>
 8008ab2:	230c      	movs	r3, #12
 8008ab4:	6033      	str	r3, [r6, #0]
 8008ab6:	4630      	mov	r0, r6
 8008ab8:	f000 fa7c 	bl	8008fb4 <__malloc_unlock>
 8008abc:	e7e3      	b.n	8008a86 <_malloc_r+0x1e>
 8008abe:	6823      	ldr	r3, [r4, #0]
 8008ac0:	1b5b      	subs	r3, r3, r5
 8008ac2:	d417      	bmi.n	8008af4 <_malloc_r+0x8c>
 8008ac4:	2b0b      	cmp	r3, #11
 8008ac6:	d903      	bls.n	8008ad0 <_malloc_r+0x68>
 8008ac8:	6023      	str	r3, [r4, #0]
 8008aca:	441c      	add	r4, r3
 8008acc:	6025      	str	r5, [r4, #0]
 8008ace:	e004      	b.n	8008ada <_malloc_r+0x72>
 8008ad0:	6863      	ldr	r3, [r4, #4]
 8008ad2:	42a2      	cmp	r2, r4
 8008ad4:	bf0c      	ite	eq
 8008ad6:	600b      	streq	r3, [r1, #0]
 8008ad8:	6053      	strne	r3, [r2, #4]
 8008ada:	4630      	mov	r0, r6
 8008adc:	f000 fa6a 	bl	8008fb4 <__malloc_unlock>
 8008ae0:	f104 000b 	add.w	r0, r4, #11
 8008ae4:	1d23      	adds	r3, r4, #4
 8008ae6:	f020 0007 	bic.w	r0, r0, #7
 8008aea:	1ac2      	subs	r2, r0, r3
 8008aec:	d0cc      	beq.n	8008a88 <_malloc_r+0x20>
 8008aee:	1a1b      	subs	r3, r3, r0
 8008af0:	50a3      	str	r3, [r4, r2]
 8008af2:	e7c9      	b.n	8008a88 <_malloc_r+0x20>
 8008af4:	4622      	mov	r2, r4
 8008af6:	6864      	ldr	r4, [r4, #4]
 8008af8:	e7cc      	b.n	8008a94 <_malloc_r+0x2c>
 8008afa:	1cc4      	adds	r4, r0, #3
 8008afc:	f024 0403 	bic.w	r4, r4, #3
 8008b00:	42a0      	cmp	r0, r4
 8008b02:	d0e3      	beq.n	8008acc <_malloc_r+0x64>
 8008b04:	1a21      	subs	r1, r4, r0
 8008b06:	4630      	mov	r0, r6
 8008b08:	f000 f962 	bl	8008dd0 <_sbrk_r>
 8008b0c:	3001      	adds	r0, #1
 8008b0e:	d1dd      	bne.n	8008acc <_malloc_r+0x64>
 8008b10:	e7cf      	b.n	8008ab2 <_malloc_r+0x4a>
 8008b12:	bf00      	nop
 8008b14:	20000208 	.word	0x20000208
 8008b18:	2000020c 	.word	0x2000020c

08008b1c <__sfputc_r>:
 8008b1c:	6893      	ldr	r3, [r2, #8]
 8008b1e:	3b01      	subs	r3, #1
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	b410      	push	{r4}
 8008b24:	6093      	str	r3, [r2, #8]
 8008b26:	da08      	bge.n	8008b3a <__sfputc_r+0x1e>
 8008b28:	6994      	ldr	r4, [r2, #24]
 8008b2a:	42a3      	cmp	r3, r4
 8008b2c:	db01      	blt.n	8008b32 <__sfputc_r+0x16>
 8008b2e:	290a      	cmp	r1, #10
 8008b30:	d103      	bne.n	8008b3a <__sfputc_r+0x1e>
 8008b32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b36:	f7fe ba45 	b.w	8006fc4 <__swbuf_r>
 8008b3a:	6813      	ldr	r3, [r2, #0]
 8008b3c:	1c58      	adds	r0, r3, #1
 8008b3e:	6010      	str	r0, [r2, #0]
 8008b40:	7019      	strb	r1, [r3, #0]
 8008b42:	4608      	mov	r0, r1
 8008b44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b48:	4770      	bx	lr

08008b4a <__sfputs_r>:
 8008b4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b4c:	4606      	mov	r6, r0
 8008b4e:	460f      	mov	r7, r1
 8008b50:	4614      	mov	r4, r2
 8008b52:	18d5      	adds	r5, r2, r3
 8008b54:	42ac      	cmp	r4, r5
 8008b56:	d101      	bne.n	8008b5c <__sfputs_r+0x12>
 8008b58:	2000      	movs	r0, #0
 8008b5a:	e007      	b.n	8008b6c <__sfputs_r+0x22>
 8008b5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b60:	463a      	mov	r2, r7
 8008b62:	4630      	mov	r0, r6
 8008b64:	f7ff ffda 	bl	8008b1c <__sfputc_r>
 8008b68:	1c43      	adds	r3, r0, #1
 8008b6a:	d1f3      	bne.n	8008b54 <__sfputs_r+0xa>
 8008b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008b70 <_vfiprintf_r>:
 8008b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b74:	460d      	mov	r5, r1
 8008b76:	b09d      	sub	sp, #116	; 0x74
 8008b78:	4614      	mov	r4, r2
 8008b7a:	4698      	mov	r8, r3
 8008b7c:	4606      	mov	r6, r0
 8008b7e:	b118      	cbz	r0, 8008b88 <_vfiprintf_r+0x18>
 8008b80:	6983      	ldr	r3, [r0, #24]
 8008b82:	b90b      	cbnz	r3, 8008b88 <_vfiprintf_r+0x18>
 8008b84:	f7ff fa72 	bl	800806c <__sinit>
 8008b88:	4b89      	ldr	r3, [pc, #548]	; (8008db0 <_vfiprintf_r+0x240>)
 8008b8a:	429d      	cmp	r5, r3
 8008b8c:	d11b      	bne.n	8008bc6 <_vfiprintf_r+0x56>
 8008b8e:	6875      	ldr	r5, [r6, #4]
 8008b90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b92:	07d9      	lsls	r1, r3, #31
 8008b94:	d405      	bmi.n	8008ba2 <_vfiprintf_r+0x32>
 8008b96:	89ab      	ldrh	r3, [r5, #12]
 8008b98:	059a      	lsls	r2, r3, #22
 8008b9a:	d402      	bmi.n	8008ba2 <_vfiprintf_r+0x32>
 8008b9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b9e:	f7ff fb08 	bl	80081b2 <__retarget_lock_acquire_recursive>
 8008ba2:	89ab      	ldrh	r3, [r5, #12]
 8008ba4:	071b      	lsls	r3, r3, #28
 8008ba6:	d501      	bpl.n	8008bac <_vfiprintf_r+0x3c>
 8008ba8:	692b      	ldr	r3, [r5, #16]
 8008baa:	b9eb      	cbnz	r3, 8008be8 <_vfiprintf_r+0x78>
 8008bac:	4629      	mov	r1, r5
 8008bae:	4630      	mov	r0, r6
 8008bb0:	f7fe fa5a 	bl	8007068 <__swsetup_r>
 8008bb4:	b1c0      	cbz	r0, 8008be8 <_vfiprintf_r+0x78>
 8008bb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bb8:	07dc      	lsls	r4, r3, #31
 8008bba:	d50e      	bpl.n	8008bda <_vfiprintf_r+0x6a>
 8008bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc0:	b01d      	add	sp, #116	; 0x74
 8008bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bc6:	4b7b      	ldr	r3, [pc, #492]	; (8008db4 <_vfiprintf_r+0x244>)
 8008bc8:	429d      	cmp	r5, r3
 8008bca:	d101      	bne.n	8008bd0 <_vfiprintf_r+0x60>
 8008bcc:	68b5      	ldr	r5, [r6, #8]
 8008bce:	e7df      	b.n	8008b90 <_vfiprintf_r+0x20>
 8008bd0:	4b79      	ldr	r3, [pc, #484]	; (8008db8 <_vfiprintf_r+0x248>)
 8008bd2:	429d      	cmp	r5, r3
 8008bd4:	bf08      	it	eq
 8008bd6:	68f5      	ldreq	r5, [r6, #12]
 8008bd8:	e7da      	b.n	8008b90 <_vfiprintf_r+0x20>
 8008bda:	89ab      	ldrh	r3, [r5, #12]
 8008bdc:	0598      	lsls	r0, r3, #22
 8008bde:	d4ed      	bmi.n	8008bbc <_vfiprintf_r+0x4c>
 8008be0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008be2:	f7ff fae7 	bl	80081b4 <__retarget_lock_release_recursive>
 8008be6:	e7e9      	b.n	8008bbc <_vfiprintf_r+0x4c>
 8008be8:	2300      	movs	r3, #0
 8008bea:	9309      	str	r3, [sp, #36]	; 0x24
 8008bec:	2320      	movs	r3, #32
 8008bee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bf2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bf6:	2330      	movs	r3, #48	; 0x30
 8008bf8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008dbc <_vfiprintf_r+0x24c>
 8008bfc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c00:	f04f 0901 	mov.w	r9, #1
 8008c04:	4623      	mov	r3, r4
 8008c06:	469a      	mov	sl, r3
 8008c08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c0c:	b10a      	cbz	r2, 8008c12 <_vfiprintf_r+0xa2>
 8008c0e:	2a25      	cmp	r2, #37	; 0x25
 8008c10:	d1f9      	bne.n	8008c06 <_vfiprintf_r+0x96>
 8008c12:	ebba 0b04 	subs.w	fp, sl, r4
 8008c16:	d00b      	beq.n	8008c30 <_vfiprintf_r+0xc0>
 8008c18:	465b      	mov	r3, fp
 8008c1a:	4622      	mov	r2, r4
 8008c1c:	4629      	mov	r1, r5
 8008c1e:	4630      	mov	r0, r6
 8008c20:	f7ff ff93 	bl	8008b4a <__sfputs_r>
 8008c24:	3001      	adds	r0, #1
 8008c26:	f000 80aa 	beq.w	8008d7e <_vfiprintf_r+0x20e>
 8008c2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c2c:	445a      	add	r2, fp
 8008c2e:	9209      	str	r2, [sp, #36]	; 0x24
 8008c30:	f89a 3000 	ldrb.w	r3, [sl]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	f000 80a2 	beq.w	8008d7e <_vfiprintf_r+0x20e>
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c44:	f10a 0a01 	add.w	sl, sl, #1
 8008c48:	9304      	str	r3, [sp, #16]
 8008c4a:	9307      	str	r3, [sp, #28]
 8008c4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c50:	931a      	str	r3, [sp, #104]	; 0x68
 8008c52:	4654      	mov	r4, sl
 8008c54:	2205      	movs	r2, #5
 8008c56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c5a:	4858      	ldr	r0, [pc, #352]	; (8008dbc <_vfiprintf_r+0x24c>)
 8008c5c:	f7f7 fae0 	bl	8000220 <memchr>
 8008c60:	9a04      	ldr	r2, [sp, #16]
 8008c62:	b9d8      	cbnz	r0, 8008c9c <_vfiprintf_r+0x12c>
 8008c64:	06d1      	lsls	r1, r2, #27
 8008c66:	bf44      	itt	mi
 8008c68:	2320      	movmi	r3, #32
 8008c6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c6e:	0713      	lsls	r3, r2, #28
 8008c70:	bf44      	itt	mi
 8008c72:	232b      	movmi	r3, #43	; 0x2b
 8008c74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c78:	f89a 3000 	ldrb.w	r3, [sl]
 8008c7c:	2b2a      	cmp	r3, #42	; 0x2a
 8008c7e:	d015      	beq.n	8008cac <_vfiprintf_r+0x13c>
 8008c80:	9a07      	ldr	r2, [sp, #28]
 8008c82:	4654      	mov	r4, sl
 8008c84:	2000      	movs	r0, #0
 8008c86:	f04f 0c0a 	mov.w	ip, #10
 8008c8a:	4621      	mov	r1, r4
 8008c8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c90:	3b30      	subs	r3, #48	; 0x30
 8008c92:	2b09      	cmp	r3, #9
 8008c94:	d94e      	bls.n	8008d34 <_vfiprintf_r+0x1c4>
 8008c96:	b1b0      	cbz	r0, 8008cc6 <_vfiprintf_r+0x156>
 8008c98:	9207      	str	r2, [sp, #28]
 8008c9a:	e014      	b.n	8008cc6 <_vfiprintf_r+0x156>
 8008c9c:	eba0 0308 	sub.w	r3, r0, r8
 8008ca0:	fa09 f303 	lsl.w	r3, r9, r3
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	9304      	str	r3, [sp, #16]
 8008ca8:	46a2      	mov	sl, r4
 8008caa:	e7d2      	b.n	8008c52 <_vfiprintf_r+0xe2>
 8008cac:	9b03      	ldr	r3, [sp, #12]
 8008cae:	1d19      	adds	r1, r3, #4
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	9103      	str	r1, [sp, #12]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	bfbb      	ittet	lt
 8008cb8:	425b      	neglt	r3, r3
 8008cba:	f042 0202 	orrlt.w	r2, r2, #2
 8008cbe:	9307      	strge	r3, [sp, #28]
 8008cc0:	9307      	strlt	r3, [sp, #28]
 8008cc2:	bfb8      	it	lt
 8008cc4:	9204      	strlt	r2, [sp, #16]
 8008cc6:	7823      	ldrb	r3, [r4, #0]
 8008cc8:	2b2e      	cmp	r3, #46	; 0x2e
 8008cca:	d10c      	bne.n	8008ce6 <_vfiprintf_r+0x176>
 8008ccc:	7863      	ldrb	r3, [r4, #1]
 8008cce:	2b2a      	cmp	r3, #42	; 0x2a
 8008cd0:	d135      	bne.n	8008d3e <_vfiprintf_r+0x1ce>
 8008cd2:	9b03      	ldr	r3, [sp, #12]
 8008cd4:	1d1a      	adds	r2, r3, #4
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	9203      	str	r2, [sp, #12]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	bfb8      	it	lt
 8008cde:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ce2:	3402      	adds	r4, #2
 8008ce4:	9305      	str	r3, [sp, #20]
 8008ce6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008dcc <_vfiprintf_r+0x25c>
 8008cea:	7821      	ldrb	r1, [r4, #0]
 8008cec:	2203      	movs	r2, #3
 8008cee:	4650      	mov	r0, sl
 8008cf0:	f7f7 fa96 	bl	8000220 <memchr>
 8008cf4:	b140      	cbz	r0, 8008d08 <_vfiprintf_r+0x198>
 8008cf6:	2340      	movs	r3, #64	; 0x40
 8008cf8:	eba0 000a 	sub.w	r0, r0, sl
 8008cfc:	fa03 f000 	lsl.w	r0, r3, r0
 8008d00:	9b04      	ldr	r3, [sp, #16]
 8008d02:	4303      	orrs	r3, r0
 8008d04:	3401      	adds	r4, #1
 8008d06:	9304      	str	r3, [sp, #16]
 8008d08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d0c:	482c      	ldr	r0, [pc, #176]	; (8008dc0 <_vfiprintf_r+0x250>)
 8008d0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d12:	2206      	movs	r2, #6
 8008d14:	f7f7 fa84 	bl	8000220 <memchr>
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	d03f      	beq.n	8008d9c <_vfiprintf_r+0x22c>
 8008d1c:	4b29      	ldr	r3, [pc, #164]	; (8008dc4 <_vfiprintf_r+0x254>)
 8008d1e:	bb1b      	cbnz	r3, 8008d68 <_vfiprintf_r+0x1f8>
 8008d20:	9b03      	ldr	r3, [sp, #12]
 8008d22:	3307      	adds	r3, #7
 8008d24:	f023 0307 	bic.w	r3, r3, #7
 8008d28:	3308      	adds	r3, #8
 8008d2a:	9303      	str	r3, [sp, #12]
 8008d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d2e:	443b      	add	r3, r7
 8008d30:	9309      	str	r3, [sp, #36]	; 0x24
 8008d32:	e767      	b.n	8008c04 <_vfiprintf_r+0x94>
 8008d34:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d38:	460c      	mov	r4, r1
 8008d3a:	2001      	movs	r0, #1
 8008d3c:	e7a5      	b.n	8008c8a <_vfiprintf_r+0x11a>
 8008d3e:	2300      	movs	r3, #0
 8008d40:	3401      	adds	r4, #1
 8008d42:	9305      	str	r3, [sp, #20]
 8008d44:	4619      	mov	r1, r3
 8008d46:	f04f 0c0a 	mov.w	ip, #10
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d50:	3a30      	subs	r2, #48	; 0x30
 8008d52:	2a09      	cmp	r2, #9
 8008d54:	d903      	bls.n	8008d5e <_vfiprintf_r+0x1ee>
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d0c5      	beq.n	8008ce6 <_vfiprintf_r+0x176>
 8008d5a:	9105      	str	r1, [sp, #20]
 8008d5c:	e7c3      	b.n	8008ce6 <_vfiprintf_r+0x176>
 8008d5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d62:	4604      	mov	r4, r0
 8008d64:	2301      	movs	r3, #1
 8008d66:	e7f0      	b.n	8008d4a <_vfiprintf_r+0x1da>
 8008d68:	ab03      	add	r3, sp, #12
 8008d6a:	9300      	str	r3, [sp, #0]
 8008d6c:	462a      	mov	r2, r5
 8008d6e:	4b16      	ldr	r3, [pc, #88]	; (8008dc8 <_vfiprintf_r+0x258>)
 8008d70:	a904      	add	r1, sp, #16
 8008d72:	4630      	mov	r0, r6
 8008d74:	f7fd fc08 	bl	8006588 <_printf_float>
 8008d78:	4607      	mov	r7, r0
 8008d7a:	1c78      	adds	r0, r7, #1
 8008d7c:	d1d6      	bne.n	8008d2c <_vfiprintf_r+0x1bc>
 8008d7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d80:	07d9      	lsls	r1, r3, #31
 8008d82:	d405      	bmi.n	8008d90 <_vfiprintf_r+0x220>
 8008d84:	89ab      	ldrh	r3, [r5, #12]
 8008d86:	059a      	lsls	r2, r3, #22
 8008d88:	d402      	bmi.n	8008d90 <_vfiprintf_r+0x220>
 8008d8a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d8c:	f7ff fa12 	bl	80081b4 <__retarget_lock_release_recursive>
 8008d90:	89ab      	ldrh	r3, [r5, #12]
 8008d92:	065b      	lsls	r3, r3, #25
 8008d94:	f53f af12 	bmi.w	8008bbc <_vfiprintf_r+0x4c>
 8008d98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d9a:	e711      	b.n	8008bc0 <_vfiprintf_r+0x50>
 8008d9c:	ab03      	add	r3, sp, #12
 8008d9e:	9300      	str	r3, [sp, #0]
 8008da0:	462a      	mov	r2, r5
 8008da2:	4b09      	ldr	r3, [pc, #36]	; (8008dc8 <_vfiprintf_r+0x258>)
 8008da4:	a904      	add	r1, sp, #16
 8008da6:	4630      	mov	r0, r6
 8008da8:	f7fd fe92 	bl	8006ad0 <_printf_i>
 8008dac:	e7e4      	b.n	8008d78 <_vfiprintf_r+0x208>
 8008dae:	bf00      	nop
 8008db0:	080092f8 	.word	0x080092f8
 8008db4:	08009318 	.word	0x08009318
 8008db8:	080092d8 	.word	0x080092d8
 8008dbc:	08009494 	.word	0x08009494
 8008dc0:	0800949e 	.word	0x0800949e
 8008dc4:	08006589 	.word	0x08006589
 8008dc8:	08008b4b 	.word	0x08008b4b
 8008dcc:	0800949a 	.word	0x0800949a

08008dd0 <_sbrk_r>:
 8008dd0:	b538      	push	{r3, r4, r5, lr}
 8008dd2:	4d06      	ldr	r5, [pc, #24]	; (8008dec <_sbrk_r+0x1c>)
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	4604      	mov	r4, r0
 8008dd8:	4608      	mov	r0, r1
 8008dda:	602b      	str	r3, [r5, #0]
 8008ddc:	f7fd fa90 	bl	8006300 <_sbrk>
 8008de0:	1c43      	adds	r3, r0, #1
 8008de2:	d102      	bne.n	8008dea <_sbrk_r+0x1a>
 8008de4:	682b      	ldr	r3, [r5, #0]
 8008de6:	b103      	cbz	r3, 8008dea <_sbrk_r+0x1a>
 8008de8:	6023      	str	r3, [r4, #0]
 8008dea:	bd38      	pop	{r3, r4, r5, pc}
 8008dec:	200004c4 	.word	0x200004c4

08008df0 <__sread>:
 8008df0:	b510      	push	{r4, lr}
 8008df2:	460c      	mov	r4, r1
 8008df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008df8:	f000 f8e2 	bl	8008fc0 <_read_r>
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	bfab      	itete	ge
 8008e00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e02:	89a3      	ldrhlt	r3, [r4, #12]
 8008e04:	181b      	addge	r3, r3, r0
 8008e06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008e0a:	bfac      	ite	ge
 8008e0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008e0e:	81a3      	strhlt	r3, [r4, #12]
 8008e10:	bd10      	pop	{r4, pc}

08008e12 <__swrite>:
 8008e12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e16:	461f      	mov	r7, r3
 8008e18:	898b      	ldrh	r3, [r1, #12]
 8008e1a:	05db      	lsls	r3, r3, #23
 8008e1c:	4605      	mov	r5, r0
 8008e1e:	460c      	mov	r4, r1
 8008e20:	4616      	mov	r6, r2
 8008e22:	d505      	bpl.n	8008e30 <__swrite+0x1e>
 8008e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e28:	2302      	movs	r3, #2
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f000 f898 	bl	8008f60 <_lseek_r>
 8008e30:	89a3      	ldrh	r3, [r4, #12]
 8008e32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e3a:	81a3      	strh	r3, [r4, #12]
 8008e3c:	4632      	mov	r2, r6
 8008e3e:	463b      	mov	r3, r7
 8008e40:	4628      	mov	r0, r5
 8008e42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e46:	f000 b817 	b.w	8008e78 <_write_r>

08008e4a <__sseek>:
 8008e4a:	b510      	push	{r4, lr}
 8008e4c:	460c      	mov	r4, r1
 8008e4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e52:	f000 f885 	bl	8008f60 <_lseek_r>
 8008e56:	1c43      	adds	r3, r0, #1
 8008e58:	89a3      	ldrh	r3, [r4, #12]
 8008e5a:	bf15      	itete	ne
 8008e5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008e5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008e62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008e66:	81a3      	strheq	r3, [r4, #12]
 8008e68:	bf18      	it	ne
 8008e6a:	81a3      	strhne	r3, [r4, #12]
 8008e6c:	bd10      	pop	{r4, pc}

08008e6e <__sclose>:
 8008e6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e72:	f000 b831 	b.w	8008ed8 <_close_r>
	...

08008e78 <_write_r>:
 8008e78:	b538      	push	{r3, r4, r5, lr}
 8008e7a:	4d07      	ldr	r5, [pc, #28]	; (8008e98 <_write_r+0x20>)
 8008e7c:	4604      	mov	r4, r0
 8008e7e:	4608      	mov	r0, r1
 8008e80:	4611      	mov	r1, r2
 8008e82:	2200      	movs	r2, #0
 8008e84:	602a      	str	r2, [r5, #0]
 8008e86:	461a      	mov	r2, r3
 8008e88:	f7fc ff6e 	bl	8005d68 <_write>
 8008e8c:	1c43      	adds	r3, r0, #1
 8008e8e:	d102      	bne.n	8008e96 <_write_r+0x1e>
 8008e90:	682b      	ldr	r3, [r5, #0]
 8008e92:	b103      	cbz	r3, 8008e96 <_write_r+0x1e>
 8008e94:	6023      	str	r3, [r4, #0]
 8008e96:	bd38      	pop	{r3, r4, r5, pc}
 8008e98:	200004c4 	.word	0x200004c4

08008e9c <__assert_func>:
 8008e9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e9e:	4614      	mov	r4, r2
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	4b09      	ldr	r3, [pc, #36]	; (8008ec8 <__assert_func+0x2c>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4605      	mov	r5, r0
 8008ea8:	68d8      	ldr	r0, [r3, #12]
 8008eaa:	b14c      	cbz	r4, 8008ec0 <__assert_func+0x24>
 8008eac:	4b07      	ldr	r3, [pc, #28]	; (8008ecc <__assert_func+0x30>)
 8008eae:	9100      	str	r1, [sp, #0]
 8008eb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008eb4:	4906      	ldr	r1, [pc, #24]	; (8008ed0 <__assert_func+0x34>)
 8008eb6:	462b      	mov	r3, r5
 8008eb8:	f000 f81e 	bl	8008ef8 <fiprintf>
 8008ebc:	f000 f89f 	bl	8008ffe <abort>
 8008ec0:	4b04      	ldr	r3, [pc, #16]	; (8008ed4 <__assert_func+0x38>)
 8008ec2:	461c      	mov	r4, r3
 8008ec4:	e7f3      	b.n	8008eae <__assert_func+0x12>
 8008ec6:	bf00      	nop
 8008ec8:	2000000c 	.word	0x2000000c
 8008ecc:	080094a5 	.word	0x080094a5
 8008ed0:	080094b2 	.word	0x080094b2
 8008ed4:	080094e0 	.word	0x080094e0

08008ed8 <_close_r>:
 8008ed8:	b538      	push	{r3, r4, r5, lr}
 8008eda:	4d06      	ldr	r5, [pc, #24]	; (8008ef4 <_close_r+0x1c>)
 8008edc:	2300      	movs	r3, #0
 8008ede:	4604      	mov	r4, r0
 8008ee0:	4608      	mov	r0, r1
 8008ee2:	602b      	str	r3, [r5, #0]
 8008ee4:	f7fc ff6c 	bl	8005dc0 <_close>
 8008ee8:	1c43      	adds	r3, r0, #1
 8008eea:	d102      	bne.n	8008ef2 <_close_r+0x1a>
 8008eec:	682b      	ldr	r3, [r5, #0]
 8008eee:	b103      	cbz	r3, 8008ef2 <_close_r+0x1a>
 8008ef0:	6023      	str	r3, [r4, #0]
 8008ef2:	bd38      	pop	{r3, r4, r5, pc}
 8008ef4:	200004c4 	.word	0x200004c4

08008ef8 <fiprintf>:
 8008ef8:	b40e      	push	{r1, r2, r3}
 8008efa:	b503      	push	{r0, r1, lr}
 8008efc:	4601      	mov	r1, r0
 8008efe:	ab03      	add	r3, sp, #12
 8008f00:	4805      	ldr	r0, [pc, #20]	; (8008f18 <fiprintf+0x20>)
 8008f02:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f06:	6800      	ldr	r0, [r0, #0]
 8008f08:	9301      	str	r3, [sp, #4]
 8008f0a:	f7ff fe31 	bl	8008b70 <_vfiprintf_r>
 8008f0e:	b002      	add	sp, #8
 8008f10:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f14:	b003      	add	sp, #12
 8008f16:	4770      	bx	lr
 8008f18:	2000000c 	.word	0x2000000c

08008f1c <_fstat_r>:
 8008f1c:	b538      	push	{r3, r4, r5, lr}
 8008f1e:	4d07      	ldr	r5, [pc, #28]	; (8008f3c <_fstat_r+0x20>)
 8008f20:	2300      	movs	r3, #0
 8008f22:	4604      	mov	r4, r0
 8008f24:	4608      	mov	r0, r1
 8008f26:	4611      	mov	r1, r2
 8008f28:	602b      	str	r3, [r5, #0]
 8008f2a:	f7fc ff99 	bl	8005e60 <_fstat>
 8008f2e:	1c43      	adds	r3, r0, #1
 8008f30:	d102      	bne.n	8008f38 <_fstat_r+0x1c>
 8008f32:	682b      	ldr	r3, [r5, #0]
 8008f34:	b103      	cbz	r3, 8008f38 <_fstat_r+0x1c>
 8008f36:	6023      	str	r3, [r4, #0]
 8008f38:	bd38      	pop	{r3, r4, r5, pc}
 8008f3a:	bf00      	nop
 8008f3c:	200004c4 	.word	0x200004c4

08008f40 <_isatty_r>:
 8008f40:	b538      	push	{r3, r4, r5, lr}
 8008f42:	4d06      	ldr	r5, [pc, #24]	; (8008f5c <_isatty_r+0x1c>)
 8008f44:	2300      	movs	r3, #0
 8008f46:	4604      	mov	r4, r0
 8008f48:	4608      	mov	r0, r1
 8008f4a:	602b      	str	r3, [r5, #0]
 8008f4c:	f7fc fef6 	bl	8005d3c <_isatty>
 8008f50:	1c43      	adds	r3, r0, #1
 8008f52:	d102      	bne.n	8008f5a <_isatty_r+0x1a>
 8008f54:	682b      	ldr	r3, [r5, #0]
 8008f56:	b103      	cbz	r3, 8008f5a <_isatty_r+0x1a>
 8008f58:	6023      	str	r3, [r4, #0]
 8008f5a:	bd38      	pop	{r3, r4, r5, pc}
 8008f5c:	200004c4 	.word	0x200004c4

08008f60 <_lseek_r>:
 8008f60:	b538      	push	{r3, r4, r5, lr}
 8008f62:	4d07      	ldr	r5, [pc, #28]	; (8008f80 <_lseek_r+0x20>)
 8008f64:	4604      	mov	r4, r0
 8008f66:	4608      	mov	r0, r1
 8008f68:	4611      	mov	r1, r2
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	602a      	str	r2, [r5, #0]
 8008f6e:	461a      	mov	r2, r3
 8008f70:	f7fc ff3d 	bl	8005dee <_lseek>
 8008f74:	1c43      	adds	r3, r0, #1
 8008f76:	d102      	bne.n	8008f7e <_lseek_r+0x1e>
 8008f78:	682b      	ldr	r3, [r5, #0]
 8008f7a:	b103      	cbz	r3, 8008f7e <_lseek_r+0x1e>
 8008f7c:	6023      	str	r3, [r4, #0]
 8008f7e:	bd38      	pop	{r3, r4, r5, pc}
 8008f80:	200004c4 	.word	0x200004c4

08008f84 <__ascii_mbtowc>:
 8008f84:	b082      	sub	sp, #8
 8008f86:	b901      	cbnz	r1, 8008f8a <__ascii_mbtowc+0x6>
 8008f88:	a901      	add	r1, sp, #4
 8008f8a:	b142      	cbz	r2, 8008f9e <__ascii_mbtowc+0x1a>
 8008f8c:	b14b      	cbz	r3, 8008fa2 <__ascii_mbtowc+0x1e>
 8008f8e:	7813      	ldrb	r3, [r2, #0]
 8008f90:	600b      	str	r3, [r1, #0]
 8008f92:	7812      	ldrb	r2, [r2, #0]
 8008f94:	1e10      	subs	r0, r2, #0
 8008f96:	bf18      	it	ne
 8008f98:	2001      	movne	r0, #1
 8008f9a:	b002      	add	sp, #8
 8008f9c:	4770      	bx	lr
 8008f9e:	4610      	mov	r0, r2
 8008fa0:	e7fb      	b.n	8008f9a <__ascii_mbtowc+0x16>
 8008fa2:	f06f 0001 	mvn.w	r0, #1
 8008fa6:	e7f8      	b.n	8008f9a <__ascii_mbtowc+0x16>

08008fa8 <__malloc_lock>:
 8008fa8:	4801      	ldr	r0, [pc, #4]	; (8008fb0 <__malloc_lock+0x8>)
 8008faa:	f7ff b902 	b.w	80081b2 <__retarget_lock_acquire_recursive>
 8008fae:	bf00      	nop
 8008fb0:	200004bc 	.word	0x200004bc

08008fb4 <__malloc_unlock>:
 8008fb4:	4801      	ldr	r0, [pc, #4]	; (8008fbc <__malloc_unlock+0x8>)
 8008fb6:	f7ff b8fd 	b.w	80081b4 <__retarget_lock_release_recursive>
 8008fba:	bf00      	nop
 8008fbc:	200004bc 	.word	0x200004bc

08008fc0 <_read_r>:
 8008fc0:	b538      	push	{r3, r4, r5, lr}
 8008fc2:	4d07      	ldr	r5, [pc, #28]	; (8008fe0 <_read_r+0x20>)
 8008fc4:	4604      	mov	r4, r0
 8008fc6:	4608      	mov	r0, r1
 8008fc8:	4611      	mov	r1, r2
 8008fca:	2200      	movs	r2, #0
 8008fcc:	602a      	str	r2, [r5, #0]
 8008fce:	461a      	mov	r2, r3
 8008fd0:	f7fc ff1e 	bl	8005e10 <_read>
 8008fd4:	1c43      	adds	r3, r0, #1
 8008fd6:	d102      	bne.n	8008fde <_read_r+0x1e>
 8008fd8:	682b      	ldr	r3, [r5, #0]
 8008fda:	b103      	cbz	r3, 8008fde <_read_r+0x1e>
 8008fdc:	6023      	str	r3, [r4, #0]
 8008fde:	bd38      	pop	{r3, r4, r5, pc}
 8008fe0:	200004c4 	.word	0x200004c4

08008fe4 <__ascii_wctomb>:
 8008fe4:	b149      	cbz	r1, 8008ffa <__ascii_wctomb+0x16>
 8008fe6:	2aff      	cmp	r2, #255	; 0xff
 8008fe8:	bf85      	ittet	hi
 8008fea:	238a      	movhi	r3, #138	; 0x8a
 8008fec:	6003      	strhi	r3, [r0, #0]
 8008fee:	700a      	strbls	r2, [r1, #0]
 8008ff0:	f04f 30ff 	movhi.w	r0, #4294967295
 8008ff4:	bf98      	it	ls
 8008ff6:	2001      	movls	r0, #1
 8008ff8:	4770      	bx	lr
 8008ffa:	4608      	mov	r0, r1
 8008ffc:	4770      	bx	lr

08008ffe <abort>:
 8008ffe:	b508      	push	{r3, lr}
 8009000:	2006      	movs	r0, #6
 8009002:	f000 f82b 	bl	800905c <raise>
 8009006:	2001      	movs	r0, #1
 8009008:	f000 f89a 	bl	8009140 <_exit>

0800900c <_raise_r>:
 800900c:	291f      	cmp	r1, #31
 800900e:	b538      	push	{r3, r4, r5, lr}
 8009010:	4604      	mov	r4, r0
 8009012:	460d      	mov	r5, r1
 8009014:	d904      	bls.n	8009020 <_raise_r+0x14>
 8009016:	2316      	movs	r3, #22
 8009018:	6003      	str	r3, [r0, #0]
 800901a:	f04f 30ff 	mov.w	r0, #4294967295
 800901e:	bd38      	pop	{r3, r4, r5, pc}
 8009020:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009022:	b112      	cbz	r2, 800902a <_raise_r+0x1e>
 8009024:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009028:	b94b      	cbnz	r3, 800903e <_raise_r+0x32>
 800902a:	4620      	mov	r0, r4
 800902c:	f000 f830 	bl	8009090 <_getpid_r>
 8009030:	462a      	mov	r2, r5
 8009032:	4601      	mov	r1, r0
 8009034:	4620      	mov	r0, r4
 8009036:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800903a:	f000 b817 	b.w	800906c <_kill_r>
 800903e:	2b01      	cmp	r3, #1
 8009040:	d00a      	beq.n	8009058 <_raise_r+0x4c>
 8009042:	1c59      	adds	r1, r3, #1
 8009044:	d103      	bne.n	800904e <_raise_r+0x42>
 8009046:	2316      	movs	r3, #22
 8009048:	6003      	str	r3, [r0, #0]
 800904a:	2001      	movs	r0, #1
 800904c:	e7e7      	b.n	800901e <_raise_r+0x12>
 800904e:	2400      	movs	r4, #0
 8009050:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009054:	4628      	mov	r0, r5
 8009056:	4798      	blx	r3
 8009058:	2000      	movs	r0, #0
 800905a:	e7e0      	b.n	800901e <_raise_r+0x12>

0800905c <raise>:
 800905c:	4b02      	ldr	r3, [pc, #8]	; (8009068 <raise+0xc>)
 800905e:	4601      	mov	r1, r0
 8009060:	6818      	ldr	r0, [r3, #0]
 8009062:	f7ff bfd3 	b.w	800900c <_raise_r>
 8009066:	bf00      	nop
 8009068:	2000000c 	.word	0x2000000c

0800906c <_kill_r>:
 800906c:	b538      	push	{r3, r4, r5, lr}
 800906e:	4d07      	ldr	r5, [pc, #28]	; (800908c <_kill_r+0x20>)
 8009070:	2300      	movs	r3, #0
 8009072:	4604      	mov	r4, r0
 8009074:	4608      	mov	r0, r1
 8009076:	4611      	mov	r1, r2
 8009078:	602b      	str	r3, [r5, #0]
 800907a:	f000 f859 	bl	8009130 <_kill>
 800907e:	1c43      	adds	r3, r0, #1
 8009080:	d102      	bne.n	8009088 <_kill_r+0x1c>
 8009082:	682b      	ldr	r3, [r5, #0]
 8009084:	b103      	cbz	r3, 8009088 <_kill_r+0x1c>
 8009086:	6023      	str	r3, [r4, #0]
 8009088:	bd38      	pop	{r3, r4, r5, pc}
 800908a:	bf00      	nop
 800908c:	200004c4 	.word	0x200004c4

08009090 <_getpid_r>:
 8009090:	f000 b846 	b.w	8009120 <_getpid>

08009094 <round>:
 8009094:	ec51 0b10 	vmov	r0, r1, d0
 8009098:	b570      	push	{r4, r5, r6, lr}
 800909a:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800909e:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 80090a2:	2c13      	cmp	r4, #19
 80090a4:	ee10 2a10 	vmov	r2, s0
 80090a8:	460b      	mov	r3, r1
 80090aa:	dc19      	bgt.n	80090e0 <round+0x4c>
 80090ac:	2c00      	cmp	r4, #0
 80090ae:	da09      	bge.n	80090c4 <round+0x30>
 80090b0:	3401      	adds	r4, #1
 80090b2:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80090b6:	d103      	bne.n	80090c0 <round+0x2c>
 80090b8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80090bc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80090c0:	2100      	movs	r1, #0
 80090c2:	e028      	b.n	8009116 <round+0x82>
 80090c4:	4d15      	ldr	r5, [pc, #84]	; (800911c <round+0x88>)
 80090c6:	4125      	asrs	r5, r4
 80090c8:	ea01 0605 	and.w	r6, r1, r5
 80090cc:	4332      	orrs	r2, r6
 80090ce:	d00e      	beq.n	80090ee <round+0x5a>
 80090d0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80090d4:	fa42 f404 	asr.w	r4, r2, r4
 80090d8:	4423      	add	r3, r4
 80090da:	ea23 0305 	bic.w	r3, r3, r5
 80090de:	e7ef      	b.n	80090c0 <round+0x2c>
 80090e0:	2c33      	cmp	r4, #51	; 0x33
 80090e2:	dd07      	ble.n	80090f4 <round+0x60>
 80090e4:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80090e8:	d101      	bne.n	80090ee <round+0x5a>
 80090ea:	f7f7 f8ef 	bl	80002cc <__adddf3>
 80090ee:	ec41 0b10 	vmov	d0, r0, r1
 80090f2:	bd70      	pop	{r4, r5, r6, pc}
 80090f4:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 80090f8:	f04f 35ff 	mov.w	r5, #4294967295
 80090fc:	40f5      	lsrs	r5, r6
 80090fe:	4228      	tst	r0, r5
 8009100:	d0f5      	beq.n	80090ee <round+0x5a>
 8009102:	2101      	movs	r1, #1
 8009104:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8009108:	fa01 f404 	lsl.w	r4, r1, r4
 800910c:	1912      	adds	r2, r2, r4
 800910e:	bf28      	it	cs
 8009110:	185b      	addcs	r3, r3, r1
 8009112:	ea22 0105 	bic.w	r1, r2, r5
 8009116:	4608      	mov	r0, r1
 8009118:	4619      	mov	r1, r3
 800911a:	e7e8      	b.n	80090ee <round+0x5a>
 800911c:	000fffff 	.word	0x000fffff

08009120 <_getpid>:
 8009120:	4b02      	ldr	r3, [pc, #8]	; (800912c <_getpid+0xc>)
 8009122:	2258      	movs	r2, #88	; 0x58
 8009124:	601a      	str	r2, [r3, #0]
 8009126:	f04f 30ff 	mov.w	r0, #4294967295
 800912a:	4770      	bx	lr
 800912c:	200004c4 	.word	0x200004c4

08009130 <_kill>:
 8009130:	4b02      	ldr	r3, [pc, #8]	; (800913c <_kill+0xc>)
 8009132:	2258      	movs	r2, #88	; 0x58
 8009134:	601a      	str	r2, [r3, #0]
 8009136:	f04f 30ff 	mov.w	r0, #4294967295
 800913a:	4770      	bx	lr
 800913c:	200004c4 	.word	0x200004c4

08009140 <_exit>:
 8009140:	e7fe      	b.n	8009140 <_exit>
	...

08009144 <_init>:
 8009144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009146:	bf00      	nop
 8009148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800914a:	bc08      	pop	{r3}
 800914c:	469e      	mov	lr, r3
 800914e:	4770      	bx	lr

08009150 <_fini>:
 8009150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009152:	bf00      	nop
 8009154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009156:	bc08      	pop	{r3}
 8009158:	469e      	mov	lr, r3
 800915a:	4770      	bx	lr
